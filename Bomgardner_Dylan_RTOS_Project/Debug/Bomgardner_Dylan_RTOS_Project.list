
Bomgardner_Dylan_RTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e110  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000207c  0800e2c0  0800e2c0  0001e2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801033c  0801033c  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  0801033c  0801033c  0002033c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010344  08010344  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010344  08010344  00020344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010348  08010348  00020348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801034c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030360  2**0
                  CONTENTS
 10 .bss          0002e6a8  20000360  20000360  00030360  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2002ea08  2002ea08  00030360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023477  00000000  00000000  000303d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f4c  00000000  00000000  0005384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e20  00000000  00000000  00058798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001706  00000000  00000000  0005a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002add9  00000000  00000000  0005bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021225  00000000  00000000  00086a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4618  00000000  00000000  000a7cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000088c8  00000000  00000000  0019c2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000dc  00000000  00000000  001a4b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000360 	.word	0x20000360
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e2a8 	.word	0x0800e2a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000364 	.word	0x20000364
 80001ec:	0800e2a8 	.word	0x0800e2a8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002de40 	.word	0x2002de40
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ApplicationInit>:
#if (WAYPOINT_REUSE)
	uint8_t waypoint_reached = 0;
	uint16_t prev_time = TIME_TO_COMPLETE;
#endif
void ApplicationInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	LTCD__Init();
 8000eac:	f001 fbb2 	bl	8002614 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f001 fc0d 	bl	80026d0 <LTCD_Layer_Init>
    Gyro_Init();
 8000eb6:	f001 f92f 	bl	8002118 <Gyro_Init>


    map_init();
 8000eba:	f000 f8d9 	bl	8001070 <map_init>

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <itc_init>:

void itc_init(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
//	osStatus_t status;
	physics_task_id = osThreadNew(physics_callback, NULL, &physics_task_attributes);
 8000ec8:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <itc_init+0x140>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	484e      	ldr	r0, [pc, #312]	; (8001008 <itc_init+0x144>)
 8000ece:	f006 fab7 	bl	8007440 <osThreadNew>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	; (800100c <itc_init+0x148>)
 8000ed6:	6013      	str	r3, [r2, #0]
	if(physics_task_id == NULL) {
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <itc_init+0x148>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d100      	bne.n	8000ee2 <itc_init+0x1e>
		while(1);
 8000ee0:	e7fe      	b.n	8000ee0 <itc_init+0x1c>
	}

	lcd_led_task_id = osThreadNew(lcd_led_callback, NULL, &lcd_led_task_attributes);
 8000ee2:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <itc_init+0x14c>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	484b      	ldr	r0, [pc, #300]	; (8001014 <itc_init+0x150>)
 8000ee8:	f006 faaa 	bl	8007440 <osThreadNew>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <itc_init+0x154>)
 8000ef0:	6013      	str	r3, [r2, #0]
	if(lcd_led_task_id == NULL) {
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <itc_init+0x154>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <itc_init+0x38>
		while(1);
 8000efa:	e7fe      	b.n	8000efa <itc_init+0x36>
	}

	timer_task_id = osThreadNew(game_time_callback, NULL, &timer_task_attributes);
 8000efc:	4a47      	ldr	r2, [pc, #284]	; (800101c <itc_init+0x158>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4847      	ldr	r0, [pc, #284]	; (8001020 <itc_init+0x15c>)
 8000f02:	f006 fa9d 	bl	8007440 <osThreadNew>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a46      	ldr	r2, [pc, #280]	; (8001024 <itc_init+0x160>)
 8000f0a:	6013      	str	r3, [r2, #0]
	if(timer_task_id == NULL) {
 8000f0c:	4b45      	ldr	r3, [pc, #276]	; (8001024 <itc_init+0x160>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d100      	bne.n	8000f16 <itc_init+0x52>
		while(1);
 8000f14:	e7fe      	b.n	8000f14 <itc_init+0x50>
	}

	disruptor_task_id = osThreadNew(disruptor_callback, NULL, &disruptor_task_attributes);
 8000f16:	4a44      	ldr	r2, [pc, #272]	; (8001028 <itc_init+0x164>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4844      	ldr	r0, [pc, #272]	; (800102c <itc_init+0x168>)
 8000f1c:	f006 fa90 	bl	8007440 <osThreadNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a43      	ldr	r2, [pc, #268]	; (8001030 <itc_init+0x16c>)
 8000f24:	6013      	str	r3, [r2, #0]
	if(disruptor_task_id == NULL) {
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <itc_init+0x16c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <itc_init+0x6c>
		while(1);
 8000f2e:	e7fe      	b.n	8000f2e <itc_init+0x6a>
	}

	disruptor_timer_task_id = osThreadNew(disruptor_timer_callback, NULL, &disruptor_timer_task_attributes);
 8000f30:	4a40      	ldr	r2, [pc, #256]	; (8001034 <itc_init+0x170>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4840      	ldr	r0, [pc, #256]	; (8001038 <itc_init+0x174>)
 8000f36:	f006 fa83 	bl	8007440 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a3f      	ldr	r2, [pc, #252]	; (800103c <itc_init+0x178>)
 8000f3e:	6013      	str	r3, [r2, #0]
		if(disruptor_timer_task_id == NULL) {
 8000f40:	4b3e      	ldr	r3, [pc, #248]	; (800103c <itc_init+0x178>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d100      	bne.n	8000f4a <itc_init+0x86>
			while(1);
 8000f48:	e7fe      	b.n	8000f48 <itc_init+0x84>
		}

	monitor_task_id = osThreadNew(monitor_callback, NULL, &monitor_task_attributes);
 8000f4a:	4a3d      	ldr	r2, [pc, #244]	; (8001040 <itc_init+0x17c>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	483d      	ldr	r0, [pc, #244]	; (8001044 <itc_init+0x180>)
 8000f50:	f006 fa76 	bl	8007440 <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <itc_init+0x184>)
 8000f58:	6013      	str	r3, [r2, #0]
	if(monitor_task_id == NULL) {
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <itc_init+0x184>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <itc_init+0xa0>
		while(1);
 8000f62:	e7fe      	b.n	8000f62 <itc_init+0x9e>
	}

	monitor2_task_id = osThreadNew(monitor2_callback, NULL, &monitor2_task_attributes);
 8000f64:	4a39      	ldr	r2, [pc, #228]	; (800104c <itc_init+0x188>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4839      	ldr	r0, [pc, #228]	; (8001050 <itc_init+0x18c>)
 8000f6a:	f006 fa69 	bl	8007440 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a38      	ldr	r2, [pc, #224]	; (8001054 <itc_init+0x190>)
 8000f72:	6013      	str	r3, [r2, #0]
	if(monitor2_task_id == NULL) {
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <itc_init+0x190>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d100      	bne.n	8000f7e <itc_init+0xba>
		while(1);
 8000f7c:	e7fe      	b.n	8000f7c <itc_init+0xb8>
	}
	//timers
	gyro_timer = osTimerNew(gyro_callback, osTimerPeriodic, NULL, NULL);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	4834      	ldr	r0, [pc, #208]	; (8001058 <itc_init+0x194>)
 8000f86:	f006 fb4b 	bl	8007620 <osTimerNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a33      	ldr	r2, [pc, #204]	; (800105c <itc_init+0x198>)
 8000f8e:	6013      	str	r3, [r2, #0]
	if(gyro_timer == NULL) while(1);
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <itc_init+0x198>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d100      	bne.n	8000f9a <itc_init+0xd6>
 8000f98:	e7fe      	b.n	8000f98 <itc_init+0xd4>


	//uint8_t gyro_timer_time = ();
	osTimerStart(gyro_timer, 1000 / UPDATE_FREQUENCY);
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <itc_init+0x198>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2114      	movs	r1, #20
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fbb9 	bl	8007718 <osTimerStart>
//		while(1);
//	      // Timer could not be started
//	}

	//itcs
	gyro_flag = osEventFlagsNew(NULL);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f006 fbe4 	bl	8007774 <osEventFlagsNew>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a2c      	ldr	r2, [pc, #176]	; (8001060 <itc_init+0x19c>)
 8000fb0:	6013      	str	r3, [r2, #0]
	if(gyro_flag == NULL) while(1);
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <itc_init+0x19c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <itc_init+0xf8>
 8000fba:	e7fe      	b.n	8000fba <itc_init+0xf6>

	gyro_mut = osMutexNew(NULL);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f006 fcc3 	bl	8007948 <osMutexNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <itc_init+0x1a0>)
 8000fc6:	6013      	str	r3, [r2, #0]
	if(gyro_mut == NULL) while(1);
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <itc_init+0x1a0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d100      	bne.n	8000fd2 <itc_init+0x10e>
 8000fd0:	e7fe      	b.n	8000fd0 <itc_init+0x10c>

	game_time_mut = osMutexNew(NULL);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f006 fcb8 	bl	8007948 <osMutexNew>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <itc_init+0x1a4>)
 8000fdc:	6013      	str	r3, [r2, #0]
	if(game_time_mut == NULL) while(1);
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <itc_init+0x1a4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <itc_init+0x124>
 8000fe6:	e7fe      	b.n	8000fe6 <itc_init+0x122>

	disruptor_flag = osEventFlagsNew(NULL);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f006 fbc3 	bl	8007774 <osEventFlagsNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	; (800106c <itc_init+0x1a8>)
 8000ff2:	6013      	str	r3, [r2, #0]
	if(disruptor_flag == NULL) while(1);
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <itc_init+0x1a8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d100      	bne.n	8000ffe <itc_init+0x13a>
 8000ffc:	e7fe      	b.n	8000ffc <itc_init+0x138>

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	0800efd8 	.word	0x0800efd8
 8001008:	080010d9 	.word	0x080010d9
 800100c:	20002164 	.word	0x20002164
 8001010:	0800ef48 	.word	0x0800ef48
 8001014:	08001941 	.word	0x08001941
 8001018:	20000bf4 	.word	0x20000bf4
 800101c:	0800ef6c 	.word	0x0800ef6c
 8001020:	080018f5 	.word	0x080018f5
 8001024:	20001470 	.word	0x20001470
 8001028:	0800effc 	.word	0x0800effc
 800102c:	08001b59 	.word	0x08001b59
 8001030:	200029e0 	.word	0x200029e0
 8001034:	0800f020 	.word	0x0800f020
 8001038:	08001bad 	.word	0x08001bad
 800103c:	20002c1c 	.word	0x20002c1c
 8001040:	0800ef90 	.word	0x0800ef90
 8001044:	08001c01 	.word	0x08001c01
 8001048:	200016ac 	.word	0x200016ac
 800104c:	0800efb4 	.word	0x0800efb4
 8001050:	08001c91 	.word	0x08001c91
 8001054:	200018e8 	.word	0x200018e8
 8001058:	0800107d 	.word	0x0800107d
 800105c:	20002c20 	.word	0x20002c20
 8001060:	20002c30 	.word	0x20002c30
 8001064:	20002c24 	.word	0x20002c24
 8001068:	20002c28 	.word	0x20002c28
 800106c:	20002c2c 	.word	0x20002c2c

08001070 <map_init>:

void game_init(void) {

}

void map_init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
//MAZE GENERATION
	//make the background light brown
	//LCD_Clear(0,LCD_COLOR_BACKGROUND);
//arm the map with data and the starting coordinate
	maze_generation();
 8001074:	f002 fc0a 	bl	800388c <maze_generation>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <gyro_callback>:

void gyro_callback(void* argument) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	osMutexAcquire(gyro_mut, osWaitForever);
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <gyro_callback+0x4c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fce1 	bl	8007a54 <osMutexAcquire>
	gyro_x = Gyro_Get_Velocity_X();
 8001092:	f001 f901 	bl	8002298 <Gyro_Get_Velocity_X>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <gyro_callback+0x50>)
 800109c:	801a      	strh	r2, [r3, #0]
	gyro_y = Gyro_Get_Velocity_Y();
 800109e:	f001 f8c9 	bl	8002234 <Gyro_Get_Velocity_Y>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <gyro_callback+0x54>)
 80010a8:	801a      	strh	r2, [r3, #0]
	osMutexRelease(gyro_mut);
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <gyro_callback+0x4c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fd1b 	bl	8007aea <osMutexRelease>
	osEventFlagsSet(gyro_flag, 1);
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <gyro_callback+0x58>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fb9a 	bl	80077f4 <osEventFlagsSet>

}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20002c24 	.word	0x20002c24
 80010cc:	20002c36 	.word	0x20002c36
 80010d0:	20002c34 	.word	0x20002c34
 80010d4:	20002c30 	.word	0x20002c30

080010d8 <physics_callback>:

void physics_callback(void* argument) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80010de:	af00      	add	r7, sp, #0
 80010e0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80010e4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80010e8:	6018      	str	r0, [r3, #0]
	int16_t local_gyro_x;
	int16_t local_gyro_y;
	uint8_t ball_dimensions[2][360];
	float update_freq = 1.0 / UPDATE_FREQUENCY;
 80010ea:	4b87      	ldr	r3, [pc, #540]	; (8001308 <physics_callback+0x230>)
 80010ec:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

	while(1) {
		osEventFlagsWait(gyro_flag, 1, osFlagsWaitAny, osWaitForever);
 80010f0:	4b86      	ldr	r3, [pc, #536]	; (800130c <physics_callback+0x234>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f8:	2200      	movs	r2, #0
 80010fa:	2101      	movs	r1, #1
 80010fc:	f006 fbbe 	bl	800787c <osEventFlagsWait>
		//osDelay(1);
		osMutexAcquire(gyro_mut, osWaitForever);
 8001100:	4b83      	ldr	r3, [pc, #524]	; (8001310 <physics_callback+0x238>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fca3 	bl	8007a54 <osMutexAcquire>
		local_gyro_x = gyro_x;
 800110e:	4b81      	ldr	r3, [pc, #516]	; (8001314 <physics_callback+0x23c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	f8a7 32ee 	strh.w	r3, [r7, #750]	; 0x2ee
		local_gyro_y = gyro_y;
 8001116:	4b80      	ldr	r3, [pc, #512]	; (8001318 <physics_callback+0x240>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f8a7 32ec 	strh.w	r3, [r7, #748]	; 0x2ec
		osMutexRelease(gyro_mut);
 800111e:	4b7c      	ldr	r3, [pc, #496]	; (8001310 <physics_callback+0x238>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f006 fce1 	bl	8007aea <osMutexRelease>

			//was 300
		if(gyro_x < 1000 && gyro_x > -1000) local_gyro_x = 0;
 8001128:	4b7a      	ldr	r3, [pc, #488]	; (8001314 <physics_callback+0x23c>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001132:	da08      	bge.n	8001146 <physics_callback+0x6e>
 8001134:	4b77      	ldr	r3, [pc, #476]	; (8001314 <physics_callback+0x23c>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800113e:	dd02      	ble.n	8001146 <physics_callback+0x6e>
 8001140:	2300      	movs	r3, #0
 8001142:	f8a7 32ee 	strh.w	r3, [r7, #750]	; 0x2ee
		if(gyro_y < 1000 && gyro_y > -1000) local_gyro_y = 0;
 8001146:	4b74      	ldr	r3, [pc, #464]	; (8001318 <physics_callback+0x240>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001150:	da08      	bge.n	8001164 <physics_callback+0x8c>
 8001152:	4b71      	ldr	r3, [pc, #452]	; (8001318 <physics_callback+0x240>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800115c:	dd02      	ble.n	8001164 <physics_callback+0x8c>
 800115e:	2300      	movs	r3, #0
 8001160:	f8a7 32ec 	strh.w	r3, [r7, #748]	; 0x2ec
#if (BALL_FALL)
		if(angle_x > 90 || angle_x < -90 || angle_y > 90 || angle_y < -90) lose_game();
 8001164:	4b6d      	ldr	r3, [pc, #436]	; (800131c <physics_callback+0x244>)
 8001166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116a:	2b5a      	cmp	r3, #90	; 0x5a
 800116c:	dc10      	bgt.n	8001190 <physics_callback+0xb8>
 800116e:	4b6b      	ldr	r3, [pc, #428]	; (800131c <physics_callback+0x244>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001178:	db0a      	blt.n	8001190 <physics_callback+0xb8>
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <physics_callback+0x248>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	2b5a      	cmp	r3, #90	; 0x5a
 8001182:	dc05      	bgt.n	8001190 <physics_callback+0xb8>
 8001184:	4b66      	ldr	r3, [pc, #408]	; (8001320 <physics_callback+0x248>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 800118e:	da01      	bge.n	8001194 <physics_callback+0xbc>
 8001190:	f000 fdc6 	bl	8001d20 <lose_game>
#endif
		angle_x += (local_gyro_x * update_freq) / 40 * ANGLE_GAIN / 1000;
 8001194:	4b61      	ldr	r3, [pc, #388]	; (800131c <physics_callback+0x244>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	f9b7 32ee 	ldrsh.w	r3, [r7, #750]	; 0x2ee
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011ae:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 80011b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b6:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8001324 <physics_callback+0x24c>
 80011ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011be:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001328 <physics_callback+0x250>
 80011c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80011c6:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8001328 <physics_callback+0x250>
 80011ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d6:	ee17 3a90 	vmov	r3, s15
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b4f      	ldr	r3, [pc, #316]	; (800131c <physics_callback+0x244>)
 80011de:	801a      	strh	r2, [r3, #0]
		angle_y += (local_gyro_y * update_freq) / 40 * ANGLE_GAIN / 1000;// * ANGLE_GAIN / 1000;// * ANGLE_GAIN / 1000;
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <physics_callback+0x248>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	f9b7 32ec 	ldrsh.w	r3, [r7, #748]	; 0x2ec
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011fa:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 80011fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001202:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8001324 <physics_callback+0x24c>
 8001206:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800120a:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001328 <physics_callback+0x250>
 800120e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001212:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8001328 <physics_callback+0x250>
 8001216:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800121a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001222:	ee17 3a90 	vmov	r3, s15
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <physics_callback+0x248>)
 800122a:	801a      	strh	r2, [r3, #0]

		acceleration_x =  sin_grav[((angle_x > 90) ? 90 : (angle_x < -90) ? -90 : angle_x) + 90] * (float) GRAVITY / 100.0;
 800122c:	4b3b      	ldr	r3, [pc, #236]	; (800131c <physics_callback+0x244>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	2b5a      	cmp	r3, #90	; 0x5a
 8001234:	dc0a      	bgt.n	800124c <physics_callback+0x174>
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <physics_callback+0x244>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001240:	4293      	cmp	r3, r2
 8001242:	bfb8      	it	lt
 8001244:	4613      	movlt	r3, r2
 8001246:	b21b      	sxth	r3, r3
 8001248:	335a      	adds	r3, #90	; 0x5a
 800124a:	e000      	b.n	800124e <physics_callback+0x176>
 800124c:	23b4      	movs	r3, #180	; 0xb4
 800124e:	4a37      	ldr	r2, [pc, #220]	; (800132c <physics_callback+0x254>)
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001330 <physics_callback+0x258>
 800125c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001260:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001334 <physics_callback+0x25c>
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	4b33      	ldr	r3, [pc, #204]	; (8001338 <physics_callback+0x260>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
		acceleration_y =  sin_grav[((angle_y > 90) ? 90 : (angle_y < -90) ? -90 : angle_y) + 90] * (float) GRAVITY / 100.0;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <physics_callback+0x248>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	2b5a      	cmp	r3, #90	; 0x5a
 8001276:	dc0a      	bgt.n	800128e <physics_callback+0x1b6>
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <physics_callback+0x248>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001282:	4293      	cmp	r3, r2
 8001284:	bfb8      	it	lt
 8001286:	4613      	movlt	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	335a      	adds	r3, #90	; 0x5a
 800128c:	e000      	b.n	8001290 <physics_callback+0x1b8>
 800128e:	23b4      	movs	r3, #180	; 0xb4
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <physics_callback+0x254>)
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001330 <physics_callback+0x258>
 800129e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001334 <physics_callback+0x25c>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <physics_callback+0x264>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
		velocity_x += acceleration_x * update_freq;
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <physics_callback+0x260>)
 80012b2:	ed93 7a00 	vldr	s14, [r3]
 80012b6:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 80012ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <physics_callback+0x268>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <physics_callback+0x268>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
		velocity_y += acceleration_y * update_freq;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <physics_callback+0x264>)
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 80012d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <physics_callback+0x26c>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <physics_callback+0x26c>)
 80012e8:	edc3 7a00 	vstr	s15, [r3]

		if(!disruptor) {
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <physics_callback+0x270>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 81e0 	bne.w	80016b6 <physics_callback+0x5de>
			for(int i = 0; i < wall_tracker; i++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80012fc:	e1cd      	b.n	800169a <physics_callback+0x5c2>
						//if horizontal wall.
				for(int j = 0; j < 360; j++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8001304:	e1be      	b.n	8001684 <physics_callback+0x5ac>
 8001306:	bf00      	nop
 8001308:	3ca3d70a 	.word	0x3ca3d70a
 800130c:	20002c30 	.word	0x20002c30
 8001310:	20002c24 	.word	0x20002c24
 8001314:	20002c36 	.word	0x20002c36
 8001318:	20002c34 	.word	0x20002c34
 800131c:	20002c38 	.word	0x20002c38
 8001320:	20002c3a 	.word	0x20002c3a
 8001324:	42200000 	.word	0x42200000
 8001328:	447a0000 	.word	0x447a0000
 800132c:	20000000 	.word	0x20000000
 8001330:	460ca000 	.word	0x460ca000
 8001334:	42c80000 	.word	0x42c80000
 8001338:	20002c3c 	.word	0x20002c3c
 800133c:	20002c40 	.word	0x20002c40
 8001340:	20002c44 	.word	0x20002c44
 8001344:	20002c48 	.word	0x20002c48
 8001348:	200039b4 	.word	0x200039b4
					if ((wall_list[i].start_coord[0] == wall_list[i].end_coord[0] && ball_dimensions[0][j] == wall_list[i].start_coord[0] &&
 800134c:	4abc      	ldr	r2, [pc, #752]	; (8001640 <physics_callback+0x568>)
 800134e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	49b9      	ldr	r1, [pc, #740]	; (8001640 <physics_callback+0x568>)
 800135a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	3308      	adds	r3, #8
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d161      	bne.n	800142e <physics_callback+0x356>
 800136a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800136e:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8001372:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001376:	4413      	add	r3, r2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4ab0      	ldr	r2, [pc, #704]	; (8001640 <physics_callback+0x568>)
 800137e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4299      	cmp	r1, r3
 800138a:	d150      	bne.n	800142e <physics_callback+0x356>
								 ((ball_dimensions[1][j] >= wall_list[i].start_coord[1] && ball_dimensions[1][j] <= wall_list[i].end_coord[1]) ||
 800138c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001390:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8001394:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001398:	4413      	add	r3, r2
 800139a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4aa7      	ldr	r2, [pc, #668]	; (8001640 <physics_callback+0x568>)
 80013a4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4413      	add	r3, r2
 80013ac:	3304      	adds	r3, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
					if ((wall_list[i].start_coord[0] == wall_list[i].end_coord[0] && ball_dimensions[0][j] == wall_list[i].start_coord[0] &&
 80013b0:	4299      	cmp	r1, r3
 80013b2:	db14      	blt.n	80013de <physics_callback+0x306>
								 ((ball_dimensions[1][j] >= wall_list[i].start_coord[1] && ball_dimensions[1][j] <= wall_list[i].end_coord[1]) ||
 80013b4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80013b8:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80013bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4a9d      	ldr	r2, [pc, #628]	; (8001640 <physics_callback+0x568>)
 80013cc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	330c      	adds	r3, #12
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4299      	cmp	r1, r3
 80013da:	f340 8096 	ble.w	800150a <physics_callback+0x432>
								  (ball_dimensions[1][j] >= wall_list[i].end_coord[1] && ball_dimensions[1][j] <= wall_list[i].start_coord[1]))) ||
 80013de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80013e2:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80013e6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4a92      	ldr	r2, [pc, #584]	; (8001640 <physics_callback+0x568>)
 80013f6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	330c      	adds	r3, #12
 8001400:	681b      	ldr	r3, [r3, #0]
								 ((ball_dimensions[1][j] >= wall_list[i].start_coord[1] && ball_dimensions[1][j] <= wall_list[i].end_coord[1]) ||
 8001402:	4299      	cmp	r1, r3
 8001404:	db13      	blt.n	800142e <physics_callback+0x356>
								  (ball_dimensions[1][j] >= wall_list[i].end_coord[1] && ball_dimensions[1][j] <= wall_list[i].start_coord[1]))) ||
 8001406:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800140a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800140e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001412:	4413      	add	r3, r2
 8001414:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	4a88      	ldr	r2, [pc, #544]	; (8001640 <physics_callback+0x568>)
 800141e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4299      	cmp	r1, r3
 800142c:	dd6d      	ble.n	800150a <physics_callback+0x432>
								(wall_list[i].start_coord[1] == wall_list[i].end_coord[1] && ball_dimensions[1][j] == wall_list[i].start_coord[1] &&
 800142e:	4a84      	ldr	r2, [pc, #528]	; (8001640 <physics_callback+0x568>)
 8001430:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	3304      	adds	r3, #4
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4980      	ldr	r1, [pc, #512]	; (8001640 <physics_callback+0x568>)
 800143e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	681b      	ldr	r3, [r3, #0]
								  (ball_dimensions[1][j] >= wall_list[i].end_coord[1] && ball_dimensions[1][j] <= wall_list[i].start_coord[1]))) ||
 800144a:	429a      	cmp	r2, r3
 800144c:	f040 8115 	bne.w	800167a <physics_callback+0x5a2>
								(wall_list[i].start_coord[1] == wall_list[i].end_coord[1] && ball_dimensions[1][j] == wall_list[i].start_coord[1] &&
 8001450:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001454:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8001458:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800145c:	4413      	add	r3, r2
 800145e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4a76      	ldr	r2, [pc, #472]	; (8001640 <physics_callback+0x568>)
 8001468:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4299      	cmp	r1, r3
 8001476:	f040 8100 	bne.w	800167a <physics_callback+0x5a2>
								 ((ball_dimensions[0][j] >= wall_list[i].start_coord[0] && ball_dimensions[0][j] <= wall_list[i].end_coord[0]) ||
 800147a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800147e:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8001482:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	4a6c      	ldr	r2, [pc, #432]	; (8001640 <physics_callback+0x568>)
 800148e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
								(wall_list[i].start_coord[1] == wall_list[i].end_coord[1] && ball_dimensions[1][j] == wall_list[i].start_coord[1] &&
 8001498:	4299      	cmp	r1, r3
 800149a:	db11      	blt.n	80014c0 <physics_callback+0x3e8>
								 ((ball_dimensions[0][j] >= wall_list[i].start_coord[0] && ball_dimensions[0][j] <= wall_list[i].end_coord[0]) ||
 800149c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014a0:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80014a4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4a64      	ldr	r2, [pc, #400]	; (8001640 <physics_callback+0x568>)
 80014b0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	3308      	adds	r3, #8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4299      	cmp	r1, r3
 80014be:	dd24      	ble.n	800150a <physics_callback+0x432>
								  (ball_dimensions[0][j] >= wall_list[i].end_coord[0] && ball_dimensions[0][j] <= wall_list[i].start_coord[0])))) {
 80014c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014c4:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80014c8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <physics_callback+0x568>)
 80014d4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	3308      	adds	r3, #8
 80014de:	681b      	ldr	r3, [r3, #0]
								 ((ball_dimensions[0][j] >= wall_list[i].start_coord[0] && ball_dimensions[0][j] <= wall_list[i].end_coord[0]) ||
 80014e0:	4299      	cmp	r1, r3
 80014e2:	f2c0 80ca 	blt.w	800167a <physics_callback+0x5a2>
								  (ball_dimensions[0][j] >= wall_list[i].end_coord[0] && ball_dimensions[0][j] <= wall_list[i].start_coord[0])))) {
 80014e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014ea:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80014ee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <physics_callback+0x568>)
 80014fa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4299      	cmp	r1, r3
 8001506:	f300 80b8 	bgt.w	800167a <physics_callback+0x5a2>

							// if horizontal line
						if(wall_list[i].start_coord[0] == wall_list[i].end_coord[0]) {
 800150a:	4a4d      	ldr	r2, [pc, #308]	; (8001640 <physics_callback+0x568>)
 800150c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	494a      	ldr	r1, [pc, #296]	; (8001640 <physics_callback+0x568>)
 8001518:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d144      	bne.n	80015b2 <physics_callback+0x4da>
							velocity_y = -velocity_y * (0.5);
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <physics_callback+0x56c>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eef1 7a67 	vneg.f32	s15, s15
 8001532:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <physics_callback+0x56c>)
 800153c:	edc3 7a00 	vstr	s15, [r3]
							if(position_x < wall_list[i].start_coord[0]) position_x -= .1;
 8001540:	4a3f      	ldr	r2, [pc, #252]	; (8001640 <physics_callback+0x568>)
 8001542:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <physics_callback+0x570>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	dd13      	ble.n	800158c <physics_callback+0x4b4>
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <physics_callback+0x570>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f845 	bl	80005f8 <__aeabi_f2d>
 800156e:	a332      	add	r3, pc, #200	; (adr r3, 8001638 <physics_callback+0x560>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe fee0 	bl	8000338 <__aeabi_dsub>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fac4 	bl	8000b0c <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <physics_callback+0x570>)
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e012      	b.n	80015b2 <physics_callback+0x4da>
							else position_x += .1;
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <physics_callback+0x570>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f831 	bl	80005f8 <__aeabi_f2d>
 8001596:	a328      	add	r3, pc, #160	; (adr r3, 8001638 <physics_callback+0x560>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe fece 	bl	800033c <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fab0 	bl	8000b0c <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a26      	ldr	r2, [pc, #152]	; (8001648 <physics_callback+0x570>)
 80015b0:	6013      	str	r3, [r2, #0]
						}
						//if vertical line
						if(wall_list[i].start_coord[1] == wall_list[i].end_coord[1]) {
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <physics_callback+0x568>)
 80015b4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	491f      	ldr	r1, [pc, #124]	; (8001640 <physics_callback+0x568>)
 80015c2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	440b      	add	r3, r1
 80015ca:	330c      	adds	r3, #12
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d153      	bne.n	800167a <physics_callback+0x5a2>
							velocity_x = -velocity_x * (0.5);
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <physics_callback+0x574>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eef1 7a67 	vneg.f32	s15, s15
 80015dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <physics_callback+0x574>)
 80015e6:	edc3 7a00 	vstr	s15, [r3]
							if(position_y < wall_list[i].start_coord[1]) position_y -= .1;
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <physics_callback+0x568>)
 80015ec:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	3304      	adds	r3, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <physics_callback+0x578>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	dd21      	ble.n	8001654 <physics_callback+0x57c>
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <physics_callback+0x578>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffef 	bl	80005f8 <__aeabi_f2d>
 800161a:	a307      	add	r3, pc, #28	; (adr r3, 8001638 <physics_callback+0x560>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe fe8a 	bl	8000338 <__aeabi_dsub>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fa6e 	bl	8000b0c <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <physics_callback+0x578>)
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e020      	b.n	800167a <physics_callback+0x5a2>
 8001638:	9999999a 	.word	0x9999999a
 800163c:	3fb99999 	.word	0x3fb99999
 8001640:	20002c4c 	.word	0x20002c4c
 8001644:	20002c48 	.word	0x20002c48
 8001648:	200002d4 	.word	0x200002d4
 800164c:	20002c44 	.word	0x20002c44
 8001650:	200002d8 	.word	0x200002d8
							else position_y += .1;
 8001654:	4b9a      	ldr	r3, [pc, #616]	; (80018c0 <physics_callback+0x7e8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ffcd 	bl	80005f8 <__aeabi_f2d>
 800165e:	a396      	add	r3, pc, #600	; (adr r3, 80018b8 <physics_callback+0x7e0>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fe6a 	bl	800033c <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff fa4c 	bl	8000b0c <__aeabi_d2f>
 8001674:	4603      	mov	r3, r0
 8001676:	4a92      	ldr	r2, [pc, #584]	; (80018c0 <physics_callback+0x7e8>)
 8001678:	6013      	str	r3, [r2, #0]
				for(int j = 0; j < 360; j++) {
 800167a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800167e:	3301      	adds	r3, #1
 8001680:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8001684:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001688:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800168c:	f6ff ae5e 	blt.w	800134c <physics_callback+0x274>
			for(int i = 0; i < wall_tracker; i++) {
 8001690:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001694:	3301      	adds	r3, #1
 8001696:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800169a:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <physics_callback+0x7ec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80016a2:	429a      	cmp	r2, r3
 80016a4:	f6ff ae2b 	blt.w	80012fe <physics_callback+0x226>
						}
					}
				}
			}
			if(in_hole()) lose_game();
 80016a8:	f000 fc7c 	bl	8001fa4 <in_hole>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <physics_callback+0x5de>
 80016b2:	f000 fb35 	bl	8001d20 <lose_game>
		}
		position_x += velocity_y * update_freq;
 80016b6:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <physics_callback+0x7f0>)
 80016b8:	ed93 7a00 	vldr	s14, [r3]
 80016bc:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <physics_callback+0x7f4>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <physics_callback+0x7f4>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
		position_y += velocity_x * update_freq;
 80016d4:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <physics_callback+0x7f8>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 80016de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <physics_callback+0x7e8>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <physics_callback+0x7e8>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
		if(position_y <= 0 + (DRONE_DIAMETER / 2 + 1)) {
			velocity_x = 0;
			position_y = 0 + (DRONE_DIAMETER / 2 + 1);
		}
#else
		if(position_x >= (239 - (DRONE_DIAMETER / 2 + 1))) {
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <physics_callback+0x7f4>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80018d4 <physics_callback+0x7fc>
 80016fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	db01      	blt.n	800170a <physics_callback+0x632>
					lose_game();
 8001706:	f000 fb0b 	bl	8001d20 <lose_game>
				}
				if(position_x <= 0 + (DRONE_DIAMETER / 2 + 1)) {
 800170a:	4b70      	ldr	r3, [pc, #448]	; (80018cc <physics_callback+0x7f4>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d801      	bhi.n	8001722 <physics_callback+0x64a>
					lose_game();
 800171e:	f000 faff 	bl	8001d20 <lose_game>
				}
				if(position_y >= (319 - (DRONE_DIAMETER / 2 + 1))) {
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <physics_callback+0x7e8>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80018d8 <physics_callback+0x800>
 800172c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	db01      	blt.n	800173a <physics_callback+0x662>
					lose_game();
 8001736:	f000 faf3 	bl	8001d20 <lose_game>
				}
				if(position_y <= 0 + (DRONE_DIAMETER / 2 + 1)) {
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <physics_callback+0x7e8>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	d801      	bhi.n	8001752 <physics_callback+0x67a>
					lose_game();
 800174e:	f000 fae7 	bl	8001d20 <lose_game>
			}
#endif
		//update the ball dimensions
		for(int i = 0; i < 360; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8001758:	e06c      	b.n	8001834 <physics_callback+0x75c>
			ball_dimensions[0][i] = (uint8_t) (position_x + sin_ball[i] * (float) DRONE_DIAMETER / 2.0);
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <physics_callback+0x7f4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff4a 	bl	80005f8 <__aeabi_f2d>
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
 8001768:	4a5c      	ldr	r2, [pc, #368]	; (80018dc <physics_callback+0x804>)
 800176a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800177a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177e:	ee17 0a90 	vmov	r0, s15
 8001782:	f7fe ff39 	bl	80005f8 <__aeabi_f2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178e:	f7ff f8b5 	bl	80008fc <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7fe fdcf 	bl	800033c <__adddf3>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff f991 	bl	8000acc <__aeabi_d2uiz>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b2d9      	uxtb	r1, r3
 80017ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80017b2:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80017b6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80017ba:	4413      	add	r3, r2
 80017bc:	460a      	mov	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
			ball_dimensions[1][i] = (uint8_t) (position_y + cos_ball[i] * (float) DRONE_DIAMETER / 2.0);
 80017c0:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <physics_callback+0x7e8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe ff17 	bl	80005f8 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4a44      	ldr	r2, [pc, #272]	; (80018e0 <physics_callback+0x808>)
 80017d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e4:	ee17 0a90 	vmov	r0, s15
 80017e8:	f7fe ff06 	bl	80005f8 <__aeabi_f2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f4:	f7ff f882 	bl	80008fc <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe fd9c 	bl	800033c <__adddf3>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f95e 	bl	8000acc <__aeabi_d2uiz>
 8001810:	4603      	mov	r3, r0
 8001812:	b2d9      	uxtb	r1, r3
 8001814:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001818:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800181c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001820:	4413      	add	r3, r2
 8001822:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001826:	460a      	mov	r2, r1
 8001828:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 360; i++) {
 800182a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800182e:	3301      	adds	r3, #1
 8001830:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8001834:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001838:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800183c:	db8d      	blt.n	800175a <physics_callback+0x682>
			//LCD_Draw_Pixel(ball_dimensions[0][i], ball_dimensions[1][i], LCD_COLOR_RED);
		}

		if(in_waypoint()) {
 800183e:	f000 fb2b 	bl	8001e98 <in_waypoint>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d014      	beq.n	8001872 <physics_callback+0x79a>
			waypoint_tracker++;
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <physics_callback+0x80c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <physics_callback+0x80c>)
 8001852:	701a      	strb	r2, [r3, #0]
#if (WAYPOINT_REUSE)
			osMutexAcquire(game_time_mut, osWaitForever);
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <physics_callback+0x810>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800185c:	4618      	mov	r0, r3
 800185e:	f006 f8f9 	bl	8007a54 <osMutexAcquire>
			game_time = TIME_TO_COMPLETE;
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <physics_callback+0x814>)
 8001864:	2278      	movs	r2, #120	; 0x78
 8001866:	801a      	strh	r2, [r3, #0]
			osMutexRelease(game_time_mut);
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <physics_callback+0x810>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f006 f93c 	bl	8007aea <osMutexRelease>
#endif
		}
#if (!WAYPOINT_REUSE)
		if(waypoint_tracker == NUM_WAYPOINTS) win_game();
#else
		for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8001878:	e016      	b.n	80018a8 <physics_callback+0x7d0>
			if(!waypoint_list[i].complete) break;
 800187a:	491d      	ldr	r1, [pc, #116]	; (80018f0 <physics_callback+0x818>)
 800187c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	440b      	add	r3, r1
 800188a:	3304      	adds	r3, #4
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00f      	beq.n	80018b2 <physics_callback+0x7da>
			if(i == NUM_WAYPOINTS - 1) win_game();
 8001892:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001896:	2b03      	cmp	r3, #3
 8001898:	d101      	bne.n	800189e <physics_callback+0x7c6>
 800189a:	f000 fabb 	bl	8001e14 <win_game>
		for(int i = 0; i < NUM_WAYPOINTS; i++) {
 800189e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80018a2:	3301      	adds	r3, #1
 80018a4:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 80018a8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	dde4      	ble.n	800187a <physics_callback+0x7a2>
 80018b0:	e41e      	b.n	80010f0 <physics_callback+0x18>
			if(!waypoint_list[i].complete) break;
 80018b2:	bf00      	nop
		osEventFlagsWait(gyro_flag, 1, osFlagsWaitAny, osWaitForever);
 80018b4:	e41c      	b.n	80010f0 <physics_callback+0x18>
 80018b6:	bf00      	nop
 80018b8:	9999999a 	.word	0x9999999a
 80018bc:	3fb99999 	.word	0x3fb99999
 80018c0:	200002d8 	.word	0x200002d8
 80018c4:	200039b0 	.word	0x200039b0
 80018c8:	20002c48 	.word	0x20002c48
 80018cc:	200002d4 	.word	0x200002d4
 80018d0:	20002c44 	.word	0x20002c44
 80018d4:	43690000 	.word	0x43690000
 80018d8:	439c8000 	.word	0x439c8000
 80018dc:	0800e408 	.word	0x0800e408
 80018e0:	0800e9a8 	.word	0x0800e9a8
 80018e4:	200002de 	.word	0x200002de
 80018e8:	20002c28 	.word	0x20002c28
 80018ec:	200002dc 	.word	0x200002dc
 80018f0:	200038cc 	.word	0x200038cc

080018f4 <game_time_callback>:
	}
}



void game_time_callback(void* argument) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	while(1) {
		osMutexAcquire(game_time_mut, osWaitForever);
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <game_time_callback+0x44>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	4618      	mov	r0, r3
 8001906:	f006 f8a5 	bl	8007a54 <osMutexAcquire>
		game_time -= 1;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <game_time_callback+0x48>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <game_time_callback+0x48>)
 8001914:	801a      	strh	r2, [r3, #0]
		osMutexRelease(game_time_mut);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <game_time_callback+0x44>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f006 f8e5 	bl	8007aea <osMutexRelease>

		if(game_time <= 0) lose_game();
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <game_time_callback+0x48>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <game_time_callback+0x38>
 8001928:	f000 f9fa 	bl	8001d20 <lose_game>
		osDelay(1000);
 800192c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001930:	f005 fe45 	bl	80075be <osDelay>
		osMutexAcquire(game_time_mut, osWaitForever);
 8001934:	e7e2      	b.n	80018fc <game_time_callback+0x8>
 8001936:	bf00      	nop
 8001938:	20002c28 	.word	0x20002c28
 800193c:	200002dc 	.word	0x200002dc

08001940 <lcd_led_callback>:
	}
}

void lcd_led_callback(void* argument) {
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

	while(1) {
		LCD_Clear(0,LCD_COLOR_BACKGROUND);
 8001948:	f649 2182 	movw	r1, #39554	; 0x9a82
 800194c:	2000      	movs	r0, #0
 800194e:	f001 f92b 	bl	8002ba8 <LCD_Clear>

		for(int i = 0; i < wall_tracker; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e05d      	b.n	8001a14 <lcd_led_callback+0xd4>
			if(wall_list[i].start_coord[0] == wall_list[i].end_coord[0]) {
 8001958:	4a75      	ldr	r2, [pc, #468]	; (8001b30 <lcd_led_callback+0x1f0>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4973      	ldr	r1, [pc, #460]	; (8001b30 <lcd_led_callback+0x1f0>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d120      	bne.n	80019b4 <lcd_led_callback+0x74>
				LCD_Draw_Horizontal_Line(wall_list[i].start_coord[0], wall_list[i].start_coord[1], wall_list[i].end_coord[1] - wall_list[i].start_coord[1], LCD_COLOR_BLACK);
 8001972:	4a6f      	ldr	r2, [pc, #444]	; (8001b30 <lcd_led_callback+0x1f0>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b298      	uxth	r0, r3
 800197e:	4a6c      	ldr	r2, [pc, #432]	; (8001b30 <lcd_led_callback+0x1f0>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b299      	uxth	r1, r3
 800198c:	4a68      	ldr	r2, [pc, #416]	; (8001b30 <lcd_led_callback+0x1f0>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	330c      	adds	r3, #12
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	4c65      	ldr	r4, [pc, #404]	; (8001b30 <lcd_led_callback+0x1f0>)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4423      	add	r3, r4
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	f001 f8ac 	bl	8002b0a <LCD_Draw_Horizontal_Line>
 80019b2:	e02c      	b.n	8001a0e <lcd_led_callback+0xce>
			}
			else if (wall_list[i].start_coord[1] == wall_list[i].end_coord[1]){
 80019b4:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <lcd_led_callback+0x1f0>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	3304      	adds	r3, #4
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	495b      	ldr	r1, [pc, #364]	; (8001b30 <lcd_led_callback+0x1f0>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	440b      	add	r3, r1
 80019c8:	330c      	adds	r3, #12
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d11e      	bne.n	8001a0e <lcd_led_callback+0xce>
				LCD_Draw_Vertical_Line(wall_list[i].start_coord[0], wall_list[i].start_coord[1], wall_list[i].end_coord[0] - wall_list[i].start_coord[0], LCD_COLOR_BLACK);
 80019d0:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <lcd_led_callback+0x1f0>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b298      	uxth	r0, r3
 80019dc:	4a54      	ldr	r2, [pc, #336]	; (8001b30 <lcd_led_callback+0x1f0>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	3304      	adds	r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b299      	uxth	r1, r3
 80019ea:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <lcd_led_callback+0x1f0>)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	3308      	adds	r3, #8
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4c4d      	ldr	r4, [pc, #308]	; (8001b30 <lcd_led_callback+0x1f0>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4423      	add	r3, r4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f001 f8a5 	bl	8002b58 <LCD_Draw_Vertical_Line>
		for(int i = 0; i < wall_tracker; i++) {
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <lcd_led_callback+0x1f4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	db9c      	blt.n	8001958 <lcd_led_callback+0x18>

			}
		}
		for(int i = 0; i < hole_tracker; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e010      	b.n	8001a46 <lcd_led_callback+0x106>
			LCD_Draw_Circle_Fill((uint16_t)hole_list[i].x, (uint16_t)hole_list[i].y, CELL_SIZE / 2, LCD_COLOR_MAGENTA);
 8001a24:	4a44      	ldr	r2, [pc, #272]	; (8001b38 <lcd_led_callback+0x1f8>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8001a2c:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <lcd_led_callback+0x1f8>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	8859      	ldrh	r1, [r3, #2]
 8001a36:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	f001 f812 	bl	8002a64 <LCD_Draw_Circle_Fill>
		for(int i = 0; i < hole_tracker; i++) {
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	3301      	adds	r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <lcd_led_callback+0x1fc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbe9      	blt.n	8001a24 <lcd_led_callback+0xe4>
				LCD_Draw_Circle_Fill((uint16_t)waypoint_list[i].x, (uint16_t)waypoint_list[i].y, CELL_SIZE / 2, LCD_COLOR_RED);
			}
		}

#else
		for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e03a      	b.n	8001acc <lcd_led_callback+0x18c>
			if(waypoint_list[i].complete) {
 8001a56:	493a      	ldr	r1, [pc, #232]	; (8001b40 <lcd_led_callback+0x200>)
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	440b      	add	r3, r1
 8001a64:	3304      	adds	r3, #4
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d016      	beq.n	8001a9a <lcd_led_callback+0x15a>
				LCD_Draw_Circle_Fill((uint16_t)waypoint_list[i].x, (uint16_t)waypoint_list[i].y, CELL_SIZE / 2, LCD_COLOR_GREEN);
 8001a6c:	4934      	ldr	r1, [pc, #208]	; (8001b40 <lcd_led_callback+0x200>)
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	440b      	add	r3, r1
 8001a7a:	8818      	ldrh	r0, [r3, #0]
 8001a7c:	4930      	ldr	r1, [pc, #192]	; (8001b40 <lcd_led_callback+0x200>)
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	8819      	ldrh	r1, [r3, #0]
 8001a8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a92:	220a      	movs	r2, #10
 8001a94:	f000 ffe6 	bl	8002a64 <LCD_Draw_Circle_Fill>
 8001a98:	e015      	b.n	8001ac6 <lcd_led_callback+0x186>
			}
			else {
				LCD_Draw_Circle_Fill((uint16_t)waypoint_list[i].x, (uint16_t)waypoint_list[i].y, CELL_SIZE / 2, LCD_COLOR_RED);
 8001a9a:	4929      	ldr	r1, [pc, #164]	; (8001b40 <lcd_led_callback+0x200>)
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	440b      	add	r3, r1
 8001aa8:	8818      	ldrh	r0, [r3, #0]
 8001aaa:	4925      	ldr	r1, [pc, #148]	; (8001b40 <lcd_led_callback+0x200>)
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3302      	adds	r3, #2
 8001aba:	8819      	ldrh	r1, [r3, #0]
 8001abc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	f000 ffcf 	bl	8002a64 <LCD_Draw_Circle_Fill>
		for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	ddc1      	ble.n	8001a56 <lcd_led_callback+0x116>
			}
		}
#endif

		LCD_Draw_Circle_Fill((uint16_t)position_x, (uint16_t)position_y, DRONE_DIAMETER / 2, LCD_COLOR_BLUE);
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <lcd_led_callback+0x204>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	ee17 3a90 	vmov	r3, s15
 8001ae0:	b298      	uxth	r0, r3
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <lcd_led_callback+0x208>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aec:	ee17 3a90 	vmov	r3, s15
 8001af0:	b299      	uxth	r1, r3
 8001af2:	231f      	movs	r3, #31
 8001af4:	2205      	movs	r2, #5
 8001af6:	f000 ffb5 	bl	8002a64 <LCD_Draw_Circle_Fill>

		draw_tilt_indication();
 8001afa:	f000 faa3 	bl	8002044 <draw_tilt_indication>
		//draw the game time at the bottom.
		LCD_SetTextColor(LCD_COLOR_BLACK);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 ff90 	bl	8002a24 <LCD_SetTextColor>
		LCD_SetFont(&Font16x24);
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <lcd_led_callback+0x20c>)
 8001b06:	f000 ff9d 	bl	8002a44 <LCD_SetFont>
		LCD_DisplayString(1,295,"Time: ");
 8001b0a:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <lcd_led_callback+0x210>)
 8001b0c:	f240 1127 	movw	r1, #295	; 0x127
 8001b10:	2001      	movs	r0, #1
 8001b12:	f000 fecb 	bl	80028ac <LCD_DisplayString>
		LCD_DisplayNumber(76, 295, game_time);
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <lcd_led_callback+0x214>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f240 1127 	movw	r1, #295	; 0x127
 8001b20:	204c      	movs	r0, #76	; 0x4c
 8001b22:	f000 feeb 	bl	80028fc <LCD_DisplayNumber>
		osDelay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f005 fd49 	bl	80075be <osDelay>
		LCD_Clear(0,LCD_COLOR_BACKGROUND);
 8001b2c:	e70c      	b.n	8001948 <lcd_led_callback+0x8>
 8001b2e:	bf00      	nop
 8001b30:	20002c4c 	.word	0x20002c4c
 8001b34:	200039b0 	.word	0x200039b0
 8001b38:	200038e4 	.word	0x200038e4
 8001b3c:	200039ac 	.word	0x200039ac
 8001b40:	200038cc 	.word	0x200038cc
 8001b44:	200002d4 	.word	0x200002d4
 8001b48:	200002d8 	.word	0x200002d8
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	0800e308 	.word	0x0800e308
 8001b54:	200002dc 	.word	0x200002dc

08001b58 <disruptor_callback>:
	}
}

void disruptor_callback(void* argument) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	while(1) {
		if(disruptor) {
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <disruptor_callback+0x48>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00c      	beq.n	8001b82 <disruptor_callback+0x2a>
			if(current_energy >= 0) current_energy -= DRAIN_RATE / 10;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <disruptor_callback+0x4c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b70:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <disruptor_callback+0x4c>)
 8001b72:	6013      	str	r3, [r2, #0]
			osEventFlagsSet(disruptor_flag, 1);
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <disruptor_callback+0x50>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 fe3a 	bl	80077f4 <osEventFlagsSet>
 8001b80:	e00a      	b.n	8001b98 <disruptor_callback+0x40>
		}
		else {
			if (current_energy <= MAX_ENERGY) current_energy += RECHARGE_RATE / 10;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <disruptor_callback+0x4c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d804      	bhi.n	8001b98 <disruptor_callback+0x40>
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <disruptor_callback+0x4c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3364      	adds	r3, #100	; 0x64
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <disruptor_callback+0x4c>)
 8001b96:	6013      	str	r3, [r2, #0]
		}

//		osTimerStart(disruptor_timer, 1000);

		osDelay(100);
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f005 fd10 	bl	80075be <osDelay>
		if(disruptor) {
 8001b9e:	e7df      	b.n	8001b60 <disruptor_callback+0x8>
 8001ba0:	200039b4 	.word	0x200039b4
 8001ba4:	200002e0 	.word	0x200002e0
 8001ba8:	20002c2c 	.word	0x20002c2c

08001bac <disruptor_timer_callback>:
	}
}

void disruptor_timer_callback(void* argument) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	while(1) {
		osEventFlagsWait(disruptor_flag, 1, osFlagsWaitAny, osWaitForever);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <disruptor_timer_callback+0x48>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	f005 fe5c 	bl	800787c <osEventFlagsWait>
		if(disruptor) osDelay(1000);
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <disruptor_timer_callback+0x4c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <disruptor_timer_callback+0x2a>
 8001bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd0:	f005 fcf5 	bl	80075be <osDelay>
 8001bd4:	e002      	b.n	8001bdc <disruptor_timer_callback+0x30>
		else osDelay(50);
 8001bd6:	2032      	movs	r0, #50	; 0x32
 8001bd8:	f005 fcf1 	bl	80075be <osDelay>

		if(disruptor) {
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <disruptor_timer_callback+0x4c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0e7      	beq.n	8001bb4 <disruptor_timer_callback+0x8>
			disruptor = 0;
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <disruptor_timer_callback+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
			pressed = 1;
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <disruptor_timer_callback+0x50>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
		osEventFlagsWait(disruptor_flag, 1, osFlagsWaitAny, osWaitForever);
 8001bf0:	e7e0      	b.n	8001bb4 <disruptor_timer_callback+0x8>
 8001bf2:	bf00      	nop
 8001bf4:	20002c2c 	.word	0x20002c2c
 8001bf8:	200039b4 	.word	0x200039b4
 8001bfc:	200039b5 	.word	0x200039b5

08001c00 <monitor_callback>:
		}
	}
}

void monitor_callback(void* argument) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	while(1) {

		//HAL_GPIO_TogglePin(GREENLED_PORT, GREENLED_PIN);
		float period =  1000 * ((float)current_energy - (float)MIN_ACTIVATION_ENERGY) / (float)RECHARGE_RATE;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <monitor_callback+0x78>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001c7c <monitor_callback+0x7c>
 8001c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001c80 <monitor_callback+0x80>
 8001c20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c24:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001c80 <monitor_callback+0x80>
 8001c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2c:	edc7 7a03 	vstr	s15, [r7, #12]

				if(current_energy < MIN_ACTIVATION_ENERGY) {
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <monitor_callback+0x78>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f241 726f 	movw	r2, #5999	; 0x176f
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d808      	bhi.n	8001c4e <monitor_callback+0x4e>
					HAL_GPIO_WritePin(GREENLED_PORT, GREENLED_PIN, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c42:	4810      	ldr	r0, [pc, #64]	; (8001c84 <monitor_callback+0x84>)
 8001c44:	f003 f978 	bl	8004f38 <HAL_GPIO_WritePin>

					period = 500;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <monitor_callback+0x88>)
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e004      	b.n	8001c58 <monitor_callback+0x58>
				}
				//HAL_GPIO_TogglePin(GREENLED_PORT, GREENLED_PIN);
				else {
					HAL_GPIO_TogglePin(GREENLED_PORT, GREENLED_PIN);
 8001c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <monitor_callback+0x84>)
 8001c54:	f003 f989 	bl	8004f6a <HAL_GPIO_TogglePin>

				}

				osDelay((int)period / 10);
 8001c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c60:	ee17 1a90 	vmov	r1, s15
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <monitor_callback+0x8c>)
 8001c66:	fb83 2301 	smull	r2, r3, r3, r1
 8001c6a:	109a      	asrs	r2, r3, #2
 8001c6c:	17cb      	asrs	r3, r1, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 fca4 	bl	80075be <osDelay>
	while(1) {
 8001c76:	e7c7      	b.n	8001c08 <monitor_callback+0x8>
 8001c78:	200002e0 	.word	0x200002e0
 8001c7c:	45bb8000 	.word	0x45bb8000
 8001c80:	447a0000 	.word	0x447a0000
 8001c84:	40021800 	.word	0x40021800
 8001c88:	43fa0000 	.word	0x43fa0000
 8001c8c:	66666667 	.word	0x66666667

08001c90 <monitor2_callback>:
	}
}

void monitor2_callback(void* argument) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	while(1) {

		float period =  1000 * ((float)MIN_ACTIVATION_ENERGY - (float)current_energy) / (float)RECHARGE_RATE;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <monitor2_callback+0x78>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001d0c <monitor2_callback+0x7c>
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d10 <monitor2_callback+0x80>
 8001cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001d10 <monitor2_callback+0x80>
 8001cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbc:	edc7 7a03 	vstr	s15, [r7, #12]

		if(current_energy > MIN_ACTIVATION_ENERGY) {
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <monitor2_callback+0x78>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f241 7270 	movw	r2, #6000	; 0x1770
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d908      	bls.n	8001cde <monitor2_callback+0x4e>
			HAL_GPIO_WritePin(REDLED_PORT, REDLED_PIN, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd2:	4810      	ldr	r0, [pc, #64]	; (8001d14 <monitor2_callback+0x84>)
 8001cd4:	f003 f930 	bl	8004f38 <HAL_GPIO_WritePin>

			period = 500;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <monitor2_callback+0x88>)
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e004      	b.n	8001ce8 <monitor2_callback+0x58>
		}
		//HAL_GPIO_TogglePin(GREENLED_PORT, GREENLED_PIN);
		else {
			HAL_GPIO_TogglePin(REDLED_PORT, REDLED_PIN);
 8001cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <monitor2_callback+0x84>)
 8001ce4:	f003 f941 	bl	8004f6a <HAL_GPIO_TogglePin>

		}

		osDelay((int)period / 10);
 8001ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf0:	ee17 1a90 	vmov	r1, s15
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <monitor2_callback+0x8c>)
 8001cf6:	fb83 2301 	smull	r2, r3, r3, r1
 8001cfa:	109a      	asrs	r2, r3, #2
 8001cfc:	17cb      	asrs	r3, r1, #31
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 fc5c 	bl	80075be <osDelay>
	while(1) {
 8001d06:	e7c7      	b.n	8001c98 <monitor2_callback+0x8>
 8001d08:	200002e0 	.word	0x200002e0
 8001d0c:	45bb8000 	.word	0x45bb8000
 8001d10:	447a0000 	.word	0x447a0000
 8001d14:	40021800 	.word	0x40021800
 8001d18:	43fa0000 	.word	0x43fa0000
 8001d1c:	66666667 	.word	0x66666667

08001d20 <lose_game>:
	}
}

void lose_game() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
#if (WAYPOINT_REUSE)
	if(waypoint_reached) {
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <lose_game+0xd0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04a      	beq.n	8001dc4 <lose_game+0xa4>
		uint8_t waypoints_reached = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]
		for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	e010      	b.n	8001d5a <lose_game+0x3a>
			if(waypoint_list[i].complete) waypoints_reached++;
 8001d38:	492e      	ldr	r1, [pc, #184]	; (8001df4 <lose_game+0xd4>)
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	440b      	add	r3, r1
 8001d46:	3304      	adds	r3, #4
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <lose_game+0x34>
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	3301      	adds	r3, #1
 8001d52:	71fb      	strb	r3, [r7, #7]
		for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	ddeb      	ble.n	8001d38 <lose_game+0x18>
		}
		score = score / (waypoints_reached - 1);
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <lose_game+0xd8>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <lose_game+0xd8>)
 8001d72:	701a      	strb	r2, [r3, #0]
		osThreadTerminate(lcd_led_task_id);
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <lose_game+0xdc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fbf3 	bl	8007564 <osThreadTerminate>
		LCD_Clear(0,LCD_COLOR_BACKGROUND);
 8001d7e:	f649 2182 	movw	r1, #39554	; 0x9a82
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 ff10 	bl	8002ba8 <LCD_Clear>
		LCD_SetTextColor(LCD_COLOR_BLACK);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 fe4b 	bl	8002a24 <LCD_SetTextColor>
		LCD_SetFont(&Font16x24);
 8001d8e:	481c      	ldr	r0, [pc, #112]	; (8001e00 <lose_game+0xe0>)
 8001d90:	f000 fe58 	bl	8002a44 <LCD_SetFont>
		LCD_DisplayString(40,120,"You Win :)");
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <lose_game+0xe4>)
 8001d96:	2178      	movs	r1, #120	; 0x78
 8001d98:	2028      	movs	r0, #40	; 0x28
 8001d9a:	f000 fd87 	bl	80028ac <LCD_DisplayString>
		LCD_DisplayString(40, 140, "Score: ");
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <lose_game+0xe8>)
 8001da0:	218c      	movs	r1, #140	; 0x8c
 8001da2:	2028      	movs	r0, #40	; 0x28
 8001da4:	f000 fd82 	bl	80028ac <LCD_DisplayString>
		LCD_DisplayString(20, 20, "(REUSE)");
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <lose_game+0xec>)
 8001daa:	2114      	movs	r1, #20
 8001dac:	2014      	movs	r0, #20
 8001dae:	f000 fd7d 	bl	80028ac <LCD_DisplayString>
		LCD_DisplayNumber(130, 140, score);
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <lose_game+0xd8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	218c      	movs	r1, #140	; 0x8c
 8001dbc:	2082      	movs	r0, #130	; 0x82
 8001dbe:	f000 fd9d 	bl	80028fc <LCD_DisplayNumber>
		while(1);
 8001dc2:	e7fe      	b.n	8001dc2 <lose_game+0xa2>
	}
#endif
	osThreadTerminate(lcd_led_task_id);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <lose_game+0xdc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 fbcb 	bl	8007564 <osThreadTerminate>
	LCD_Clear(0,LCD_COLOR_BACKGROUND);
 8001dce:	f649 2182 	movw	r1, #39554	; 0x9a82
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 fee8 	bl	8002ba8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 fe23 	bl	8002a24 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001dde:	4808      	ldr	r0, [pc, #32]	; (8001e00 <lose_game+0xe0>)
 8001de0:	f000 fe30 	bl	8002a44 <LCD_SetFont>
	LCD_DisplayString(40,120,"You Lose :(");
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <lose_game+0xf0>)
 8001de6:	2178      	movs	r1, #120	; 0x78
 8001de8:	2028      	movs	r0, #40	; 0x28
 8001dea:	f000 fd5f 	bl	80028ac <LCD_DisplayString>
	while(1);
 8001dee:	e7fe      	b.n	8001dee <lose_game+0xce>
 8001df0:	200039b7 	.word	0x200039b7
 8001df4:	200038cc 	.word	0x200038cc
 8001df8:	200039b6 	.word	0x200039b6
 8001dfc:	20000bf4 	.word	0x20000bf4
 8001e00:	200002ec 	.word	0x200002ec
 8001e04:	0800e310 	.word	0x0800e310
 8001e08:	0800e31c 	.word	0x0800e31c
 8001e0c:	0800e324 	.word	0x0800e324
 8001e10:	0800e32c 	.word	0x0800e32c

08001e14 <win_game>:
}

void win_game() {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
#if (WAYPOINT_REUSE)
	score = score / (NUM_WAYPOINTS - 1);
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <win_game+0x68>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <win_game+0x6c>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <win_game+0x68>)
 8001e28:	701a      	strb	r2, [r3, #0]
#else
	score = TIME_TO_COMPLETE - game_time;
#endif
	osThreadTerminate(lcd_led_task_id);
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <win_game+0x70>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 fb98 	bl	8007564 <osThreadTerminate>
	LCD_Clear(0,LCD_COLOR_BACKGROUND);
 8001e34:	f649 2182 	movw	r1, #39554	; 0x9a82
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f000 feb5 	bl	8002ba8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 fdf0 	bl	8002a24 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001e44:	4810      	ldr	r0, [pc, #64]	; (8001e88 <win_game+0x74>)
 8001e46:	f000 fdfd 	bl	8002a44 <LCD_SetFont>
	LCD_DisplayString(40,120,"You Win :)");
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <win_game+0x78>)
 8001e4c:	2178      	movs	r1, #120	; 0x78
 8001e4e:	2028      	movs	r0, #40	; 0x28
 8001e50:	f000 fd2c 	bl	80028ac <LCD_DisplayString>
#if (WAYPOINT_REUSE)
	LCD_DisplayString(40, 140, "Score: ");
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <win_game+0x7c>)
 8001e56:	218c      	movs	r1, #140	; 0x8c
 8001e58:	2028      	movs	r0, #40	; 0x28
 8001e5a:	f000 fd27 	bl	80028ac <LCD_DisplayString>
	LCD_DisplayString(20, 20, "(REUSE)");
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <win_game+0x80>)
 8001e60:	2114      	movs	r1, #20
 8001e62:	2014      	movs	r0, #20
 8001e64:	f000 fd22 	bl	80028ac <LCD_DisplayString>
	LCD_DisplayNumber(130, 140, score);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <win_game+0x68>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	218c      	movs	r1, #140	; 0x8c
 8001e72:	2082      	movs	r0, #130	; 0x82
 8001e74:	f000 fd42 	bl	80028fc <LCD_DisplayNumber>
#else
	LCD_DisplayString(40, 140, "Score: ");
	LCD_DisplayNumber(130, 140, score);
#endif
	while(1);
 8001e78:	e7fe      	b.n	8001e78 <win_game+0x64>
 8001e7a:	bf00      	nop
 8001e7c:	200039b6 	.word	0x200039b6
 8001e80:	aaaaaaab 	.word	0xaaaaaaab
 8001e84:	20000bf4 	.word	0x20000bf4
 8001e88:	200002ec 	.word	0x200002ec
 8001e8c:	0800e310 	.word	0x0800e310
 8001e90:	0800e31c 	.word	0x0800e31c
 8001e94:	0800e324 	.word	0x0800e324

08001e98 <in_waypoint>:
}

uint8_t in_waypoint() {
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
	int16_t distance_y = (int)position_y - waypoint_list[waypoint_tracker].y;
	int16_t distance_squared = distance_x * distance_x + distance_y * distance_y;
	if(distance_squared < (CELL_SIZE / 2)*(CELL_SIZE / 2)) return 1;
	return 0;
#else
	for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e066      	b.n	8001f72 <in_waypoint+0xda>
		if(waypoint_list[i].complete) continue;
 8001ea4:	4938      	ldr	r1, [pc, #224]	; (8001f88 <in_waypoint+0xf0>)
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d157      	bne.n	8001f6a <in_waypoint+0xd2>
		int16_t distance_x = (int)position_x - waypoint_list[i].x;
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <in_waypoint+0xf4>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec4:	ee17 3a90 	vmov	r3, s15
 8001ec8:	b299      	uxth	r1, r3
 8001eca:	482f      	ldr	r0, [pc, #188]	; (8001f88 <in_waypoint+0xf0>)
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4403      	add	r3, r0
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	1acb      	subs	r3, r1, r3
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	817b      	strh	r3, [r7, #10]
		int16_t distance_y = (int)position_y - waypoint_list[i].y;
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <in_waypoint+0xf8>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	4825      	ldr	r0, [pc, #148]	; (8001f88 <in_waypoint+0xf0>)
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4403      	add	r3, r0
 8001efe:	3302      	adds	r3, #2
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	813b      	strh	r3, [r7, #8]
		int16_t distance_squared = distance_x * distance_x + distance_y * distance_y;
 8001f08:	897a      	ldrh	r2, [r7, #10]
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	fb12 f303 	smulbb	r3, r2, r3
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	8939      	ldrh	r1, [r7, #8]
 8001f14:	893b      	ldrh	r3, [r7, #8]
 8001f16:	fb11 f303 	smulbb	r3, r1, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	80fb      	strh	r3, [r7, #6]

		if(distance_squared < (CELL_SIZE / 2)*(CELL_SIZE / 2)) {
 8001f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f26:	2b63      	cmp	r3, #99	; 0x63
 8001f28:	dc20      	bgt.n	8001f6c <in_waypoint+0xd4>
			score += prev_time - game_time;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <in_waypoint+0xfc>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <in_waypoint+0x100>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <in_waypoint+0x104>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <in_waypoint+0x104>)
 8001f44:	701a      	strb	r2, [r3, #0]
			prev_time = game_time;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <in_waypoint+0x100>)
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <in_waypoint+0xfc>)
 8001f4c:	801a      	strh	r2, [r3, #0]
			waypoint_list[i].complete = 1;
 8001f4e:	490e      	ldr	r1, [pc, #56]	; (8001f88 <in_waypoint+0xf0>)
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
			waypoint_reached = 1;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <in_waypoint+0x108>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e000      	b.n	8001f6c <in_waypoint+0xd4>
		if(waypoint_list[i].complete) continue;
 8001f6a:	bf00      	nop
	for(int i = 0; i < NUM_WAYPOINTS; i++) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	dd95      	ble.n	8001ea4 <in_waypoint+0xc>
		}
	}
	return 0;
 8001f78:	2300      	movs	r3, #0
#endif

}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200038cc 	.word	0x200038cc
 8001f8c:	200002d4 	.word	0x200002d4
 8001f90:	200002d8 	.word	0x200002d8
 8001f94:	200002e4 	.word	0x200002e4
 8001f98:	200002dc 	.word	0x200002dc
 8001f9c:	200039b6 	.word	0x200039b6
 8001fa0:	200039b7 	.word	0x200039b7

08001fa4 <in_hole>:

uint8_t in_hole() {
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
	int16_t distance_x;
	int16_t distance_y;
	uint32_t distance_squared;
	for(int i = 0; i < hole_tracker; i++) {
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e034      	b.n	800201a <in_hole+0x76>
		distance_x = (int)position_x - hole_list[i].x;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <in_hole+0x90>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fba:	ee17 3a90 	vmov	r3, s15
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	491d      	ldr	r1, [pc, #116]	; (8002038 <in_hole+0x94>)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	817b      	strh	r3, [r7, #10]
		distance_y = (int)position_y - hole_list[i].y;
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <in_hole+0x98>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd8:	ee17 3a90 	vmov	r3, s15
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4916      	ldr	r1, [pc, #88]	; (8002038 <in_hole+0x94>)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	885b      	ldrh	r3, [r3, #2]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	813b      	strh	r3, [r7, #8]
		distance_squared = distance_x * distance_x + distance_y * distance_y;
 8001fee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ff2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ff6:	fb03 f202 	mul.w	r2, r3, r2
 8001ffa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ffe:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	607b      	str	r3, [r7, #4]
		if(distance_squared < (CELL_SIZE / 2)*(CELL_SIZE / 2)) return 1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b63      	cmp	r3, #99	; 0x63
 800200e:	d801      	bhi.n	8002014 <in_hole+0x70>
 8002010:	2301      	movs	r3, #1
 8002012:	e008      	b.n	8002026 <in_hole+0x82>
	for(int i = 0; i < hole_tracker; i++) {
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3301      	adds	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <in_hole+0x9c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbc5      	blt.n	8001fb0 <in_hole+0xc>
	}
	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200002d4 	.word	0x200002d4
 8002038:	200038e4 	.word	0x200038e4
 800203c:	200002d8 	.word	0x200002d8
 8002040:	200039ac 	.word	0x200039ac

08002044 <draw_tilt_indication>:

void draw_tilt_indication() {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	if(angle_x < 0) {
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <draw_tilt_indication+0x74>)
 800204a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	da08      	bge.n	8002064 <draw_tilt_indication+0x20>
		LCD_Draw_Vertical_Line(215, 295, 20, LCD_COLOR_CYAN);
 8002052:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002056:	2214      	movs	r2, #20
 8002058:	f240 1127 	movw	r1, #295	; 0x127
 800205c:	20d7      	movs	r0, #215	; 0xd7
 800205e:	f000 fd7b 	bl	8002b58 <LCD_Draw_Vertical_Line>
 8002062:	e00c      	b.n	800207e <draw_tilt_indication+0x3a>
	}
	else if(angle_x > 0) {
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <draw_tilt_indication+0x74>)
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dd07      	ble.n	800207e <draw_tilt_indication+0x3a>
		LCD_Draw_Vertical_Line(215, 315, 20, LCD_COLOR_CYAN);
 800206e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002072:	2214      	movs	r2, #20
 8002074:	f240 113b 	movw	r1, #315	; 0x13b
 8002078:	20d7      	movs	r0, #215	; 0xd7
 800207a:	f000 fd6d 	bl	8002b58 <LCD_Draw_Vertical_Line>
	}

	if(angle_y < 0) {
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <draw_tilt_indication+0x78>)
 8002080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da08      	bge.n	800209a <draw_tilt_indication+0x56>
		LCD_Draw_Horizontal_Line(215, 295, 20, LCD_COLOR_CYAN);
 8002088:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800208c:	2214      	movs	r2, #20
 800208e:	f240 1127 	movw	r1, #295	; 0x127
 8002092:	20d7      	movs	r0, #215	; 0xd7
 8002094:	f000 fd39 	bl	8002b0a <LCD_Draw_Horizontal_Line>
	else if(angle_y > 0) {
		LCD_Draw_Horizontal_Line(235, 295, 20, LCD_COLOR_CYAN);
	}
//	if(angle_y < 0)
//	else if(angle_y > 0)
}
 8002098:	e00c      	b.n	80020b4 <draw_tilt_indication+0x70>
	else if(angle_y > 0) {
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <draw_tilt_indication+0x78>)
 800209c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dd07      	ble.n	80020b4 <draw_tilt_indication+0x70>
		LCD_Draw_Horizontal_Line(235, 295, 20, LCD_COLOR_CYAN);
 80020a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80020a8:	2214      	movs	r2, #20
 80020aa:	f240 1127 	movw	r1, #295	; 0x127
 80020ae:	20eb      	movs	r0, #235	; 0xeb
 80020b0:	f000 fd2b 	bl	8002b0a <LCD_Draw_Horizontal_Line>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20002c38 	.word	0x20002c38
 80020bc:	20002c3a 	.word	0x20002c3a

080020c0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	//Clear the gpio flag
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <EXTI0_IRQHandler+0x48>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
	//clear the interrupt flag
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80020ca:	2006      	movs	r0, #6
 80020cc:	f002 fc55 	bl	800497a <HAL_NVIC_ClearPendingIRQ>
	//Wake up the button task.
	if(!pressed) {
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <EXTI0_IRQHandler+0x4c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d111      	bne.n	80020fc <EXTI0_IRQHandler+0x3c>
		if(disruptor || current_energy < MIN_ACTIVATION_ENERGY) disruptor = 0;
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <EXTI0_IRQHandler+0x50>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <EXTI0_IRQHandler+0x2c>
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <EXTI0_IRQHandler+0x54>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d803      	bhi.n	80020f4 <EXTI0_IRQHandler+0x34>
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <EXTI0_IRQHandler+0x50>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
	}
	else {
		pressed = 0;
	}
//	osEventFlagsSet(btn_event_flag, 1);
}
 80020f2:	e006      	b.n	8002102 <EXTI0_IRQHandler+0x42>
		else disruptor = 1;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <EXTI0_IRQHandler+0x50>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
}
 80020fa:	e002      	b.n	8002102 <EXTI0_IRQHandler+0x42>
		pressed = 0;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <EXTI0_IRQHandler+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40013c00 	.word	0x40013c00
 800210c:	200039b5 	.word	0x200039b5
 8002110:	200039b4 	.word	0x200039b4
 8002114:	200002e0 	.word	0x200002e0

08002118 <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 800211c:	f000 f80a 	bl	8002134 <Gyro_Power_On>
	osDelay(100);
 8002120:	2064      	movs	r0, #100	; 0x64
 8002122:	f005 fa4c 	bl	80075be <osDelay>
	Gyro_Config_Regs();
 8002126:	f000 f8e9 	bl	80022fc <Gyro_Config_Regs>
	Gyro_Reboot();
 800212a:	f000 f847 	bl	80021bc <Gyro_Reboot>


}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800213a:	23a0      	movs	r3, #160	; 0xa0
 800213c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002142:	f000 f953 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002146:	bf00      	nop
 8002148:	2102      	movs	r1, #2
 800214a:	481a      	ldr	r0, [pc, #104]	; (80021b4 <Gyro_Power_On+0x80>)
 800214c:	f002 fedc 	bl	8004f08 <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f8      	bne.n	8002148 <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f979 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 800215e:	1dbb      	adds	r3, r7, #6
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f95b 	bl	800241c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002166:	f000 f94d 	bl	8002404 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 800216a:	2320      	movs	r3, #32
 800216c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 800216e:	79bb      	ldrb	r3, [r7, #6]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	b2db      	uxtb	r3, r3
 8002176:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8002178:	f000 f938 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800217c:	bf00      	nop
 800217e:	2102      	movs	r1, #2
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <Gyro_Power_On+0x80>)
 8002182:	f002 fec1 	bl	8004f08 <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f8      	bne.n	800217e <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f95e 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8002194:	1d7b      	adds	r3, r7, #5
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f95a 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800219c:	f000 f932 	bl	8002404 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <Gyro_Power_On+0x84>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d000      	beq.n	80021aa <Gyro_Power_On+0x76>
	{
		while(1);
 80021a8:	e7fe      	b.n	80021a8 <Gyro_Power_On+0x74>
	}
	}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40020800 	.word	0x40020800
 80021b8:	200039b8 	.word	0x200039b8

080021bc <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 80021c2:	23a4      	movs	r3, #164	; 0xa4
 80021c4:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80021ca:	f000 f90f 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80021ce:	bf00      	nop
 80021d0:	2102      	movs	r1, #2
 80021d2:	4817      	ldr	r0, [pc, #92]	; (8002230 <Gyro_Reboot+0x74>)
 80021d4:	f002 fe98 	bl	8004f08 <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f8      	bne.n	80021d0 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f935 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80021e6:	1dbb      	adds	r3, r7, #6
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f917 	bl	800241c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80021ee:	f000 f909 	bl	8002404 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 80021f2:	2324      	movs	r3, #36	; 0x24
 80021f4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8002200:	f000 f8f4 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002204:	bf00      	nop
 8002206:	2102      	movs	r1, #2
 8002208:	4809      	ldr	r0, [pc, #36]	; (8002230 <Gyro_Reboot+0x74>)
 800220a:	f002 fe7d 	bl	8004f08 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f8      	bne.n	8002206 <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f91a 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 800221c:	1d7b      	adds	r3, r7, #5
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f916 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002224:	f000 f8ee 	bl	8002404 <Gyro_Slave_Disable>

}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40020800 	.word	0x40020800

08002234 <Gyro_Get_Velocity_Y>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity_Y(){
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 800223e:	23ea      	movs	r3, #234	; 0xea
 8002240:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800224a:	f000 f8cf 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800224e:	bf00      	nop
 8002250:	2102      	movs	r1, #2
 8002252:	4810      	ldr	r0, [pc, #64]	; (8002294 <Gyro_Get_Velocity_Y+0x60>)
 8002254:	f002 fe58 	bl	8004f08 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f8      	bne.n	8002250 <Gyro_Get_Velocity_Y+0x1c>
	Gyro_Transmit_Data(&cmd);
 800225e:	1d7b      	adds	r3, r7, #5
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f8f5 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f8d7 	bl	800241c <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 800226e:	1cfb      	adds	r3, r7, #3
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f8d3 	bl	800241c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002276:	f000 f8c5 	bl	8002404 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	793b      	ldrb	r3, [r7, #4]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	80fb      	strh	r3, [r7, #6]

	return yval;
 8002288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020800 	.word	0x40020800

08002298 <Gyro_Get_Velocity_X>:

int16_t Gyro_Get_Velocity_X(){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	int16_t xval = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_X_L);
 80022a2:	23e8      	movs	r3, #232	; 0xe8
 80022a4:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_xl = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_xh = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 80022ae:	f000 f89d 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80022b2:	bf00      	nop
 80022b4:	2102      	movs	r1, #2
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <Gyro_Get_Velocity_X+0x60>)
 80022b8:	f002 fe26 	bl	8004f08 <HAL_GPIO_ReadPin>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f8      	bne.n	80022b4 <Gyro_Get_Velocity_X+0x1c>
	Gyro_Transmit_Data(&cmd);
 80022c2:	1d7b      	adds	r3, r7, #5
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f8c3 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_xl);
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 f8a5 	bl	800241c <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_xh);
 80022d2:	1cfb      	adds	r3, r7, #3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f8a1 	bl	800241c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80022da:	f000 f893 	bl	8002404 <Gyro_Slave_Disable>


	xval = (int16_t) ((rxbuff_xh << 8) | rxbuff_xl);
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	793b      	ldrb	r3, [r7, #4]
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	4313      	orrs	r3, r2
 80022ea:	80fb      	strh	r3, [r7, #6]

	return xval;
 80022ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40020800 	.word	0x40020800

080022fc <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8002302:	2320      	movs	r3, #32
 8002304:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 8002306:	231a      	movs	r3, #26
 8002308:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800230a:	f000 f86f 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800230e:	bf00      	nop
 8002310:	2102      	movs	r1, #2
 8002312:	482e      	ldr	r0, [pc, #184]	; (80023cc <Gyro_Config_Regs+0xd0>)
 8002314:	f002 fdf8 	bl	8004f08 <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f8      	bne.n	8002310 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f895 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f891 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800232e:	f000 f869 	bl	8002404 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 8002332:	2323      	movs	r3, #35	; 0x23
 8002334:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 8002336:	2310      	movs	r3, #16
 8002338:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800233a:	f000 f857 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800233e:	bf00      	nop
 8002340:	2102      	movs	r1, #2
 8002342:	4822      	ldr	r0, [pc, #136]	; (80023cc <Gyro_Config_Regs+0xd0>)
 8002344:	f002 fde0 	bl	8004f08 <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f8      	bne.n	8002340 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f87d 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002356:	1dbb      	adds	r3, r7, #6
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f879 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800235e:	f000 f851 	bl	8002404 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8002362:	2324      	movs	r3, #36	; 0x24
 8002364:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800236a:	f000 f83f 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800236e:	bf00      	nop
 8002370:	2102      	movs	r1, #2
 8002372:	4816      	ldr	r0, [pc, #88]	; (80023cc <Gyro_Config_Regs+0xd0>)
 8002374:	f002 fdc8 	bl	8004f08 <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f8      	bne.n	8002370 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f865 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002386:	1dbb      	adds	r3, r7, #6
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f861 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800238e:	f000 f839 	bl	8002404 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8002392:	232e      	movs	r3, #46	; 0x2e
 8002394:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8002396:	2300      	movs	r3, #0
 8002398:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800239a:	f000 f827 	bl	80023ec <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800239e:	bf00      	nop
 80023a0:	2102      	movs	r1, #2
 80023a2:	480a      	ldr	r0, [pc, #40]	; (80023cc <Gyro_Config_Regs+0xd0>)
 80023a4:	f002 fdb0 	bl	8004f08 <HAL_GPIO_ReadPin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f8      	bne.n	80023a0 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f84d 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80023b6:	1dbb      	adds	r3, r7, #6
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f849 	bl	8002450 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80023be:	f000 f821 	bl	8002404 <Gyro_Slave_Disable>




}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020800 	.word	0x40020800

080023d0 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <Gyro_HAL_Check+0x18>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d000      	beq.n	80023de <Gyro_HAL_Check+0xe>
		while(1);
 80023dc:	e7fe      	b.n	80023dc <Gyro_HAL_Check+0xc>
	}
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	200039b8 	.word	0x200039b8

080023ec <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2102      	movs	r1, #2
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <Gyro_Slave_Enable+0x14>)
 80023f6:	f002 fd9f 	bl	8004f38 <HAL_GPIO_WritePin>
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40020800 	.word	0x40020800

08002404 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	2102      	movs	r1, #2
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <Gyro_Slave_Disable+0x14>)
 800240e:	f002 fd93 	bl	8004f38 <HAL_GPIO_WritePin>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020800 	.word	0x40020800

0800241c <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8002424:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002428:	2201      	movs	r2, #1
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <Gyro_Receive_Data+0x2c>)
 800242e:	f004 f959 	bl	80066e4 <HAL_SPI_Receive>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <Gyro_Receive_Data+0x30>)
 8002438:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800243a:	f7ff ffc9 	bl	80023d0 <Gyro_HAL_Check>

}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200293ac 	.word	0x200293ac
 800244c:	200039b8 	.word	0x200039b8

08002450 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8002458:	f644 6320 	movw	r3, #20000	; 0x4e20
 800245c:	2201      	movs	r2, #1
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4806      	ldr	r0, [pc, #24]	; (800247c <Gyro_Transmit_Data+0x2c>)
 8002462:	f004 f803 	bl	800646c <HAL_SPI_Transmit>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <Gyro_Transmit_Data+0x30>)
 800246c:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800246e:	f7ff ffaf 	bl	80023d0 <Gyro_HAL_Check>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200293ac 	.word	0x200293ac
 8002480:	200039b8 	.word	0x200039b8

08002484 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a59      	ldr	r2, [pc, #356]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <LCD_GPIO_Init+0x174>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a4b      	ldr	r2, [pc, #300]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a44      	ldr	r2, [pc, #272]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <LCD_GPIO_Init+0x174>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a3d      	ldr	r2, [pc, #244]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <LCD_GPIO_Init+0x174>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <LCD_GPIO_Init+0x174>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <LCD_GPIO_Init+0x174>)
 800253c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <LCD_GPIO_Init+0x174>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800254e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002552:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002560:	230e      	movs	r3, #14
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4824      	ldr	r0, [pc, #144]	; (80025fc <LCD_GPIO_Init+0x178>)
 800256c:	f002 fa14 	bl	8004998 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002570:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002574:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4820      	ldr	r0, [pc, #128]	; (8002600 <LCD_GPIO_Init+0x17c>)
 800257e:	f002 fa0b 	bl	8004998 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002582:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <LCD_GPIO_Init+0x180>)
 8002590:	f002 fa02 	bl	8004998 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002594:	2348      	movs	r3, #72	; 0x48
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	481a      	ldr	r0, [pc, #104]	; (8002608 <LCD_GPIO_Init+0x184>)
 80025a0:	f002 f9fa 	bl	8004998 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80025a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4816      	ldr	r0, [pc, #88]	; (800260c <LCD_GPIO_Init+0x188>)
 80025b2:	f002 f9f1 	bl	8004998 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80025b6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80025ba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4813      	ldr	r0, [pc, #76]	; (8002610 <LCD_GPIO_Init+0x18c>)
 80025c4:	f002 f9e8 	bl	8004998 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80025c8:	2303      	movs	r3, #3
 80025ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80025cc:	2309      	movs	r3, #9
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	480a      	ldr	r0, [pc, #40]	; (8002600 <LCD_GPIO_Init+0x17c>)
 80025d8:	f002 f9de 	bl	8004998 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80025dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <LCD_GPIO_Init+0x18c>)
 80025ea:	f002 f9d5 	bl	8004998 <HAL_GPIO_Init>
}
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	; 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021400 	.word	0x40021400
 8002610:	40021800 	.word	0x40021800

08002614 <LTCD__Init>:


void LTCD__Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <LTCD__Init+0xb0>)
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <LTCD__Init+0xb4>)
 800261c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <LTCD__Init+0xb0>)
 8002620:	2209      	movs	r2, #9
 8002622:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <LTCD__Init+0xb0>)
 8002626:	2201      	movs	r2, #1
 8002628:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <LTCD__Init+0xb0>)
 800262c:	221d      	movs	r2, #29
 800262e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <LTCD__Init+0xb0>)
 8002632:	2203      	movs	r2, #3
 8002634:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <LTCD__Init+0xb0>)
 8002638:	f240 120d 	movw	r2, #269	; 0x10d
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <LTCD__Init+0xb0>)
 8002640:	f240 1243 	movw	r2, #323	; 0x143
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8002646:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <LTCD__Init+0xb0>)
 8002648:	f240 1217 	movw	r2, #279	; 0x117
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <LTCD__Init+0xb0>)
 8002650:	f240 1247 	movw	r2, #327	; 0x147
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <LTCD__Init+0xb0>)
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <LTCD__Init+0xb0>)
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <LTCD__Init+0xb0>)
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <LTCD__Init+0xb8>)
 8002670:	2208      	movs	r2, #8
 8002672:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <LTCD__Init+0xb8>)
 8002676:	22c0      	movs	r2, #192	; 0xc0
 8002678:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <LTCD__Init+0xb8>)
 800267c:	2204      	movs	r2, #4
 800267e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <LTCD__Init+0xb8>)
 8002682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002686:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002688:	4810      	ldr	r0, [pc, #64]	; (80026cc <LTCD__Init+0xb8>)
 800268a:	f003 fb93 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <LTCD__Init+0xb0>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <LTCD__Init+0xb0>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <LTCD__Init+0xb0>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <LTCD__Init+0xb0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80026a6:	f7ff feed 	bl	8002484 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <LTCD__Init+0xb0>)
 80026ac:	f002 fc78 	bl	8004fa0 <HAL_LTDC_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80026b6:	f000 fa99 	bl	8002bec <LCD_Error_Handler>
	 }

	ili9341_Init();
 80026ba:	f000 fa9a 	bl	8002bf2 <ili9341_Init>
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200039bc 	.word	0x200039bc
 80026c8:	40016800 	.word	0x40016800
 80026cc:	20003a64 	.word	0x20003a64

080026d0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b090      	sub	sp, #64	; 0x40
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80026de:	23f0      	movs	r3, #240	; 0xf0
 80026e0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80026e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026ea:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80026ec:	2302      	movs	r3, #2
 80026ee:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80026f0:	23ff      	movs	r3, #255	; 0xff
 80026f2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80026f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80026fe:	2305      	movs	r3, #5
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <LTCD_Layer_Init+0x78>)
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800270c:	23f0      	movs	r3, #240	; 0xf0
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002710:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4619      	mov	r1, r3
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <LTCD_Layer_Init+0x7c>)
 8002732:	f002 fd05 	bl	8005140 <HAL_LTDC_ConfigLayer>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800273c:	f000 fa56 	bl	8002bec <LCD_Error_Handler>
	}

}
 8002740:	bf00      	nop
 8002742:	3740      	adds	r7, #64	; 0x40
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20003af0 	.word	0x20003af0
 800274c:	200039bc 	.word	0x200039bc

08002750 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
 800275a:	460b      	mov	r3, r1
 800275c:	80bb      	strh	r3, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002762:	88ba      	ldrh	r2, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	461a      	mov	r2, r3
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	4413      	add	r3, r2
 8002772:	4905      	ldr	r1, [pc, #20]	; (8002788 <LCD_Draw_Pixel+0x38>)
 8002774:	887a      	ldrh	r2, [r7, #2]
 8002776:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20003af0 	.word	0x20003af0

0800278c <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	603a      	str	r2, [r7, #0]
 8002796:	80fb      	strh	r3, [r7, #6]
 8002798:	460b      	mov	r3, r1
 800279a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e04c      	b.n	8002844 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	e03f      	b.n	8002830 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <LCD_DrawChar+0xd0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	889b      	ldrh	r3, [r3, #4]
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <LCD_DrawChar+0xd4>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fa42 f303 	asr.w	r3, r2, r3
 80027d8:	400b      	ands	r3, r1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d104      	bne.n	80027e8 <LCD_DrawChar+0x5c>
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <LCD_DrawChar+0xd0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	889b      	ldrh	r3, [r3, #4]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d920      	bls.n	800282a <LCD_DrawChar+0x9e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	fa42 f303 	asr.w	r3, r2, r3
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <LCD_DrawChar+0x80>
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <LCD_DrawChar+0xd0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	889b      	ldrh	r3, [r3, #4]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d80e      	bhi.n	800282a <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	b29a      	uxth	r2, r3
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	4413      	add	r3, r2
 8002814:	b298      	uxth	r0, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	b29a      	uxth	r2, r3
 800281a:	88bb      	ldrh	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	4a10      	ldr	r2, [pc, #64]	; (8002864 <LCD_DrawChar+0xd8>)
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f7ff ff93 	bl	8002750 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <LCD_DrawChar+0xd0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	889b      	ldrh	r3, [r3, #4]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4293      	cmp	r3, r2
 800283c:	d3b8      	bcc.n	80027b0 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3301      	adds	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <LCD_DrawChar+0xd0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	88db      	ldrh	r3, [r3, #6]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4293      	cmp	r3, r2
 8002850:	d3ab      	bcc.n	80027aa <LCD_DrawChar+0x1e>
      }
    }
  }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20003a94 	.word	0x20003a94
 8002860:	aaaaaaab 	.word	0xaaaaaaab
 8002864:	200002e6 	.word	0x200002e6

08002868 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
 8002872:	460b      	mov	r3, r1
 8002874:	80bb      	strh	r3, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	3b20      	subs	r3, #32
 800287e:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <LCD_DisplayChar+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <LCD_DisplayChar+0x40>)
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	88c9      	ldrh	r1, [r1, #6]
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	441a      	add	r2, r3
 8002896:	88b9      	ldrh	r1, [r7, #4]
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff76 	bl	800278c <LCD_DrawChar>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20003a94 	.word	0x20003a94

080028ac <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	603a      	str	r2, [r7, #0]
 80028b6:	80fb      	strh	r3, [r7, #6]
 80028b8:	460b      	mov	r3, r1
 80028ba:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d017      	beq.n	80028f2 <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 80028c6:	e00f      	b.n	80028e8 <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	4413      	add	r3, r2
 80028ce:	b298      	uxth	r0, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7ff ffc6 	bl	8002868 <LCD_DisplayChar>
		string++;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	603b      	str	r3, [r7, #0]
		offset+=15;
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	330f      	adds	r3, #15
 80028e6:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1eb      	bne.n	80028c8 <LCD_DisplayString+0x1c>
 80028f0:	e000      	b.n	80028f4 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 80028f2:	bf00      	nop
	}
}
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <LCD_DisplayNumber>:

//Displays Number, size is the number of digits in the number you want to Display
void LCD_DisplayNumber(uint16_t Xpos, uint16_t Ypos, uint16_t Number){
 80028fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002900:	b089      	sub	sp, #36	; 0x24
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	80fb      	strh	r3, [r7, #6]
 8002908:	460b      	mov	r3, r1
 800290a:	80bb      	strh	r3, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	466b      	mov	r3, sp
 8002912:	461e      	mov	r6, r3

	uint8_t numDigits = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	77fb      	strb	r3, [r7, #31]
	if(Number == 0){
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <LCD_DisplayNumber+0x32>
		LCD_DisplayChar(Xpos,Ypos,'0');
 800291e:	88b9      	ldrh	r1, [r7, #4]
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	2230      	movs	r2, #48	; 0x30
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff9f 	bl	8002868 <LCD_DisplayChar>
		return;
 800292a:	46b5      	mov	sp, r6
 800292c:	e074      	b.n	8002a18 <LCD_DisplayNumber+0x11c>
	}
	else{
		uint16_t temp = Number;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	83bb      	strh	r3, [r7, #28]
		while (temp > 0) {
 8002932:	e008      	b.n	8002946 <LCD_DisplayNumber+0x4a>
			temp /= 10;
 8002934:	8bbb      	ldrh	r3, [r7, #28]
 8002936:	4a3a      	ldr	r2, [pc, #232]	; (8002a20 <LCD_DisplayNumber+0x124>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	83bb      	strh	r3, [r7, #28]
			numDigits++;
 8002940:	7ffb      	ldrb	r3, [r7, #31]
 8002942:	3301      	adds	r3, #1
 8002944:	77fb      	strb	r3, [r7, #31]
		while (temp > 0) {
 8002946:	8bbb      	ldrh	r3, [r7, #28]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f3      	bne.n	8002934 <LCD_DisplayNumber+0x38>
		}
	}



	uint8_t num_ascii[numDigits];
 800294c:	7ff9      	ldrb	r1, [r7, #31]
 800294e:	460b      	mov	r3, r1
 8002950:	3b01      	subs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	b2cb      	uxtb	r3, r1
 8002956:	2200      	movs	r2, #0
 8002958:	4698      	mov	r8, r3
 800295a:	4691      	mov	r9, r2
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002968:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002970:	b2cb      	uxtb	r3, r1
 8002972:	2200      	movs	r2, #0
 8002974:	461c      	mov	r4, r3
 8002976:	4615      	mov	r5, r2
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	00eb      	lsls	r3, r5, #3
 8002982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002986:	00e2      	lsls	r2, r4, #3
 8002988:	460b      	mov	r3, r1
 800298a:	3307      	adds	r3, #7
 800298c:	08db      	lsrs	r3, r3, #3
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	ebad 0d03 	sub.w	sp, sp, r3
 8002994:	466b      	mov	r3, sp
 8002996:	3300      	adds	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
	// Convert each digit to a character and print it with standard spacing.
	for (int i = numDigits - 1; i >= 0; i--) {
 800299a:	7ffb      	ldrb	r3, [r7, #31]
 800299c:	3b01      	subs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	e01b      	b.n	80029da <LCD_DisplayNumber+0xde>
		num_ascii[i] = '0' + (Number % 10);
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <LCD_DisplayNumber+0x124>)
 80029a6:	fba3 1302 	umull	r1, r3, r3, r2
 80029aa:	08d9      	lsrs	r1, r3, #3
 80029ac:	460b      	mov	r3, r1
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3330      	adds	r3, #48	; 0x30
 80029bc:	b2d9      	uxtb	r1, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4413      	add	r3, r2
 80029c4:	460a      	mov	r2, r1
 80029c6:	701a      	strb	r2, [r3, #0]

		Number /= 10;
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <LCD_DisplayNumber+0x124>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	807b      	strh	r3, [r7, #2]
	for (int i = numDigits - 1; i >= 0; i--) {
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dae0      	bge.n	80029a2 <LCD_DisplayNumber+0xa6>
	}

	//print numbers with offset on x-axis
	uint16_t offset = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e011      	b.n	8002a0e <LCD_DisplayNumber+0x112>
		LCD_DisplayChar(Xpos+offset,Ypos,num_ascii[i]);
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	8afb      	ldrh	r3, [r7, #22]
 80029ee:	4413      	add	r3, r2
 80029f0:	b298      	uxth	r0, r3
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	88bb      	ldrh	r3, [r7, #4]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7ff ff33 	bl	8002868 <LCD_DisplayChar>
		offset+=12;
 8002a02:	8afb      	ldrh	r3, [r7, #22]
 8002a04:	330c      	adds	r3, #12
 8002a06:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	dbe9      	blt.n	80029ea <LCD_DisplayNumber+0xee>
 8002a16:	46b5      	mov	sp, r6
	}

}
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a20:	cccccccd 	.word	0xcccccccd

08002a24 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <LCD_SetTextColor+0x1c>)
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	8013      	strh	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	200002e6 	.word	0x200002e6

08002a44 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <LCD_SetFont+0x1c>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20003a94 	.word	0x20003a94

08002a64 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	80fb      	strh	r3, [r7, #6]
 8002a76:	4603      	mov	r3, r0
 8002a78:	80bb      	strh	r3, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	425b      	negs	r3, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	81fb      	strh	r3, [r7, #14]
 8002a8a:	e034      	b.n	8002af6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	425b      	negs	r3, r3
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	81bb      	strh	r3, [r7, #12]
 8002a94:	e024      	b.n	8002ae0 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8002a96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a9e:	fb03 f202 	mul.w	r2, r3, r2
 8002aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aa6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	441a      	add	r2, r3
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	8879      	ldrh	r1, [r7, #2]
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dc0b      	bgt.n	8002ad4 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8002abc:	89ba      	ldrh	r2, [r7, #12]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	89fa      	ldrh	r2, [r7, #14]
 8002ac6:	88bb      	ldrh	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	883a      	ldrh	r2, [r7, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7ff fe3e 	bl	8002750 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8002ad4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	81bb      	strh	r3, [r7, #12]
 8002ae0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	ddd5      	ble.n	8002a96 <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 8002aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	81fb      	strh	r3, [r7, #14]
 8002af6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	ddc5      	ble.n	8002a8c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}

08002b0a <LCD_Draw_Horizontal_Line>:

// Draw Vertical Line
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002b0a:	b590      	push	{r4, r7, lr}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4604      	mov	r4, r0
 8002b12:	4608      	mov	r0, r1
 8002b14:	4611      	mov	r1, r2
 8002b16:	461a      	mov	r2, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	80fb      	strh	r3, [r7, #6]
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	80bb      	strh	r3, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	81fb      	strh	r3, [r7, #14]
 8002b2c:	e00b      	b.n	8002b46 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8002b2e:	89fa      	ldrh	r2, [r7, #14]
 8002b30:	88bb      	ldrh	r3, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	b299      	uxth	r1, r3
 8002b36:	883a      	ldrh	r2, [r7, #0]
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fe08 	bl	8002750 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	3301      	adds	r3, #1
 8002b44:	81fb      	strh	r3, [r7, #14]
 8002b46:	89fa      	ldrh	r2, [r7, #14]
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3ef      	bcc.n	8002b2e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	80fb      	strh	r3, [r7, #6]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80bb      	strh	r3, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
 8002b72:	4613      	mov	r3, r2
 8002b74:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	e00b      	b.n	8002b94 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8002b7c:	89fa      	ldrh	r2, [r7, #14]
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	4413      	add	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	883a      	ldrh	r2, [r7, #0]
 8002b86:	88b9      	ldrh	r1, [r7, #4]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fde1 	bl	8002750 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	3301      	adds	r3, #1
 8002b92:	81fb      	strh	r3, [r7, #14]
 8002b94:	89fa      	ldrh	r2, [r7, #14]
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3ef      	bcc.n	8002b7c <LCD_Draw_Vertical_Line+0x24>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
	...

08002ba8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	71fb      	strb	r3, [r7, #7]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10e      	bne.n	8002bdc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e007      	b.n	8002bd4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8002bc4:	4908      	ldr	r1, [pc, #32]	; (8002be8 <LCD_Clear+0x40>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88ba      	ldrh	r2, [r7, #4]
 8002bca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8002bda:	d3f3      	bcc.n	8002bc4 <LCD_Clear+0x1c>
		}
	}
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	20003af0 	.word	0x20003af0

08002bec <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8002bf0:	e7fe      	b.n	8002bf0 <LCD_Error_Handler+0x4>

08002bf2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002bf6:	f000 f9ff 	bl	8002ff8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002bfa:	20ca      	movs	r0, #202	; 0xca
 8002bfc:	f000 f943 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8002c00:	20c3      	movs	r0, #195	; 0xc3
 8002c02:	f000 f94d 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002c06:	2008      	movs	r0, #8
 8002c08:	f000 f94a 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002c0c:	2050      	movs	r0, #80	; 0x50
 8002c0e:	f000 f947 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002c12:	20cf      	movs	r0, #207	; 0xcf
 8002c14:	f000 f937 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f000 f941 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002c1e:	20c1      	movs	r0, #193	; 0xc1
 8002c20:	f000 f93e 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002c24:	2030      	movs	r0, #48	; 0x30
 8002c26:	f000 f93b 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002c2a:	20ed      	movs	r0, #237	; 0xed
 8002c2c:	f000 f92b 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	f000 f935 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002c36:	2003      	movs	r0, #3
 8002c38:	f000 f932 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002c3c:	2012      	movs	r0, #18
 8002c3e:	f000 f92f 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002c42:	2081      	movs	r0, #129	; 0x81
 8002c44:	f000 f92c 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002c48:	20e8      	movs	r0, #232	; 0xe8
 8002c4a:	f000 f91c 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002c4e:	2085      	movs	r0, #133	; 0x85
 8002c50:	f000 f926 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f000 f923 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002c5a:	2078      	movs	r0, #120	; 0x78
 8002c5c:	f000 f920 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002c60:	20cb      	movs	r0, #203	; 0xcb
 8002c62:	f000 f910 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002c66:	2039      	movs	r0, #57	; 0x39
 8002c68:	f000 f91a 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002c6c:	202c      	movs	r0, #44	; 0x2c
 8002c6e:	f000 f917 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f000 f914 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002c78:	2034      	movs	r0, #52	; 0x34
 8002c7a:	f000 f911 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f000 f90e 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002c84:	20f7      	movs	r0, #247	; 0xf7
 8002c86:	f000 f8fe 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002c8a:	2020      	movs	r0, #32
 8002c8c:	f000 f908 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002c90:	20ea      	movs	r0, #234	; 0xea
 8002c92:	f000 f8f8 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f000 f902 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f000 f8ff 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002ca2:	20b1      	movs	r0, #177	; 0xb1
 8002ca4:	f000 f8ef 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f000 f8f9 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002cae:	201b      	movs	r0, #27
 8002cb0:	f000 f8f6 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002cb4:	20b6      	movs	r0, #182	; 0xb6
 8002cb6:	f000 f8e6 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002cba:	200a      	movs	r0, #10
 8002cbc:	f000 f8f0 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002cc0:	20a2      	movs	r0, #162	; 0xa2
 8002cc2:	f000 f8ed 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002cc6:	20c0      	movs	r0, #192	; 0xc0
 8002cc8:	f000 f8dd 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002ccc:	2010      	movs	r0, #16
 8002cce:	f000 f8e7 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002cd2:	20c1      	movs	r0, #193	; 0xc1
 8002cd4:	f000 f8d7 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002cd8:	2010      	movs	r0, #16
 8002cda:	f000 f8e1 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002cde:	20c5      	movs	r0, #197	; 0xc5
 8002ce0:	f000 f8d1 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002ce4:	2045      	movs	r0, #69	; 0x45
 8002ce6:	f000 f8db 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002cea:	2015      	movs	r0, #21
 8002cec:	f000 f8d8 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002cf0:	20c7      	movs	r0, #199	; 0xc7
 8002cf2:	f000 f8c8 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002cf6:	2090      	movs	r0, #144	; 0x90
 8002cf8:	f000 f8d2 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002cfc:	2036      	movs	r0, #54	; 0x36
 8002cfe:	f000 f8c2 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002d02:	20c8      	movs	r0, #200	; 0xc8
 8002d04:	f000 f8cc 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002d08:	20f2      	movs	r0, #242	; 0xf2
 8002d0a:	f000 f8bc 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f000 f8c6 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002d14:	20b0      	movs	r0, #176	; 0xb0
 8002d16:	f000 f8b6 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002d1a:	20c2      	movs	r0, #194	; 0xc2
 8002d1c:	f000 f8c0 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002d20:	20b6      	movs	r0, #182	; 0xb6
 8002d22:	f000 f8b0 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002d26:	200a      	movs	r0, #10
 8002d28:	f000 f8ba 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002d2c:	20a7      	movs	r0, #167	; 0xa7
 8002d2e:	f000 f8b7 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002d32:	2027      	movs	r0, #39	; 0x27
 8002d34:	f000 f8b4 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f000 f8b1 	bl	8002ea0 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002d3e:	202a      	movs	r0, #42	; 0x2a
 8002d40:	f000 f8a1 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f000 f8ab 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f000 f8a8 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f000 f8a5 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002d56:	20ef      	movs	r0, #239	; 0xef
 8002d58:	f000 f8a2 	bl	8002ea0 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002d5c:	202b      	movs	r0, #43	; 0x2b
 8002d5e:	f000 f892 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f000 f89c 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f000 f899 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f000 f896 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002d74:	203f      	movs	r0, #63	; 0x3f
 8002d76:	f000 f893 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002d7a:	20f6      	movs	r0, #246	; 0xf6
 8002d7c:	f000 f883 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f000 f88d 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f88a 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002d8c:	2006      	movs	r0, #6
 8002d8e:	f000 f887 	bl	8002ea0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002d92:	202c      	movs	r0, #44	; 0x2c
 8002d94:	f000 f877 	bl	8002e86 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002d98:	20c8      	movs	r0, #200	; 0xc8
 8002d9a:	f000 f9e9 	bl	8003170 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002d9e:	2026      	movs	r0, #38	; 0x26
 8002da0:	f000 f871 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002da4:	2001      	movs	r0, #1
 8002da6:	f000 f87b 	bl	8002ea0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002daa:	20e0      	movs	r0, #224	; 0xe0
 8002dac:	f000 f86b 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002db0:	200f      	movs	r0, #15
 8002db2:	f000 f875 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002db6:	2029      	movs	r0, #41	; 0x29
 8002db8:	f000 f872 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002dbc:	2024      	movs	r0, #36	; 0x24
 8002dbe:	f000 f86f 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002dc2:	200c      	movs	r0, #12
 8002dc4:	f000 f86c 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002dc8:	200e      	movs	r0, #14
 8002dca:	f000 f869 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002dce:	2009      	movs	r0, #9
 8002dd0:	f000 f866 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002dd4:	204e      	movs	r0, #78	; 0x4e
 8002dd6:	f000 f863 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002dda:	2078      	movs	r0, #120	; 0x78
 8002ddc:	f000 f860 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002de0:	203c      	movs	r0, #60	; 0x3c
 8002de2:	f000 f85d 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002de6:	2009      	movs	r0, #9
 8002de8:	f000 f85a 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002dec:	2013      	movs	r0, #19
 8002dee:	f000 f857 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002df2:	2005      	movs	r0, #5
 8002df4:	f000 f854 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002df8:	2017      	movs	r0, #23
 8002dfa:	f000 f851 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002dfe:	2011      	movs	r0, #17
 8002e00:	f000 f84e 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f000 f84b 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002e0a:	20e1      	movs	r0, #225	; 0xe1
 8002e0c:	f000 f83b 	bl	8002e86 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f000 f845 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002e16:	2016      	movs	r0, #22
 8002e18:	f000 f842 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002e1c:	201b      	movs	r0, #27
 8002e1e:	f000 f83f 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002e22:	2004      	movs	r0, #4
 8002e24:	f000 f83c 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002e28:	2011      	movs	r0, #17
 8002e2a:	f000 f839 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002e2e:	2007      	movs	r0, #7
 8002e30:	f000 f836 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002e34:	2031      	movs	r0, #49	; 0x31
 8002e36:	f000 f833 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002e3a:	2033      	movs	r0, #51	; 0x33
 8002e3c:	f000 f830 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002e40:	2042      	movs	r0, #66	; 0x42
 8002e42:	f000 f82d 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002e46:	2005      	movs	r0, #5
 8002e48:	f000 f82a 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002e4c:	200c      	movs	r0, #12
 8002e4e:	f000 f827 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002e52:	200a      	movs	r0, #10
 8002e54:	f000 f824 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002e58:	2028      	movs	r0, #40	; 0x28
 8002e5a:	f000 f821 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002e5e:	202f      	movs	r0, #47	; 0x2f
 8002e60:	f000 f81e 	bl	8002ea0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002e64:	200f      	movs	r0, #15
 8002e66:	f000 f81b 	bl	8002ea0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002e6a:	2011      	movs	r0, #17
 8002e6c:	f000 f80b 	bl	8002e86 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002e70:	20c8      	movs	r0, #200	; 0xc8
 8002e72:	f000 f97d 	bl	8003170 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002e76:	2029      	movs	r0, #41	; 0x29
 8002e78:	f000 f805 	bl	8002e86 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002e7c:	202c      	movs	r0, #44	; 0x2c
 8002e7e:	f000 f802 	bl	8002e86 <ili9341_Write_Reg>
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f94a 	bl	800312c <LCD_IO_WriteReg>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f91b 	bl	80030e8 <LCD_IO_WriteData>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002ec0:	4819      	ldr	r0, [pc, #100]	; (8002f28 <SPI_Init+0x6c>)
 8002ec2:	f003 fec2 	bl	8006c4a <HAL_SPI_GetState>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d12b      	bne.n	8002f24 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <SPI_Init+0x6c>)
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <SPI_Init+0x70>)
 8002ed0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <SPI_Init+0x6c>)
 8002ed4:	2218      	movs	r2, #24
 8002ed6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <SPI_Init+0x6c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <SPI_Init+0x6c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <SPI_Init+0x6c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <SPI_Init+0x6c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <SPI_Init+0x6c>)
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <SPI_Init+0x6c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <SPI_Init+0x6c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <SPI_Init+0x6c>)
 8002f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f08:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <SPI_Init+0x6c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SPI_Init+0x6c>)
 8002f12:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f16:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002f18:	4803      	ldr	r0, [pc, #12]	; (8002f28 <SPI_Init+0x6c>)
 8002f1a:	f000 f833 	bl	8002f84 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002f1e:	4802      	ldr	r0, [pc, #8]	; (8002f28 <SPI_Init+0x6c>)
 8002f20:	f003 f9f3 	bl	800630a <HAL_SPI_Init>
  }
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20003a98 	.word	0x20003a98
 8002f2c:	40015000 	.word	0x40015000

08002f30 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <SPI_Write+0x34>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1db9      	adds	r1, r7, #6
 8002f44:	2201      	movs	r2, #1
 8002f46:	4808      	ldr	r0, [pc, #32]	; (8002f68 <SPI_Write+0x38>)
 8002f48:	f003 fa90 	bl	800646c <HAL_SPI_Transmit>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002f56:	f000 f809 	bl	8002f6c <SPI_Error>
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200002e8 	.word	0x200002e8
 8002f68:	20003a98 	.word	0x20003a98

08002f6c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <SPI_Error+0x14>)
 8002f72:	f003 fa53 	bl	800641c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002f76:	f7ff ffa1 	bl	8002ebc <SPI_Init>
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20003a98 	.word	0x20003a98

08002f84 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <SPI_MspInit+0x6c>)
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <SPI_MspInit+0x6c>)
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <SPI_MspInit+0x6c>)
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <SPI_MspInit+0x6c>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <SPI_MspInit+0x6c>)
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <SPI_MspInit+0x6c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002fc4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <SPI_MspInit+0x70>)
 8002fe2:	f001 fcd9 	bl	8004998 <HAL_GPIO_Init>
}
 8002fe6:	bf00      	nop
 8002fe8:	3728      	adds	r7, #40	; 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40021400 	.word	0x40021400

08002ff8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <LCD_IO_Init+0xe0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d164      	bne.n	80030d0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <LCD_IO_Init+0xe0>)
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <LCD_IO_Init+0xe4>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a31      	ldr	r2, [pc, #196]	; (80030dc <LCD_IO_Init+0xe4>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <LCD_IO_Init+0xe4>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800302e:	2301      	movs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	4619      	mov	r1, r3
 8003040:	4827      	ldr	r0, [pc, #156]	; (80030e0 <LCD_IO_Init+0xe8>)
 8003042:	f001 fca9 	bl	8004998 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <LCD_IO_Init+0xe4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a23      	ldr	r2, [pc, #140]	; (80030dc <LCD_IO_Init+0xe4>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <LCD_IO_Init+0xe4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003068:	2301      	movs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4619      	mov	r1, r3
 800307a:	4819      	ldr	r0, [pc, #100]	; (80030e0 <LCD_IO_Init+0xe8>)
 800307c:	f001 fc8c 	bl	8004998 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <LCD_IO_Init+0xe4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <LCD_IO_Init+0xe4>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6313      	str	r3, [r2, #48]	; 0x30
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <LCD_IO_Init+0xe4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800309c:	2304      	movs	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	4619      	mov	r1, r3
 80030b2:	480c      	ldr	r0, [pc, #48]	; (80030e4 <LCD_IO_Init+0xec>)
 80030b4:	f001 fc70 	bl	8004998 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80030b8:	2200      	movs	r2, #0
 80030ba:	2104      	movs	r1, #4
 80030bc:	4809      	ldr	r0, [pc, #36]	; (80030e4 <LCD_IO_Init+0xec>)
 80030be:	f001 ff3b 	bl	8004f38 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80030c2:	2201      	movs	r2, #1
 80030c4:	2104      	movs	r1, #4
 80030c6:	4807      	ldr	r0, [pc, #28]	; (80030e4 <LCD_IO_Init+0xec>)
 80030c8:	f001 ff36 	bl	8004f38 <HAL_GPIO_WritePin>

    SPI_Init();
 80030cc:	f7ff fef6 	bl	8002ebc <SPI_Init>
  }
}
 80030d0:	bf00      	nop
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200292f0 	.word	0x200292f0
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40020800 	.word	0x40020800

080030e8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80030f2:	2201      	movs	r2, #1
 80030f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f8:	480a      	ldr	r0, [pc, #40]	; (8003124 <LCD_IO_WriteData+0x3c>)
 80030fa:	f001 ff1d 	bl	8004f38 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80030fe:	2200      	movs	r2, #0
 8003100:	2104      	movs	r1, #4
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <LCD_IO_WriteData+0x40>)
 8003104:	f001 ff18 	bl	8004f38 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff10 	bl	8002f30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003110:	2201      	movs	r2, #1
 8003112:	2104      	movs	r1, #4
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <LCD_IO_WriteData+0x40>)
 8003116:	f001 ff0f 	bl	8004f38 <HAL_GPIO_WritePin>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40020c00 	.word	0x40020c00
 8003128:	40020800 	.word	0x40020800

0800312c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003136:	2200      	movs	r2, #0
 8003138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800313c:	480a      	ldr	r0, [pc, #40]	; (8003168 <LCD_IO_WriteReg+0x3c>)
 800313e:	f001 fefb 	bl	8004f38 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003142:	2200      	movs	r2, #0
 8003144:	2104      	movs	r1, #4
 8003146:	4809      	ldr	r0, [pc, #36]	; (800316c <LCD_IO_WriteReg+0x40>)
 8003148:	f001 fef6 	bl	8004f38 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff feed 	bl	8002f30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003156:	2201      	movs	r2, #1
 8003158:	2104      	movs	r1, #4
 800315a:	4804      	ldr	r0, [pc, #16]	; (800316c <LCD_IO_WriteReg+0x40>)
 800315c:	f001 feec 	bl	8004f38 <HAL_GPIO_WritePin>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40020800 	.word	0x40020800

08003170 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f004 fa20 	bl	80075be <osDelay>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b092      	sub	sp, #72	; 0x48
 800318c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <systemClockOverride+0x7c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <systemClockOverride+0x7c>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <systemClockOverride+0x7c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b4:	2302      	movs	r3, #2
 80031b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031be:	2308      	movs	r3, #8
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80031c2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031c8:	2302      	movs	r3, #2
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80031cc:	2307      	movs	r3, #7
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 f98a 	bl	80054ec <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80031d8:	230f      	movs	r3, #15
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031dc:	2302      	movs	r3, #2
 80031de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80031f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031f4:	2105      	movs	r1, #5
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fbf0 	bl	80059dc <HAL_RCC_ClockConfig>
}
 80031fc:	bf00      	nop
 80031fe:	3748      	adds	r7, #72	; 0x48
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800

08003208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800320c:	f001 fa14 	bl	8004638 <HAL_Init>
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 8003210:	f7ff ffba 	bl	8003188 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003214:	f000 f94c 	bl	80034b0 <MX_GPIO_Init>
  MX_SPI5_Init();
 8003218:	f000 f8f0 	bl	80033fc <MX_SPI5_Init>
  MX_LTDC_Init();
 800321c:	f000 f828 	bl	8003270 <MX_LTDC_Init>
  MX_TIM11_Init();
 8003220:	f000 f922 	bl	8003468 <MX_TIM11_Init>
  MX_RNG_Init();
 8003224:	f000 f8d6 	bl	80033d4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  ApplicationInit();
 8003228:	f7fd fe3e 	bl	8000ea8 <ApplicationInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800322c:	f004 f8be 	bl	80073ac <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  itc_init();
 8003230:	f7fd fe48 	bl	8000ec4 <itc_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003234:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <main+0x5c>)
 8003236:	2100      	movs	r1, #0
 8003238:	480b      	ldr	r0, [pc, #44]	; (8003268 <main+0x60>)
 800323a:	f004 f901 	bl	8007440 <osThreadNew>
 800323e:	4603      	mov	r3, r0
 8003240:	4a0a      	ldr	r2, [pc, #40]	; (800326c <main+0x64>)
 8003242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003244:	2006      	movs	r0, #6
 8003246:	f001 fb7e 	bl	8004946 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 13);
 800324a:	220d      	movs	r2, #13
 800324c:	210d      	movs	r1, #13
 800324e:	2006      	movs	r0, #6
 8003250:	f001 fb5d 	bl	800490e <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003254:	201a      	movs	r0, #26
 8003256:	f001 fb76 	bl	8004946 <HAL_NVIC_EnableIRQ>
 // HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 13);
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 800325a:	f009 fd9d 	bl	800cd98 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800325e:	f004 f8c9 	bl	80073f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003262:	e7fe      	b.n	8003262 <main+0x5a>
 8003264:	08010214 	.word	0x08010214
 8003268:	08003871 	.word	0x08003871
 800326c:	2002944c 	.word	0x2002944c

08003270 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b09a      	sub	sp, #104	; 0x68
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800327a:	2234      	movs	r2, #52	; 0x34
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f00a f90b 	bl	800d49a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003284:	463b      	mov	r3, r7
 8003286:	2234      	movs	r2, #52	; 0x34
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f00a f905 	bl	800d49a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003290:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <MX_LTDC_Init+0x15c>)
 8003292:	4a4f      	ldr	r2, [pc, #316]	; (80033d0 <MX_LTDC_Init+0x160>)
 8003294:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003296:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <MX_LTDC_Init+0x15c>)
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <MX_LTDC_Init+0x15c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80032a8:	4b48      	ldr	r3, [pc, #288]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032b0:	2207      	movs	r2, #7
 80032b2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032b6:	2203      	movs	r2, #3
 80032b8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032bc:	220e      	movs	r2, #14
 80032be:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032c2:	2205      	movs	r2, #5
 80032c4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032c8:	f240 228e 	movw	r2, #654	; 0x28e
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032d0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032d8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032e0:	f240 12e7 	movw	r2, #487	; 0x1e7
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80032f6:	4b35      	ldr	r3, [pc, #212]	; (80033cc <MX_LTDC_Init+0x15c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80032fe:	4833      	ldr	r0, [pc, #204]	; (80033cc <MX_LTDC_Init+0x15c>)
 8003300:	f001 fe4e 	bl	8004fa0 <HAL_LTDC_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800330a:	f000 faba 	bl	8003882 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800331e:	2300      	movs	r3, #0
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800332a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003330:	2305      	movs	r3, #5
 8003332:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003352:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003356:	2200      	movs	r2, #0
 8003358:	4619      	mov	r1, r3
 800335a:	481c      	ldr	r0, [pc, #112]	; (80033cc <MX_LTDC_Init+0x15c>)
 800335c:	f001 fef0 	bl	8005140 <HAL_LTDC_ConfigLayer>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003366:	f000 fa8c 	bl	8003882 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800338c:	2305      	movs	r3, #5
 800338e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80033ae:	463b      	mov	r3, r7
 80033b0:	2201      	movs	r2, #1
 80033b2:	4619      	mov	r1, r3
 80033b4:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_LTDC_Init+0x15c>)
 80033b6:	f001 fec3 	bl	8005140 <HAL_LTDC_ConfigLayer>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80033c0:	f000 fa5f 	bl	8003882 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80033c4:	bf00      	nop
 80033c6:	3768      	adds	r7, #104	; 0x68
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200292f4 	.word	0x200292f4
 80033d0:	40016800 	.word	0x40016800

080033d4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_RNG_Init+0x20>)
 80033da:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <MX_RNG_Init+0x24>)
 80033dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_RNG_Init+0x20>)
 80033e0:	f002 fea8 	bl	8006134 <HAL_RNG_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80033ea:	f000 fa4a 	bl	8003882 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2002939c 	.word	0x2002939c
 80033f8:	50060800 	.word	0x50060800

080033fc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003400:	4b17      	ldr	r3, [pc, #92]	; (8003460 <MX_SPI5_Init+0x64>)
 8003402:	4a18      	ldr	r2, [pc, #96]	; (8003464 <MX_SPI5_Init+0x68>)
 8003404:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <MX_SPI5_Init+0x64>)
 8003408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800340c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <MX_SPI5_Init+0x64>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <MX_SPI5_Init+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <MX_SPI5_Init+0x64>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <MX_SPI5_Init+0x64>)
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MX_SPI5_Init+0x64>)
 8003428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_SPI5_Init+0x64>)
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <MX_SPI5_Init+0x64>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_SPI5_Init+0x64>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <MX_SPI5_Init+0x64>)
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <MX_SPI5_Init+0x64>)
 8003448:	220a      	movs	r2, #10
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800344c:	4804      	ldr	r0, [pc, #16]	; (8003460 <MX_SPI5_Init+0x64>)
 800344e:	f002 ff5c 	bl	800630a <HAL_SPI_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003458:	f000 fa13 	bl	8003882 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200293ac 	.word	0x200293ac
 8003464:	40015000 	.word	0x40015000

08003468 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <MX_TIM11_Init+0x40>)
 800346e:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <MX_TIM11_Init+0x44>)
 8003470:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <MX_TIM11_Init+0x40>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <MX_TIM11_Init+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <MX_TIM11_Init+0x40>)
 8003480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003484:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <MX_TIM11_Init+0x40>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <MX_TIM11_Init+0x40>)
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003492:	4805      	ldr	r0, [pc, #20]	; (80034a8 <MX_TIM11_Init+0x40>)
 8003494:	f003 fd18 	bl	8006ec8 <HAL_TIM_Base_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800349e:	f000 f9f0 	bl	8003882 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20029404 	.word	0x20029404
 80034ac:	40014800 	.word	0x40014800

080034b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	; 0x38
 80034b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	4bb3      	ldr	r3, [pc, #716]	; (8003798 <MX_GPIO_Init+0x2e8>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4ab2      	ldr	r2, [pc, #712]	; (8003798 <MX_GPIO_Init+0x2e8>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4bb0      	ldr	r3, [pc, #704]	; (8003798 <MX_GPIO_Init+0x2e8>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	4bac      	ldr	r3, [pc, #688]	; (8003798 <MX_GPIO_Init+0x2e8>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4aab      	ldr	r2, [pc, #684]	; (8003798 <MX_GPIO_Init+0x2e8>)
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4ba9      	ldr	r3, [pc, #676]	; (8003798 <MX_GPIO_Init+0x2e8>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	4ba5      	ldr	r3, [pc, #660]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4aa4      	ldr	r2, [pc, #656]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4ba2      	ldr	r3, [pc, #648]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	4b9e      	ldr	r3, [pc, #632]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a9d      	ldr	r2, [pc, #628]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b9b      	ldr	r3, [pc, #620]	; (8003798 <MX_GPIO_Init+0x2e8>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b97      	ldr	r3, [pc, #604]	; (8003798 <MX_GPIO_Init+0x2e8>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a96      	ldr	r2, [pc, #600]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b94      	ldr	r3, [pc, #592]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b90      	ldr	r3, [pc, #576]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a8f      	ldr	r2, [pc, #572]	; (8003798 <MX_GPIO_Init+0x2e8>)
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b8d      	ldr	r3, [pc, #564]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b89      	ldr	r3, [pc, #548]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a88      	ldr	r2, [pc, #544]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003578:	f043 0310 	orr.w	r3, r3, #16
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b86      	ldr	r3, [pc, #536]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4b82      	ldr	r3, [pc, #520]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a81      	ldr	r2, [pc, #516]	; (8003798 <MX_GPIO_Init+0x2e8>)
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <MX_GPIO_Init+0x2e8>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2116      	movs	r1, #22
 80035aa:	487c      	ldr	r0, [pc, #496]	; (800379c <MX_GPIO_Init+0x2ec>)
 80035ac:	f001 fcc4 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	487a      	ldr	r0, [pc, #488]	; (80037a0 <MX_GPIO_Init+0x2f0>)
 80035b6:	f001 fcbf 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80035c0:	4878      	ldr	r0, [pc, #480]	; (80037a4 <MX_GPIO_Init+0x2f4>)
 80035c2:	f001 fcb9 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80035c6:	2200      	movs	r2, #0
 80035c8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80035cc:	4876      	ldr	r0, [pc, #472]	; (80037a8 <MX_GPIO_Init+0x2f8>)
 80035ce:	f001 fcb3 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80035d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e4:	230c      	movs	r3, #12
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ec:	4619      	mov	r1, r3
 80035ee:	486f      	ldr	r0, [pc, #444]	; (80037ac <MX_GPIO_Init+0x2fc>)
 80035f0:	f001 f9d2 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80035f4:	2301      	movs	r3, #1
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003604:	230c      	movs	r3, #12
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360c:	4619      	mov	r1, r3
 800360e:	4863      	ldr	r0, [pc, #396]	; (800379c <MX_GPIO_Init+0x2ec>)
 8003610:	f001 f9c2 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003614:	2316      	movs	r3, #22
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003618:	2301      	movs	r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	4619      	mov	r1, r3
 800362a:	485c      	ldr	r0, [pc, #368]	; (800379c <MX_GPIO_Init+0x2ec>)
 800362c:	f001 f9b4 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003630:	2301      	movs	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003634:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003642:	4619      	mov	r1, r3
 8003644:	4856      	ldr	r0, [pc, #344]	; (80037a0 <MX_GPIO_Init+0x2f0>)
 8003646:	f001 f9a7 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800364a:	f248 0306 	movw	r3, #32774	; 0x8006
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003650:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365e:	4619      	mov	r1, r3
 8003660:	484f      	ldr	r0, [pc, #316]	; (80037a0 <MX_GPIO_Init+0x2f0>)
 8003662:	f001 f999 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800366a:	2301      	movs	r3, #1
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	4619      	mov	r1, r3
 800367c:	4848      	ldr	r0, [pc, #288]	; (80037a0 <MX_GPIO_Init+0x2f0>)
 800367e:	f001 f98b 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003682:	2320      	movs	r3, #32
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003686:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003694:	4619      	mov	r1, r3
 8003696:	4841      	ldr	r0, [pc, #260]	; (800379c <MX_GPIO_Init+0x2ec>)
 8003698:	f001 f97e 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800369c:	2304      	movs	r3, #4
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80036a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4840      	ldr	r0, [pc, #256]	; (80037b0 <MX_GPIO_Init+0x300>)
 80036b0:	f001 f972 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80036b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036c6:	230c      	movs	r3, #12
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ce:	4619      	mov	r1, r3
 80036d0:	4835      	ldr	r0, [pc, #212]	; (80037a8 <MX_GPIO_Init+0x2f8>)
 80036d2:	f001 f961 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80036d6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036e8:	230c      	movs	r3, #12
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f0:	4619      	mov	r1, r3
 80036f2:	4830      	ldr	r0, [pc, #192]	; (80037b4 <MX_GPIO_Init+0x304>)
 80036f4:	f001 f950 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80036f8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800370a:	230c      	movs	r3, #12
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003712:	4619      	mov	r1, r3
 8003714:	4826      	ldr	r0, [pc, #152]	; (80037b0 <MX_GPIO_Init+0x300>)
 8003716:	f001 f93f 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800371a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8003728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800372c:	4619      	mov	r1, r3
 800372e:	4820      	ldr	r0, [pc, #128]	; (80037b0 <MX_GPIO_Init+0x300>)
 8003730:	f001 f932 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003734:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373a:	2302      	movs	r3, #2
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003746:	230c      	movs	r3, #12
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374e:	4619      	mov	r1, r3
 8003750:	4814      	ldr	r0, [pc, #80]	; (80037a4 <MX_GPIO_Init+0x2f4>)
 8003752:	f001 f921 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003756:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375c:	2300      	movs	r3, #0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003768:	4619      	mov	r1, r3
 800376a:	480e      	ldr	r0, [pc, #56]	; (80037a4 <MX_GPIO_Init+0x2f4>)
 800376c:	f001 f914 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003770:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003776:	2301      	movs	r3, #1
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003786:	4619      	mov	r1, r3
 8003788:	4806      	ldr	r0, [pc, #24]	; (80037a4 <MX_GPIO_Init+0x2f4>)
 800378a:	f001 f905 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800378e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	e010      	b.n	80037b8 <MX_GPIO_Init+0x308>
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020000 	.word	0x40020000
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	40021800 	.word	0x40021800
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b8:	2312      	movs	r3, #18
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037c4:	2304      	movs	r3, #4
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80037c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037cc:	4619      	mov	r1, r3
 80037ce:	4824      	ldr	r0, [pc, #144]	; (8003860 <MX_GPIO_Init+0x3b0>)
 80037d0:	f001 f8e2 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80037d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037da:	2312      	movs	r3, #18
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037e6:	2304      	movs	r3, #4
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80037ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ee:	4619      	mov	r1, r3
 80037f0:	481c      	ldr	r0, [pc, #112]	; (8003864 <MX_GPIO_Init+0x3b4>)
 80037f2:	f001 f8d1 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80037f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003808:	2307      	movs	r3, #7
 800380a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003810:	4619      	mov	r1, r3
 8003812:	4814      	ldr	r0, [pc, #80]	; (8003864 <MX_GPIO_Init+0x3b4>)
 8003814:	f001 f8c0 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003818:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381e:	2301      	movs	r3, #1
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800382a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382e:	4619      	mov	r1, r3
 8003830:	480d      	ldr	r0, [pc, #52]	; (8003868 <MX_GPIO_Init+0x3b8>)
 8003832:	f001 f8b1 	bl	8004998 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003836:	2360      	movs	r3, #96	; 0x60
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003846:	230c      	movs	r3, #12
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	4806      	ldr	r0, [pc, #24]	; (800386c <MX_GPIO_Init+0x3bc>)
 8003852:	f001 f8a1 	bl	8004998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003856:	bf00      	nop
 8003858:	3738      	adds	r7, #56	; 0x38
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40020800 	.word	0x40020800
 8003864:	40020000 	.word	0x40020000
 8003868:	40021800 	.word	0x40021800
 800386c:	40020400 	.word	0x40020400

08003870 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//RunDemoForLCD();
    osDelay(10000);
 8003878:	f242 7010 	movw	r0, #10000	; 0x2710
 800387c:	f003 fe9f 	bl	80075be <osDelay>
 8003880:	e7fa      	b.n	8003878 <StartDefaultTask+0x8>

08003882 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003886:	b672      	cpsid	i
}
 8003888:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800388a:	e7fe      	b.n	800388a <Error_Handler+0x8>

0800388c <maze_generation>:
extern wall_t wall_list[];
extern waypoint_t waypoint_list[NUM_WAYPOINTS];
extern hole_t hole_list[];
extern int wall_tracker;
extern int hole_tracker;
void maze_generation(void) {
 800388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003890:	b09f      	sub	sp, #124	; 0x7c
 8003892:	af00      	add	r7, sp, #0
 8003894:	466b      	mov	r3, sp
 8003896:	607b      	str	r3, [r7, #4]
	//initialize the TRNG
	//HAL_RNG_Init(&hrng);
	uint8_t cells_x = (240 / CELL_SIZE) - 1;
 8003898:	230b      	movs	r3, #11
 800389a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t cells_y = (320 / CELL_SIZE) - 2;
 800389e:	230e      	movs	r3, #14
 80038a0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	cell_t maze[cells_x][cells_y];
 80038a4:	f897 606e 	ldrb.w	r6, [r7, #110]	; 0x6e
 80038a8:	f897 c06f 	ldrb.w	ip, [r7, #111]	; 0x6f
 80038ac:	4633      	mov	r3, r6
 80038ae:	3b01      	subs	r3, #1
 80038b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b2:	b2f3      	uxtb	r3, r6
 80038b4:	2200      	movs	r2, #0
 80038b6:	461c      	mov	r4, r3
 80038b8:	4615      	mov	r5, r2
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	1891      	adds	r1, r2, r2
 80038c0:	6339      	str	r1, [r7, #48]	; 0x30
 80038c2:	415b      	adcs	r3, r3
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
 80038c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038ca:	1911      	adds	r1, r2, r4
 80038cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80038ce:	416b      	adcs	r3, r5
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80038de:	4629      	mov	r1, r5
 80038e0:	010b      	lsls	r3, r1, #4
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80038e8:	4621      	mov	r1, r4
 80038ea:	010a      	lsls	r2, r1, #4
 80038ec:	4632      	mov	r2, r6
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	461d      	mov	r5, r3
 80038f8:	4663      	mov	r3, ip
 80038fa:	3b01      	subs	r3, #1
 80038fc:	667b      	str	r3, [r7, #100]	; 0x64
 80038fe:	b2f3      	uxtb	r3, r6
 8003900:	2200      	movs	r2, #0
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
 8003904:	657a      	str	r2, [r7, #84]	; 0x54
 8003906:	fa5f f38c 	uxtb.w	r3, ip
 800390a:	2200      	movs	r2, #0
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
 800390e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003910:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003914:	460b      	mov	r3, r1
 8003916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003918:	fb02 f203 	mul.w	r2, r2, r3
 800391c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391e:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8003922:	4601      	mov	r1, r0
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800392c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800392e:	fba2 8901 	umull	r8, r9, r2, r1
 8003932:	444b      	add	r3, r9
 8003934:	4699      	mov	r9, r3
 8003936:	4642      	mov	r2, r8
 8003938:	464b      	mov	r3, r9
 800393a:	1891      	adds	r1, r2, r2
 800393c:	6239      	str	r1, [r7, #32]
 800393e:	415b      	adcs	r3, r3
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003946:	eb12 0108 	adds.w	r1, r2, r8
 800394a:	61b9      	str	r1, [r7, #24]
 800394c:	eb43 0309 	adc.w	r3, r3, r9
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800395e:	4649      	mov	r1, r9
 8003960:	010b      	lsls	r3, r1, #4
 8003962:	4641      	mov	r1, r8
 8003964:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8003968:	4641      	mov	r1, r8
 800396a:	010a      	lsls	r2, r1, #4
 800396c:	b2f3      	uxtb	r3, r6
 800396e:	2200      	movs	r2, #0
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
 8003972:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003974:	fa5f f38c 	uxtb.w	r3, ip
 8003978:	2200      	movs	r2, #0
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
 800397c:	647a      	str	r2, [r7, #68]	; 0x44
 800397e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003982:	460b      	mov	r3, r1
 8003984:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003988:	4642      	mov	r2, r8
 800398a:	fb02 f203 	mul.w	r2, r2, r3
 800398e:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 8003992:	464b      	mov	r3, r9
 8003994:	4680      	mov	r8, r0
 8003996:	4689      	mov	r9, r1
 8003998:	4641      	mov	r1, r8
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	4642      	mov	r2, r8
 80039a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039a4:	fba2 ab01 	umull	sl, fp, r2, r1
 80039a8:	445b      	add	r3, fp
 80039aa:	469b      	mov	fp, r3
 80039ac:	4652      	mov	r2, sl
 80039ae:	465b      	mov	r3, fp
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	6139      	str	r1, [r7, #16]
 80039b4:	415b      	adcs	r3, r3
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039bc:	eb12 010a 	adds.w	r1, r2, sl
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	eb43 030b 	adc.w	r3, r3, fp
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80039d4:	4649      	mov	r1, r9
 80039d6:	010b      	lsls	r3, r1, #4
 80039d8:	4641      	mov	r1, r8
 80039da:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80039de:	4641      	mov	r1, r8
 80039e0:	010a      	lsls	r2, r1, #4
 80039e2:	4633      	mov	r3, r6
 80039e4:	4662      	mov	r2, ip
 80039e6:	fb03 f202 	mul.w	r2, r3, r2
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	3307      	adds	r3, #7
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	ebad 0d03 	sub.w	sp, sp, r3
 80039fc:	466b      	mov	r3, sp
 80039fe:	3301      	adds	r3, #1
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t random_data;
	int random_number;
	wall_tracker = 0;
 8003a06:	4b95      	ldr	r3, [pc, #596]	; (8003c5c <maze_generation+0x3d0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

	HAL_RNG_GenerateRandomNumber(&hrng, &random_data);
 8003a0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a10:	4619      	mov	r1, r3
 8003a12:	4893      	ldr	r0, [pc, #588]	; (8003c60 <maze_generation+0x3d4>)
 8003a14:	f002 fbb8 	bl	8006188 <HAL_RNG_GenerateRandomNumber>

	srand(random_data);
 8003a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f009 fbbc 	bl	800d198 <srand>


	maze[LOCATION1_X / CELL_SIZE][LOCATION1_y / CELL_SIZE].type = 's';
 8003a20:	086b      	lsrs	r3, r5, #1
 8003a22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a24:	3303      	adds	r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	2273      	movs	r2, #115	; 0x73
 8003a2c:	711a      	strb	r2, [r3, #4]
	waypoint_list[0].x = (LOCATION1_X / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	; (8003c64 <maze_generation+0x3d8>)
 8003a30:	2232      	movs	r2, #50	; 0x32
 8003a32:	801a      	strh	r2, [r3, #0]
	waypoint_list[0].y = (LOCATION1_y / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a34:	4b8b      	ldr	r3, [pc, #556]	; (8003c64 <maze_generation+0x3d8>)
 8003a36:	2232      	movs	r2, #50	; 0x32
 8003a38:	805a      	strh	r2, [r3, #2]
	waypoint_list[0].complete = 1;
 8003a3a:	4b8a      	ldr	r3, [pc, #552]	; (8003c64 <maze_generation+0x3d8>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	711a      	strb	r2, [r3, #4]

	maze[LOCATION2_X / CELL_SIZE][LOCATION2_y / CELL_SIZE].type = 'w';
 8003a40:	086b      	lsrs	r3, r5, #1
 8003a42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3304      	adds	r3, #4
 8003a52:	2277      	movs	r2, #119	; 0x77
 8003a54:	701a      	strb	r2, [r3, #0]
	waypoint_list[1].x = (LOCATION2_X / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a56:	4b83      	ldr	r3, [pc, #524]	; (8003c64 <maze_generation+0x3d8>)
 8003a58:	2282      	movs	r2, #130	; 0x82
 8003a5a:	80da      	strh	r2, [r3, #6]
	waypoint_list[1].y = (LOCATION2_y / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a5c:	4b81      	ldr	r3, [pc, #516]	; (8003c64 <maze_generation+0x3d8>)
 8003a5e:	2232      	movs	r2, #50	; 0x32
 8003a60:	811a      	strh	r2, [r3, #8]

	maze[LOCATION3_X / CELL_SIZE][LOCATION3_y / CELL_SIZE].type = 'w';
 8003a62:	086a      	lsrs	r2, r5, #1
 8003a64:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3328      	adds	r3, #40	; 0x28
 8003a72:	2277      	movs	r2, #119	; 0x77
 8003a74:	701a      	strb	r2, [r3, #0]
	waypoint_list[2].x = (LOCATION3_X / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a76:	4b7b      	ldr	r3, [pc, #492]	; (8003c64 <maze_generation+0x3d8>)
 8003a78:	2282      	movs	r2, #130	; 0x82
 8003a7a:	819a      	strh	r2, [r3, #12]
	waypoint_list[2].y = (LOCATION3_y / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a7c:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <maze_generation+0x3d8>)
 8003a7e:	2282      	movs	r2, #130	; 0x82
 8003a80:	81da      	strh	r2, [r3, #14]

	maze[LOCATION4_X / CELL_SIZE][LOCATION4_y / CELL_SIZE].type = 'w';
 8003a82:	086b      	lsrs	r3, r5, #1
 8003a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a86:	3309      	adds	r3, #9
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	2277      	movs	r2, #119	; 0x77
 8003a8e:	711a      	strb	r2, [r3, #4]
	waypoint_list[3].x = (LOCATION4_X / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a90:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <maze_generation+0x3d8>)
 8003a92:	2232      	movs	r2, #50	; 0x32
 8003a94:	825a      	strh	r2, [r3, #18]
	waypoint_list[3].y = (LOCATION4_y / CELL_SIZE) * CELL_SIZE + (CELL_SIZE / 2);
 8003a96:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <maze_generation+0x3d8>)
 8003a98:	2282      	movs	r2, #130	; 0x82
 8003a9a:	829a      	strh	r2, [r3, #20]

	LCD_Clear(0,LCD_COLOR_BACKGROUND);
 8003a9c:	f649 2182 	movw	r1, #39554	; 0x9a82
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f7ff f881 	bl	8002ba8 <LCD_Clear>
	for(int i = 0; i < cells_x; i++) {
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	677b      	str	r3, [r7, #116]	; 0x74
 8003aaa:	e270      	b.n	8003f8e <maze_generation+0x702>
		for(int j = 0; j < cells_y; j++) {
 8003aac:	2300      	movs	r3, #0
 8003aae:	673b      	str	r3, [r7, #112]	; 0x70
 8003ab0:	e264      	b.n	8003f7c <maze_generation+0x6f0>
			maze[i][j].x = i * CELL_SIZE + (CELL_SIZE / 2);
 8003ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	086b      	lsrs	r3, r5, #1
 8003ac2:	320a      	adds	r2, #10
 8003ac4:	b294      	uxth	r4, r2
 8003ac6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ac8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003aca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003acc:	fb03 f000 	mul.w	r0, r3, r0
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	4622      	mov	r2, r4
 8003ada:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			maze[i][j].y = j * CELL_SIZE + (CELL_SIZE / 2);
 8003ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	0092      	lsls	r2, r2, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	086b      	lsrs	r3, r5, #1
 8003aee:	320a      	adds	r2, #10
 8003af0:	b294      	uxth	r4, r2
 8003af2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003af4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003af6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003af8:	fb03 f000 	mul.w	r0, r3, r0
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	4403      	add	r3, r0
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	440b      	add	r3, r1
 8003b08:	4622      	mov	r2, r4
 8003b0a:	805a      	strh	r2, [r3, #2]
			random_number = rand()%100;
 8003b0c:	f009 fb72 	bl	800d1f4 <rand>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <maze_generation+0x3dc>)
 8003b14:	fb82 1203 	smull	r1, r2, r2, r3
 8003b18:	1151      	asrs	r1, r2, #5
 8003b1a:	17da      	asrs	r2, r3, #31
 8003b1c:	1a8a      	subs	r2, r1, r2
 8003b1e:	2164      	movs	r1, #100	; 0x64
 8003b20:	fb01 f202 	mul.w	r2, r1, r2
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	65fb      	str	r3, [r7, #92]	; 0x5c
			if(maze[i][j].type == 's' || maze[i][j].type == 'w') {
 8003b28:	086b      	lsrs	r3, r5, #1
 8003b2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b2e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003b30:	fb03 f000 	mul.w	r0, r3, r0
 8003b34:	4613      	mov	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	4403      	add	r3, r0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	791b      	ldrb	r3, [r3, #4]
 8003b42:	2b73      	cmp	r3, #115	; 0x73
//				maze[i][j].x = maze[i][j].x;
//				maze[i][j].y = maze[i][j].y
			}
			if(maze[i][j].type != 's' && maze[i][j].type != 'w') {
 8003b44:	086b      	lsrs	r3, r5, #1
 8003b46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b4a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003b4c:	fb03 f000 	mul.w	r0, r3, r0
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	4403      	add	r3, r0
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	440b      	add	r3, r1
 8003b5c:	791b      	ldrb	r3, [r3, #4]
 8003b5e:	2b73      	cmp	r3, #115	; 0x73
 8003b60:	f000 8209 	beq.w	8003f76 <maze_generation+0x6ea>
 8003b64:	086b      	lsrs	r3, r5, #1
 8003b66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003b6c:	fb03 f000 	mul.w	r0, r3, r0
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	4403      	add	r3, r0
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	440b      	add	r3, r1
 8003b7c:	791b      	ldrb	r3, [r3, #4]
 8003b7e:	2b77      	cmp	r3, #119	; 0x77
 8003b80:	f000 81f9 	beq.w	8003f76 <maze_generation+0x6ea>
				if(random_number < VL_WALL_PROBABILITY) {
 8003b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b86:	2b0e      	cmp	r3, #14
 8003b88:	dc72      	bgt.n	8003c70 <maze_generation+0x3e4>
					maze[i][j].type = 'v';
 8003b8a:	086b      	lsrs	r3, r5, #1
 8003b8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003b92:	fb03 f000 	mul.w	r0, r3, r0
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4403      	add	r3, r0
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	440b      	add	r3, r1
 8003ba2:	2276      	movs	r2, #118	; 0x76
 8003ba4:	711a      	strb	r2, [r3, #4]
					wall_list[wall_tracker].start_coord[0] = maze[i][j].x - (CELL_SIZE / 2);
 8003ba6:	086b      	lsrs	r3, r5, #1
 8003ba8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003baa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003bae:	fb03 f000 	mul.w	r0, r3, r0
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4403      	add	r3, r0
 8003bba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <maze_generation+0x3d0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3a0a      	subs	r2, #10
 8003bc6:	4929      	ldr	r1, [pc, #164]	; (8003c6c <maze_generation+0x3e0>)
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	440b      	add	r3, r1
 8003bcc:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].start_coord[1] = maze[i][j].y - (CELL_SIZE / 2);
 8003bce:	086b      	lsrs	r3, r5, #1
 8003bd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003bd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bd4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003bd6:	fb03 f000 	mul.w	r0, r3, r0
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	4403      	add	r3, r0
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	440b      	add	r3, r1
 8003be6:	885b      	ldrh	r3, [r3, #2]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <maze_generation+0x3d0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3a0a      	subs	r2, #10
 8003bf0:	491e      	ldr	r1, [pc, #120]	; (8003c6c <maze_generation+0x3e0>)
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[0] =   maze[i][j].x + (CELL_SIZE / 2);
 8003bfa:	086b      	lsrs	r3, r5, #1
 8003bfc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003bfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c00:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003c02:	fb03 f000 	mul.w	r0, r3, r0
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4403      	add	r3, r0
 8003c0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <maze_generation+0x3d0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	320a      	adds	r2, #10
 8003c1a:	4914      	ldr	r1, [pc, #80]	; (8003c6c <maze_generation+0x3e0>)
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	440b      	add	r3, r1
 8003c20:	3308      	adds	r3, #8
 8003c22:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[1] =   maze[i][j].y - (CELL_SIZE / 2);
 8003c24:	086b      	lsrs	r3, r5, #1
 8003c26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c2a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003c2c:	fb03 f000 	mul.w	r0, r3, r0
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	4403      	add	r3, r0
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	885b      	ldrh	r3, [r3, #2]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <maze_generation+0x3d0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3a0a      	subs	r2, #10
 8003c46:	4909      	ldr	r1, [pc, #36]	; (8003c6c <maze_generation+0x3e0>)
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	440b      	add	r3, r1
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	601a      	str	r2, [r3, #0]
					wall_tracker++;
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <maze_generation+0x3d0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	4a01      	ldr	r2, [pc, #4]	; (8003c5c <maze_generation+0x3d0>)
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e18c      	b.n	8003f76 <maze_generation+0x6ea>
 8003c5c:	200039b0 	.word	0x200039b0
 8003c60:	2002939c 	.word	0x2002939c
 8003c64:	200038cc 	.word	0x200038cc
 8003c68:	51eb851f 	.word	0x51eb851f
 8003c6c:	20002c4c 	.word	0x20002c4c
				}
				else if(random_number < VR_WALL_PROBABILITY + VL_WALL_PROBABILITY) {
 8003c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c72:	2b1d      	cmp	r3, #29
 8003c74:	dc68      	bgt.n	8003d48 <maze_generation+0x4bc>
					maze[i][j].type = 'V';
 8003c76:	086b      	lsrs	r3, r5, #1
 8003c78:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c7c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003c7e:	fb03 f000 	mul.w	r0, r3, r0
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	4403      	add	r3, r0
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	440b      	add	r3, r1
 8003c8e:	2256      	movs	r2, #86	; 0x56
 8003c90:	711a      	strb	r2, [r3, #4]
					wall_list[wall_tracker].start_coord[0] = maze[i][j].x - (CELL_SIZE / 2);
 8003c92:	086b      	lsrs	r3, r5, #1
 8003c94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c98:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003c9a:	fb03 f000 	mul.w	r0, r3, r0
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4403      	add	r3, r0
 8003ca6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b92      	ldr	r3, [pc, #584]	; (8003ef8 <maze_generation+0x66c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3a0a      	subs	r2, #10
 8003cb2:	4992      	ldr	r1, [pc, #584]	; (8003efc <maze_generation+0x670>)
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	440b      	add	r3, r1
 8003cb8:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].start_coord[1] = maze[i][j].y + (CELL_SIZE / 2);
 8003cba:	086b      	lsrs	r3, r5, #1
 8003cbc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003cbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003cc0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003cc2:	fb03 f000 	mul.w	r0, r3, r0
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	4403      	add	r3, r0
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	440b      	add	r3, r1
 8003cd2:	885b      	ldrh	r3, [r3, #2]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <maze_generation+0x66c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	320a      	adds	r2, #10
 8003cdc:	4987      	ldr	r1, [pc, #540]	; (8003efc <maze_generation+0x670>)
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[0]   = maze[i][j].x + (CELL_SIZE / 2);
 8003ce6:	086b      	lsrs	r3, r5, #1
 8003ce8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003cea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003cec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003cee:	fb03 f000 	mul.w	r0, r3, r0
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4403      	add	r3, r0
 8003cfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <maze_generation+0x66c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	320a      	adds	r2, #10
 8003d06:	497d      	ldr	r1, [pc, #500]	; (8003efc <maze_generation+0x670>)
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[1]   = maze[i][j].y + (CELL_SIZE / 2);
 8003d10:	086b      	lsrs	r3, r5, #1
 8003d12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d16:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003d18:	fb03 f000 	mul.w	r0, r3, r0
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	4403      	add	r3, r0
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	440b      	add	r3, r1
 8003d28:	885b      	ldrh	r3, [r3, #2]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <maze_generation+0x66c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	320a      	adds	r2, #10
 8003d32:	4972      	ldr	r1, [pc, #456]	; (8003efc <maze_generation+0x670>)
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	440b      	add	r3, r1
 8003d38:	330c      	adds	r3, #12
 8003d3a:	601a      	str	r2, [r3, #0]
					wall_tracker++;
 8003d3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <maze_generation+0x66c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a6d      	ldr	r2, [pc, #436]	; (8003ef8 <maze_generation+0x66c>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e116      	b.n	8003f76 <maze_generation+0x6ea>
				}
				else if(random_number < VR_WALL_PROBABILITY + VL_WALL_PROBABILITY + HB_WALL_PROBABILITY) {
 8003d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4a:	2b36      	cmp	r3, #54	; 0x36
 8003d4c:	dc68      	bgt.n	8003e20 <maze_generation+0x594>
					maze[i][j].type = 'h';
 8003d4e:	086b      	lsrs	r3, r5, #1
 8003d50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d54:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003d56:	fb03 f000 	mul.w	r0, r3, r0
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	4403      	add	r3, r0
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	440b      	add	r3, r1
 8003d66:	2268      	movs	r2, #104	; 0x68
 8003d68:	711a      	strb	r2, [r3, #4]
					wall_list[wall_tracker].start_coord[0] = maze[i][j].x - (CELL_SIZE / 2);
 8003d6a:	086b      	lsrs	r3, r5, #1
 8003d6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d70:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003d72:	fb03 f000 	mul.w	r0, r3, r0
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4403      	add	r3, r0
 8003d7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <maze_generation+0x66c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3a0a      	subs	r2, #10
 8003d8a:	495c      	ldr	r1, [pc, #368]	; (8003efc <maze_generation+0x670>)
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	440b      	add	r3, r1
 8003d90:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].start_coord[1] = maze[i][j].y - (CELL_SIZE / 2);
 8003d92:	086b      	lsrs	r3, r5, #1
 8003d94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d98:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003d9a:	fb03 f000 	mul.w	r0, r3, r0
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	4403      	add	r3, r0
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	440b      	add	r3, r1
 8003daa:	885b      	ldrh	r3, [r3, #2]
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b52      	ldr	r3, [pc, #328]	; (8003ef8 <maze_generation+0x66c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3a0a      	subs	r2, #10
 8003db4:	4951      	ldr	r1, [pc, #324]	; (8003efc <maze_generation+0x670>)
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	440b      	add	r3, r1
 8003dba:	3304      	adds	r3, #4
 8003dbc:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[0]   = maze[i][j].x - (CELL_SIZE / 2);
 8003dbe:	086b      	lsrs	r3, r5, #1
 8003dc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003dc2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003dc4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003dc6:	fb03 f000 	mul.w	r0, r3, r0
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	4403      	add	r3, r0
 8003dd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b47      	ldr	r3, [pc, #284]	; (8003ef8 <maze_generation+0x66c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3a0a      	subs	r2, #10
 8003dde:	4947      	ldr	r1, [pc, #284]	; (8003efc <maze_generation+0x670>)
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	440b      	add	r3, r1
 8003de4:	3308      	adds	r3, #8
 8003de6:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[1]   = maze[i][j].y + (CELL_SIZE / 2);
 8003de8:	086b      	lsrs	r3, r5, #1
 8003dea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003dec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003dee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003df0:	fb03 f000 	mul.w	r0, r3, r0
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	4403      	add	r3, r0
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	440b      	add	r3, r1
 8003e00:	885b      	ldrh	r3, [r3, #2]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <maze_generation+0x66c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	320a      	adds	r2, #10
 8003e0a:	493c      	ldr	r1, [pc, #240]	; (8003efc <maze_generation+0x670>)
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	440b      	add	r3, r1
 8003e10:	330c      	adds	r3, #12
 8003e12:	601a      	str	r2, [r3, #0]
					wall_tracker++;
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <maze_generation+0x66c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	4a37      	ldr	r2, [pc, #220]	; (8003ef8 <maze_generation+0x66c>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e0aa      	b.n	8003f76 <maze_generation+0x6ea>
				}
				else if(random_number < VR_WALL_PROBABILITY + VL_WALL_PROBABILITY + HB_WALL_PROBABILITY + HT_WALL_PROBABILITY) {
 8003e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e22:	2b4f      	cmp	r3, #79	; 0x4f
 8003e24:	dc6c      	bgt.n	8003f00 <maze_generation+0x674>
					maze[i][j].type = 'H';
 8003e26:	086b      	lsrs	r3, r5, #1
 8003e28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e2c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003e2e:	fb03 f000 	mul.w	r0, r3, r0
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	4403      	add	r3, r0
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	440b      	add	r3, r1
 8003e3e:	2248      	movs	r2, #72	; 0x48
 8003e40:	711a      	strb	r2, [r3, #4]
					wall_list[wall_tracker].start_coord[0] = maze[i][j].x + (CELL_SIZE / 2);
 8003e42:	086b      	lsrs	r3, r5, #1
 8003e44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e48:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003e4a:	fb03 f000 	mul.w	r0, r3, r0
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	4403      	add	r3, r0
 8003e56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <maze_generation+0x66c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	320a      	adds	r2, #10
 8003e62:	4926      	ldr	r1, [pc, #152]	; (8003efc <maze_generation+0x670>)
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	440b      	add	r3, r1
 8003e68:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].start_coord[1] = maze[i][j].y - (CELL_SIZE / 2);
 8003e6a:	086b      	lsrs	r3, r5, #1
 8003e6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e70:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003e72:	fb03 f000 	mul.w	r0, r3, r0
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4403      	add	r3, r0
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	440b      	add	r3, r1
 8003e82:	885b      	ldrh	r3, [r3, #2]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <maze_generation+0x66c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3a0a      	subs	r2, #10
 8003e8c:	491b      	ldr	r1, [pc, #108]	; (8003efc <maze_generation+0x670>)
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	440b      	add	r3, r1
 8003e92:	3304      	adds	r3, #4
 8003e94:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[0]   = maze[i][j].x + (CELL_SIZE / 2);
 8003e96:	086b      	lsrs	r3, r5, #1
 8003e98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e9c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003e9e:	fb03 f000 	mul.w	r0, r3, r0
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4403      	add	r3, r0
 8003eaa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <maze_generation+0x66c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	320a      	adds	r2, #10
 8003eb6:	4911      	ldr	r1, [pc, #68]	; (8003efc <maze_generation+0x670>)
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	440b      	add	r3, r1
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	601a      	str	r2, [r3, #0]
					wall_list[wall_tracker].end_coord[1]   = maze[i][j].y + (CELL_SIZE / 2);
 8003ec0:	086b      	lsrs	r3, r5, #1
 8003ec2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ec4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ec6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003ec8:	fb03 f000 	mul.w	r0, r3, r0
 8003ecc:	4613      	mov	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4403      	add	r3, r0
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	440b      	add	r3, r1
 8003ed8:	885b      	ldrh	r3, [r3, #2]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <maze_generation+0x66c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	320a      	adds	r2, #10
 8003ee2:	4906      	ldr	r1, [pc, #24]	; (8003efc <maze_generation+0x670>)
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	440b      	add	r3, r1
 8003ee8:	330c      	adds	r3, #12
 8003eea:	601a      	str	r2, [r3, #0]
					wall_tracker++;
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <maze_generation+0x66c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a01      	ldr	r2, [pc, #4]	; (8003ef8 <maze_generation+0x66c>)
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e03e      	b.n	8003f76 <maze_generation+0x6ea>
 8003ef8:	200039b0 	.word	0x200039b0
 8003efc:	20002c4c 	.word	0x20002c4c
				}
				else if(random_number < VR_WALL_PROBABILITY + VL_WALL_PROBABILITY + HB_WALL_PROBABILITY + HT_WALL_PROBABILITY + HOLE_PROBABILITY) {
 8003f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f02:	2b56      	cmp	r3, #86	; 0x56
 8003f04:	dc37      	bgt.n	8003f76 <maze_generation+0x6ea>
					maze[i][j].type = 'o';
 8003f06:	086b      	lsrs	r3, r5, #1
 8003f08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003f0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f0c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003f0e:	fb03 f000 	mul.w	r0, r3, r0
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	4403      	add	r3, r0
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	440b      	add	r3, r1
 8003f1e:	226f      	movs	r2, #111	; 0x6f
 8003f20:	711a      	strb	r2, [r3, #4]
					hole_list[hole_tracker].x = maze[i][j].x;
 8003f22:	086b      	lsrs	r3, r5, #1
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <maze_generation+0x71c>)
 8003f26:	6811      	ldr	r1, [r2, #0]
 8003f28:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003f2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f2c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8003f2e:	fb03 f404 	mul.w	r4, r3, r4
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	4423      	add	r3, r4
 8003f3a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <maze_generation+0x720>)
 8003f40:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
					hole_list[hole_tracker].y = maze[i][j].y;
 8003f44:	086b      	lsrs	r3, r5, #1
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <maze_generation+0x71c>)
 8003f48:	6811      	ldr	r1, [r2, #0]
 8003f4a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003f4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f4e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8003f50:	fb03 f404 	mul.w	r4, r3, r4
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	4423      	add	r3, r4
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4403      	add	r3, r0
 8003f60:	8858      	ldrh	r0, [r3, #2]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <maze_generation+0x720>)
 8003f64:	008b      	lsls	r3, r1, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	4602      	mov	r2, r0
 8003f6a:	805a      	strh	r2, [r3, #2]
					hole_tracker++;
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <maze_generation+0x71c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <maze_generation+0x71c>)
 8003f74:	6013      	str	r3, [r2, #0]
		for(int j = 0; j < cells_y; j++) {
 8003f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f78:	3301      	adds	r3, #1
 8003f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f7c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003f80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	f6ff ad95 	blt.w	8003ab2 <maze_generation+0x226>
	for(int i = 0; i < cells_x; i++) {
 8003f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f6ff ad89 	blt.w	8003aac <maze_generation+0x220>
 8003f9a:	f8d7 d004 	ldr.w	sp, [r7, #4]
//	LCD_Draw_Circle_Fill((uint16_t)hole_list[i].x, (uint16_t)hole_list[i].y, CELL_SIZE / 2, LCD_COLOR_MAGENTA);
//	}



}
 8003f9e:	bf00      	nop
 8003fa0:	377c      	adds	r7, #124	; 0x7c
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa8:	200039ac 	.word	0x200039ac
 8003fac:	200038e4 	.word	0x200038e4

08003fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_MspInit+0x54>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a11      	ldr	r2, [pc, #68]	; (8004004 <HAL_MspInit+0x54>)
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <HAL_MspInit+0x54>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_MspInit+0x54>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <HAL_MspInit+0x54>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_MspInit+0x54>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	210f      	movs	r1, #15
 8003ff2:	f06f 0001 	mvn.w	r0, #1
 8003ff6:	f000 fc8a 	bl	800490e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b09a      	sub	sp, #104	; 0x68
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004024:	2230      	movs	r2, #48	; 0x30
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f009 fa36 	bl	800d49a <memset>
  if(hltdc->Instance==LTDC)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a81      	ldr	r2, [pc, #516]	; (8004238 <HAL_LTDC_MspInit+0x230>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f040 80fa 	bne.w	800422e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800403a:	2308      	movs	r3, #8
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800403e:	2332      	movs	r3, #50	; 0x32
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004042:	2302      	movs	r3, #2
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004046:	2300      	movs	r3, #0
 8004048:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800404a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404e:	4618      	mov	r0, r3
 8004050:	f001 feb0 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800405a:	f7ff fc12 	bl	8003882 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	4b76      	ldr	r3, [pc, #472]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	4a75      	ldr	r2, [pc, #468]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406c:	6453      	str	r3, [r2, #68]	; 0x44
 800406e:	4b73      	ldr	r3, [pc, #460]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a6e      	ldr	r2, [pc, #440]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004084:	f043 0320 	orr.w	r3, r3, #32
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b6c      	ldr	r3, [pc, #432]	; (800423c <HAL_LTDC_MspInit+0x234>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_LTDC_MspInit+0x234>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a67      	ldr	r2, [pc, #412]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	4b61      	ldr	r3, [pc, #388]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a60      	ldr	r2, [pc, #384]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	4b5a      	ldr	r3, [pc, #360]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a59      	ldr	r2, [pc, #356]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6313      	str	r3, [r2, #48]	; 0x30
 80040fa:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_LTDC_MspInit+0x234>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_LTDC_MspInit+0x234>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	4a4b      	ldr	r2, [pc, #300]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	6313      	str	r3, [r2, #48]	; 0x30
 8004116:	4b49      	ldr	r3, [pc, #292]	; (800423c <HAL_LTDC_MspInit+0x234>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004128:	2302      	movs	r3, #2
 800412a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	2300      	movs	r3, #0
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004130:	2300      	movs	r3, #0
 8004132:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004134:	230e      	movs	r3, #14
 8004136:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004138:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800413c:	4619      	mov	r1, r3
 800413e:	4840      	ldr	r0, [pc, #256]	; (8004240 <HAL_LTDC_MspInit+0x238>)
 8004140:	f000 fc2a 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004144:	f641 0358 	movw	r3, #6232	; 0x1858
 8004148:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004156:	230e      	movs	r3, #14
 8004158:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800415e:	4619      	mov	r1, r3
 8004160:	4838      	ldr	r0, [pc, #224]	; (8004244 <HAL_LTDC_MspInit+0x23c>)
 8004162:	f000 fc19 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004166:	2303      	movs	r3, #3
 8004168:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004176:	2309      	movs	r3, #9
 8004178:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800417e:	4619      	mov	r1, r3
 8004180:	4831      	ldr	r0, [pc, #196]	; (8004248 <HAL_LTDC_MspInit+0x240>)
 8004182:	f000 fc09 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004186:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800418a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004194:	2300      	movs	r3, #0
 8004196:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004198:	230e      	movs	r3, #14
 800419a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041a0:	4619      	mov	r1, r3
 80041a2:	4829      	ldr	r0, [pc, #164]	; (8004248 <HAL_LTDC_MspInit+0x240>)
 80041a4:	f000 fbf8 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80041a8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80041ac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2302      	movs	r3, #2
 80041b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b6:	2300      	movs	r3, #0
 80041b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041ba:	230e      	movs	r3, #14
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041c2:	4619      	mov	r1, r3
 80041c4:	4821      	ldr	r0, [pc, #132]	; (800424c <HAL_LTDC_MspInit+0x244>)
 80041c6:	f000 fbe7 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80041ca:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d8:	2300      	movs	r3, #0
 80041da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041dc:	230e      	movs	r3, #14
 80041de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041e4:	4619      	mov	r1, r3
 80041e6:	481a      	ldr	r0, [pc, #104]	; (8004250 <HAL_LTDC_MspInit+0x248>)
 80041e8:	f000 fbd6 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80041ec:	2348      	movs	r3, #72	; 0x48
 80041ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f8:	2300      	movs	r3, #0
 80041fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041fc:	230e      	movs	r3, #14
 80041fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004204:	4619      	mov	r1, r3
 8004206:	4813      	ldr	r0, [pc, #76]	; (8004254 <HAL_LTDC_MspInit+0x24c>)
 8004208:	f000 fbc6 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800420c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004210:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004212:	2302      	movs	r3, #2
 8004214:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421a:	2300      	movs	r3, #0
 800421c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800421e:	2309      	movs	r3, #9
 8004220:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004226:	4619      	mov	r1, r3
 8004228:	4808      	ldr	r0, [pc, #32]	; (800424c <HAL_LTDC_MspInit+0x244>)
 800422a:	f000 fbb5 	bl	8004998 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800422e:	bf00      	nop
 8004230:	3768      	adds	r7, #104	; 0x68
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40016800 	.word	0x40016800
 800423c:	40023800 	.word	0x40023800
 8004240:	40021400 	.word	0x40021400
 8004244:	40020000 	.word	0x40020000
 8004248:	40020400 	.word	0x40020400
 800424c:	40021800 	.word	0x40021800
 8004250:	40020800 	.word	0x40020800
 8004254:	40020c00 	.word	0x40020c00

08004258 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <HAL_RNG_MspInit+0x48>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d115      	bne.n	8004296 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RNG_MspInit+0x4c>)
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <HAL_RNG_MspInit+0x4c>)
 8004274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004278:	6353      	str	r3, [r2, #52]	; 0x34
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_RNG_MspInit+0x4c>)
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8004286:	2200      	movs	r2, #0
 8004288:	2105      	movs	r1, #5
 800428a:	2050      	movs	r0, #80	; 0x50
 800428c:	f000 fb3f 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8004290:	2050      	movs	r0, #80	; 0x50
 8004292:	f000 fb58 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	50060800 	.word	0x50060800
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a19      	ldr	r2, [pc, #100]	; (800432c <HAL_SPI_MspInit+0x84>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d12c      	bne.n	8004324 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	4b18      	ldr	r3, [pc, #96]	; (8004330 <HAL_SPI_MspInit+0x88>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <HAL_SPI_MspInit+0x88>)
 80042d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d8:	6453      	str	r3, [r2, #68]	; 0x44
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_SPI_MspInit+0x88>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_SPI_MspInit+0x88>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <HAL_SPI_MspInit+0x88>)
 80042f0:	f043 0320 	orr.w	r3, r3, #32
 80042f4:	6313      	str	r3, [r2, #48]	; 0x30
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_SPI_MspInit+0x88>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004302:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004314:	2305      	movs	r3, #5
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4619      	mov	r1, r3
 800431e:	4805      	ldr	r0, [pc, #20]	; (8004334 <HAL_SPI_MspInit+0x8c>)
 8004320:	f000 fb3a 	bl	8004998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004324:	bf00      	nop
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40015000 	.word	0x40015000
 8004330:	40023800 	.word	0x40023800
 8004334:	40021400 	.word	0x40021400

08004338 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <HAL_SPI_MspDeInit+0x30>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10a      	bne.n	8004360 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_SPI_MspDeInit+0x34>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_SPI_MspDeInit+0x34>)
 8004350:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004354:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004356:	f44f 7160 	mov.w	r1, #896	; 0x380
 800435a:	4805      	ldr	r0, [pc, #20]	; (8004370 <HAL_SPI_MspDeInit+0x38>)
 800435c:	f000 fcc8 	bl	8004cf0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40015000 	.word	0x40015000
 800436c:	40023800 	.word	0x40023800
 8004370:	40021400 	.word	0x40021400

08004374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d115      	bne.n	80043b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <HAL_TIM_Base_MspInit+0x4c>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <HAL_TIM_Base_MspInit+0x4c>)
 8004390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004394:	6453      	str	r3, [r2, #68]	; 0x44
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_TIM_Base_MspInit+0x4c>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2105      	movs	r1, #5
 80043a6:	201a      	movs	r0, #26
 80043a8:	f000 fab1 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80043ac:	201a      	movs	r0, #26
 80043ae:	f000 faca 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40014800 	.word	0x40014800
 80043c0:	40023800 	.word	0x40023800

080043c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043c8:	e7fe      	b.n	80043c8 <NMI_Handler+0x4>

080043ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ce:	e7fe      	b.n	80043ce <HardFault_Handler+0x4>

080043d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <MemManage_Handler+0x4>

080043d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043da:	e7fe      	b.n	80043da <BusFault_Handler+0x4>

080043dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e0:	e7fe      	b.n	80043e0 <UsageFault_Handler+0x4>

080043e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043f4:	f000 f972 	bl	80046dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80043f8:	f005 fec0 	bl	800a17c <xTaskGetSchedulerState>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004402:	f006 feb1 	bl	800b168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004412:	f002 fda8 	bl	8006f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20029404 	.word	0x20029404

08004420 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <HASH_RNG_IRQHandler+0x10>)
 8004426:	f001 ff05 	bl	8006234 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2002939c 	.word	0x2002939c

08004434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return 1;
 8004438:	2301      	movs	r3, #1
}
 800443a:	4618      	mov	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_kill>:

int _kill(int pid, int sig)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800444e:	f009 f8c9 	bl	800d5e4 <__errno>
 8004452:	4603      	mov	r3, r0
 8004454:	2216      	movs	r2, #22
 8004456:	601a      	str	r2, [r3, #0]
  return -1;
 8004458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <_exit>:

void _exit (int status)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800446c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ffe7 	bl	8004444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004476:	e7fe      	b.n	8004476 <_exit+0x12>

08004478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e00a      	b.n	80044a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800448a:	f3af 8000 	nop.w
 800448e:	4601      	mov	r1, r0
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	60ba      	str	r2, [r7, #8]
 8004496:	b2ca      	uxtb	r2, r1
 8004498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	3301      	adds	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	dbf0      	blt.n	800448a <_read+0x12>
  }

  return len;
 80044a8:	687b      	ldr	r3, [r7, #4]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e009      	b.n	80044d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	60ba      	str	r2, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	3301      	adds	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	dbf1      	blt.n	80044c4 <_write+0x12>
  }
  return len;
 80044e0:	687b      	ldr	r3, [r7, #4]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <_close>:

int _close(int file)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004512:	605a      	str	r2, [r3, #4]
  return 0;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <_isatty>:

int _isatty(int file)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800455c:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <_sbrk+0x5c>)
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <_sbrk+0x60>)
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <_sbrk+0x64>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <_sbrk+0x64>)
 8004572:	4a12      	ldr	r2, [pc, #72]	; (80045bc <_sbrk+0x68>)
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <_sbrk+0x64>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d207      	bcs.n	8004594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004584:	f009 f82e 	bl	800d5e4 <__errno>
 8004588:	4603      	mov	r3, r0
 800458a:	220c      	movs	r2, #12
 800458c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004592:	e009      	b.n	80045a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <_sbrk+0x64>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <_sbrk+0x64>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <_sbrk+0x64>)
 80045a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045a6:	68fb      	ldr	r3, [r7, #12]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20030000 	.word	0x20030000
 80045b4:	00000400 	.word	0x00000400
 80045b8:	20029450 	.word	0x20029450
 80045bc:	2002ea08 	.word	0x2002ea08

080045c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <SystemInit+0x20>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	4a05      	ldr	r2, [pc, #20]	; (80045e0 <SystemInit+0x20>)
 80045cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80045e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800461c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045e8:	480d      	ldr	r0, [pc, #52]	; (8004620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045ea:	490e      	ldr	r1, [pc, #56]	; (8004624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045ec:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045f0:	e002      	b.n	80045f8 <LoopCopyDataInit>

080045f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045f6:	3304      	adds	r3, #4

080045f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045fc:	d3f9      	bcc.n	80045f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045fe:	4a0b      	ldr	r2, [pc, #44]	; (800462c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004600:	4c0b      	ldr	r4, [pc, #44]	; (8004630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004604:	e001      	b.n	800460a <LoopFillZerobss>

08004606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004608:	3204      	adds	r2, #4

0800460a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800460a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800460c:	d3fb      	bcc.n	8004606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800460e:	f7ff ffd7 	bl	80045c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004612:	f008 ffed 	bl	800d5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004616:	f7fe fdf7 	bl	8003208 <main>
  bx  lr    
 800461a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800461c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004624:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8004628:	0801034c 	.word	0x0801034c
  ldr r2, =_sbss
 800462c:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8004630:	2002ea08 	.word	0x2002ea08

08004634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004634:	e7fe      	b.n	8004634 <ADC_IRQHandler>
	...

08004638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_Init+0x40>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <HAL_Init+0x40>)
 8004642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_Init+0x40>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <HAL_Init+0x40>)
 800464e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <HAL_Init+0x40>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <HAL_Init+0x40>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004660:	2003      	movs	r0, #3
 8004662:	f000 f949 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004666:	200f      	movs	r0, #15
 8004668:	f000 f808 	bl	800467c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800466c:	f7ff fca0 	bl	8003fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023c00 	.word	0x40023c00

0800467c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <HAL_InitTick+0x54>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <HAL_InitTick+0x58>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004692:	fbb3 f3f1 	udiv	r3, r3, r1
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f961 	bl	8004962 <HAL_SYSTICK_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00e      	b.n	80046c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b0f      	cmp	r3, #15
 80046ae:	d80a      	bhi.n	80046c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046b0:	2200      	movs	r2, #0
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b8:	f000 f929 	bl	800490e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046bc:	4a06      	ldr	r2, [pc, #24]	; (80046d8 <HAL_InitTick+0x5c>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200002f4 	.word	0x200002f4
 80046d4:	200002fc 	.word	0x200002fc
 80046d8:	200002f8 	.word	0x200002f8

080046dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_IncTick+0x20>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_IncTick+0x24>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4413      	add	r3, r2
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_IncTick+0x24>)
 80046ee:	6013      	str	r3, [r2, #0]
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	200002fc 	.word	0x200002fc
 8004700:	20029454 	.word	0x20029454

08004704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return uwTick;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_GetTick+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20029454 	.word	0x20029454

0800471c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004738:	4013      	ands	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474e:	4a04      	ldr	r2, [pc, #16]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	60d3      	str	r3, [r2, #12]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <__NVIC_GetPriorityGrouping+0x18>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 0307 	and.w	r3, r3, #7
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db0b      	blt.n	80047aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <__NVIC_EnableIRQ+0x38>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2001      	movs	r0, #1
 80047a2:	fa00 f202 	lsl.w	r2, r0, r2
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db0c      	blt.n	80047e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	4907      	ldr	r1, [pc, #28]	; (80047f4 <__NVIC_ClearPendingIRQ+0x38>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2001      	movs	r0, #1
 80047de:	fa00 f202 	lsl.w	r2, r0, r2
 80047e2:	3360      	adds	r3, #96	; 0x60
 80047e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db0a      	blt.n	8004822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	490c      	ldr	r1, [pc, #48]	; (8004844 <__NVIC_SetPriority+0x4c>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	440b      	add	r3, r1
 800481c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004820:	e00a      	b.n	8004838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <__NVIC_SetPriority+0x50>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	3b04      	subs	r3, #4
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	440b      	add	r3, r1
 8004836:	761a      	strb	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000e100 	.word	0xe000e100
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf28      	it	cs
 800486a:	2304      	movcs	r3, #4
 800486c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3304      	adds	r3, #4
 8004872:	2b06      	cmp	r3, #6
 8004874:	d902      	bls.n	800487c <NVIC_EncodePriority+0x30>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3b03      	subs	r3, #3
 800487a:	e000      	b.n	800487e <NVIC_EncodePriority+0x32>
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	401a      	ands	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43d9      	mvns	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	4313      	orrs	r3, r2
         );
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d8:	f7ff ff8e 	bl	80047f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff0b 	bl	800471c <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff20 	bl	8004764 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff8e 	bl	800484c <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5d 	bl	80047f8 <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff13 	bl	8004780 <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffa2 	bl	80048b4 <SysTick_Config>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff17 	bl	80047bc <__NVIC_ClearPendingIRQ>
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e177      	b.n	8004ca4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049b4:	2201      	movs	r2, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	f040 8166 	bne.w	8004c9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d005      	beq.n	80049ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d130      	bne.n	8004a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	2203      	movs	r2, #3
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a20:	2201      	movs	r2, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 0201 	and.w	r2, r3, #1
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d017      	beq.n	8004a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2203      	movs	r2, #3
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d123      	bne.n	8004adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	08da      	lsrs	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3208      	adds	r2, #8
 8004a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	220f      	movs	r2, #15
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	08da      	lsrs	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3208      	adds	r2, #8
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0203 	and.w	r2, r3, #3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80c0 	beq.w	8004c9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	4b66      	ldr	r3, [pc, #408]	; (8004cbc <HAL_GPIO_Init+0x324>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	4a65      	ldr	r2, [pc, #404]	; (8004cbc <HAL_GPIO_Init+0x324>)
 8004b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b2e:	4b63      	ldr	r3, [pc, #396]	; (8004cbc <HAL_GPIO_Init+0x324>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b3a:	4a61      	ldr	r2, [pc, #388]	; (8004cc0 <HAL_GPIO_Init+0x328>)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	3302      	adds	r3, #2
 8004b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a58      	ldr	r2, [pc, #352]	; (8004cc4 <HAL_GPIO_Init+0x32c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d037      	beq.n	8004bd6 <HAL_GPIO_Init+0x23e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a57      	ldr	r2, [pc, #348]	; (8004cc8 <HAL_GPIO_Init+0x330>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d031      	beq.n	8004bd2 <HAL_GPIO_Init+0x23a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a56      	ldr	r2, [pc, #344]	; (8004ccc <HAL_GPIO_Init+0x334>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d02b      	beq.n	8004bce <HAL_GPIO_Init+0x236>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a55      	ldr	r2, [pc, #340]	; (8004cd0 <HAL_GPIO_Init+0x338>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d025      	beq.n	8004bca <HAL_GPIO_Init+0x232>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a54      	ldr	r2, [pc, #336]	; (8004cd4 <HAL_GPIO_Init+0x33c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01f      	beq.n	8004bc6 <HAL_GPIO_Init+0x22e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a53      	ldr	r2, [pc, #332]	; (8004cd8 <HAL_GPIO_Init+0x340>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d019      	beq.n	8004bc2 <HAL_GPIO_Init+0x22a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a52      	ldr	r2, [pc, #328]	; (8004cdc <HAL_GPIO_Init+0x344>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_GPIO_Init+0x226>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_GPIO_Init+0x348>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00d      	beq.n	8004bba <HAL_GPIO_Init+0x222>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_GPIO_Init+0x34c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <HAL_GPIO_Init+0x21e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a4f      	ldr	r2, [pc, #316]	; (8004ce8 <HAL_GPIO_Init+0x350>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <HAL_GPIO_Init+0x21a>
 8004bae:	2309      	movs	r3, #9
 8004bb0:	e012      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	e010      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	e00e      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bba:	2307      	movs	r3, #7
 8004bbc:	e00c      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bbe:	2306      	movs	r3, #6
 8004bc0:	e00a      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bc2:	2305      	movs	r3, #5
 8004bc4:	e008      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	e006      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e004      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e002      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_GPIO_Init+0x240>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f002 0203 	and.w	r2, r2, #3
 8004bde:	0092      	lsls	r2, r2, #2
 8004be0:	4093      	lsls	r3, r2
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004be8:	4935      	ldr	r1, [pc, #212]	; (8004cc0 <HAL_GPIO_Init+0x328>)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	089b      	lsrs	r3, r3, #2
 8004bee:	3302      	adds	r3, #2
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c1a:	4a34      	ldr	r2, [pc, #208]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c20:	4b32      	ldr	r3, [pc, #200]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c44:	4a29      	ldr	r2, [pc, #164]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c4a:	4b28      	ldr	r3, [pc, #160]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_GPIO_Init+0x354>)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b0f      	cmp	r3, #15
 8004ca8:	f67f ae84 	bls.w	80049b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3724      	adds	r7, #36	; 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	40020400 	.word	0x40020400
 8004ccc:	40020800 	.word	0x40020800
 8004cd0:	40020c00 	.word	0x40020c00
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40021400 	.word	0x40021400
 8004cdc:	40021800 	.word	0x40021800
 8004ce0:	40021c00 	.word	0x40021c00
 8004ce4:	40022000 	.word	0x40022000
 8004ce8:	40022400 	.word	0x40022400
 8004cec:	40013c00 	.word	0x40013c00

08004cf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e0d9      	b.n	8004ec0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f040 80c9 	bne.w	8004eba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d28:	4a6b      	ldr	r2, [pc, #428]	; (8004ed8 <HAL_GPIO_DeInit+0x1e8>)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3302      	adds	r3, #2
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	220f      	movs	r2, #15
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a63      	ldr	r2, [pc, #396]	; (8004edc <HAL_GPIO_DeInit+0x1ec>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d037      	beq.n	8004dc2 <HAL_GPIO_DeInit+0xd2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a62      	ldr	r2, [pc, #392]	; (8004ee0 <HAL_GPIO_DeInit+0x1f0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d031      	beq.n	8004dbe <HAL_GPIO_DeInit+0xce>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a61      	ldr	r2, [pc, #388]	; (8004ee4 <HAL_GPIO_DeInit+0x1f4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d02b      	beq.n	8004dba <HAL_GPIO_DeInit+0xca>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a60      	ldr	r2, [pc, #384]	; (8004ee8 <HAL_GPIO_DeInit+0x1f8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d025      	beq.n	8004db6 <HAL_GPIO_DeInit+0xc6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a5f      	ldr	r2, [pc, #380]	; (8004eec <HAL_GPIO_DeInit+0x1fc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <HAL_GPIO_DeInit+0xc2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a5e      	ldr	r2, [pc, #376]	; (8004ef0 <HAL_GPIO_DeInit+0x200>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d019      	beq.n	8004dae <HAL_GPIO_DeInit+0xbe>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a5d      	ldr	r2, [pc, #372]	; (8004ef4 <HAL_GPIO_DeInit+0x204>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_GPIO_DeInit+0xba>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a5c      	ldr	r2, [pc, #368]	; (8004ef8 <HAL_GPIO_DeInit+0x208>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00d      	beq.n	8004da6 <HAL_GPIO_DeInit+0xb6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a5b      	ldr	r2, [pc, #364]	; (8004efc <HAL_GPIO_DeInit+0x20c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <HAL_GPIO_DeInit+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a5a      	ldr	r2, [pc, #360]	; (8004f00 <HAL_GPIO_DeInit+0x210>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_GPIO_DeInit+0xae>
 8004d9a:	2309      	movs	r3, #9
 8004d9c:	e012      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004d9e:	230a      	movs	r3, #10
 8004da0:	e010      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004da2:	2308      	movs	r3, #8
 8004da4:	e00e      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004da6:	2307      	movs	r3, #7
 8004da8:	e00c      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004daa:	2306      	movs	r3, #6
 8004dac:	e00a      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004dae:	2305      	movs	r3, #5
 8004db0:	e008      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004db2:	2304      	movs	r3, #4
 8004db4:	e006      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004db6:	2303      	movs	r3, #3
 8004db8:	e004      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e002      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <HAL_GPIO_DeInit+0xd4>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	f002 0203 	and.w	r2, r2, #3
 8004dca:	0092      	lsls	r2, r2, #2
 8004dcc:	4093      	lsls	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d132      	bne.n	8004e3a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	4949      	ldr	r1, [pc, #292]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004de2:	4b48      	ldr	r3, [pc, #288]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	4946      	ldr	r1, [pc, #280]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004df0:	4b44      	ldr	r3, [pc, #272]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	43db      	mvns	r3, r3
 8004df8:	4942      	ldr	r1, [pc, #264]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004dfe:	4b41      	ldr	r3, [pc, #260]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	493f      	ldr	r1, [pc, #252]	; (8004f04 <HAL_GPIO_DeInit+0x214>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	220f      	movs	r2, #15
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <HAL_GPIO_DeInit+0x1e8>)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	3302      	adds	r3, #2
 8004e24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	482a      	ldr	r0, [pc, #168]	; (8004ed8 <HAL_GPIO_DeInit+0x1e8>)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	089b      	lsrs	r3, r3, #2
 8004e32:	400a      	ands	r2, r1
 8004e34:	3302      	adds	r3, #2
 8004e36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	2103      	movs	r1, #3
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	08da      	lsrs	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3208      	adds	r2, #8
 8004e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	08d2      	lsrs	r2, r2, #3
 8004e70:	4019      	ands	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2103      	movs	r1, #3
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	2101      	movs	r1, #1
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	2103      	movs	r1, #3
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b0f      	cmp	r3, #15
 8004ec4:	f67f af22 	bls.w	8004d0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40013800 	.word	0x40013800
 8004edc:	40020000 	.word	0x40020000
 8004ee0:	40020400 	.word	0x40020400
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020c00 	.word	0x40020c00
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40021400 	.word	0x40021400
 8004ef4:	40021800 	.word	0x40021800
 8004ef8:	40021c00 	.word	0x40021c00
 8004efc:	40022000 	.word	0x40022000
 8004f00:	40022400 	.word	0x40022400
 8004f04:	40013c00 	.word	0x40013c00

08004f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	e001      	b.n	8004f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
 8004f44:	4613      	mov	r3, r2
 8004f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f48:	787b      	ldrb	r3, [r7, #1]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f4e:	887a      	ldrh	r2, [r7, #2]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f54:	e003      	b.n	8004f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	041a      	lsls	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	619a      	str	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f7c:	887a      	ldrh	r2, [r7, #2]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4013      	ands	r3, r2
 8004f82:	041a      	lsls	r2, r3, #16
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	43d9      	mvns	r1, r3
 8004f88:	887b      	ldrh	r3, [r7, #2]
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	619a      	str	r2, [r3, #24]
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0bf      	b.n	8005132 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff f81e 	bl	8004008 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004fe2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6999      	ldr	r1, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ff8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b4a      	ldr	r3, [pc, #296]	; (800513c <HAL_LTDC_Init+0x19c>)
 8005014:	400b      	ands	r3, r1
 8005016:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b3e      	ldr	r3, [pc, #248]	; (800513c <HAL_LTDC_Init+0x19c>)
 8005042:	400b      	ands	r3, r1
 8005044:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68d9      	ldr	r1, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6919      	ldr	r1, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b33      	ldr	r3, [pc, #204]	; (800513c <HAL_LTDC_Init+0x19c>)
 8005070:	400b      	ands	r3, r1
 8005072:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6919      	ldr	r1, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6959      	ldr	r1, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b27      	ldr	r3, [pc, #156]	; (800513c <HAL_LTDC_Init+0x19c>)
 800509e:	400b      	ands	r3, r1
 80050a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6959      	ldr	r1, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0206 	orr.w	r2, r2, #6
 800510e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	f000f800 	.word	0xf000f800

08005140 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_LTDC_ConfigLayer+0x1a>
 8005156:	2302      	movs	r3, #2
 8005158:	e02c      	b.n	80051b4 <HAL_LTDC_ConfigLayer+0x74>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2134      	movs	r1, #52	; 0x34
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4614      	mov	r4, r2
 800517e:	461d      	mov	r5, r3
 8005180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800518a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f811 	bl	80051bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bdb0      	pop	{r4, r5, r7, pc}

080051bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	; 0x24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d8:	4413      	add	r3, r2
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	01db      	lsls	r3, r3, #7
 80051e8:	4413      	add	r3, r2
 80051ea:	3384      	adds	r3, #132	; 0x84
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	4611      	mov	r1, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	01d2      	lsls	r2, r2, #7
 80051f8:	440a      	add	r2, r1
 80051fa:	3284      	adds	r2, #132	; 0x84
 80051fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005200:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005212:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005214:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4619      	mov	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	01db      	lsls	r3, r3, #7
 8005220:	440b      	add	r3, r1
 8005222:	3384      	adds	r3, #132	; 0x84
 8005224:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800522a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800523a:	4413      	add	r3, r2
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	01db      	lsls	r3, r3, #7
 800524a:	4413      	add	r3, r2
 800524c:	3384      	adds	r3, #132	; 0x84
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	4611      	mov	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	01d2      	lsls	r2, r2, #7
 800525a:	440a      	add	r2, r1
 800525c:	3284      	adds	r2, #132	; 0x84
 800525e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005262:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005272:	4413      	add	r3, r2
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	01db      	lsls	r3, r3, #7
 8005280:	440b      	add	r3, r1
 8005282:	3384      	adds	r3, #132	; 0x84
 8005284:	4619      	mov	r1, r3
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	01db      	lsls	r3, r3, #7
 8005296:	4413      	add	r3, r2
 8005298:	3384      	adds	r3, #132	; 0x84
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	4611      	mov	r1, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	01d2      	lsls	r2, r2, #7
 80052a6:	440a      	add	r2, r1
 80052a8:	3284      	adds	r2, #132	; 0x84
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	01db      	lsls	r3, r3, #7
 80052ba:	4413      	add	r3, r2
 80052bc:	3384      	adds	r3, #132	; 0x84
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	061b      	lsls	r3, r3, #24
 80052e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	01db      	lsls	r3, r3, #7
 80052ec:	4413      	add	r3, r2
 80052ee:	3384      	adds	r3, #132	; 0x84
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	4413      	add	r3, r2
 80052fe:	3384      	adds	r3, #132	; 0x84
 8005300:	461a      	mov	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800530c:	461a      	mov	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	431a      	orrs	r2, r3
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4619      	mov	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	01db      	lsls	r3, r3, #7
 8005320:	440b      	add	r3, r1
 8005322:	3384      	adds	r3, #132	; 0x84
 8005324:	4619      	mov	r1, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	01db      	lsls	r3, r3, #7
 8005336:	4413      	add	r3, r2
 8005338:	3384      	adds	r3, #132	; 0x84
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	4611      	mov	r1, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	01d2      	lsls	r2, r2, #7
 8005346:	440a      	add	r2, r1
 8005348:	3284      	adds	r2, #132	; 0x84
 800534a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800534e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	01db      	lsls	r3, r3, #7
 800535a:	4413      	add	r3, r2
 800535c:	3384      	adds	r3, #132	; 0x84
 800535e:	461a      	mov	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	01db      	lsls	r3, r3, #7
 8005370:	4413      	add	r3, r2
 8005372:	3384      	adds	r3, #132	; 0x84
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	4611      	mov	r1, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	01d2      	lsls	r2, r2, #7
 8005380:	440a      	add	r2, r1
 8005382:	3284      	adds	r2, #132	; 0x84
 8005384:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	6809      	ldr	r1, [r1, #0]
 800539a:	4608      	mov	r0, r1
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	01c9      	lsls	r1, r1, #7
 80053a0:	4401      	add	r1, r0
 80053a2:	3184      	adds	r1, #132	; 0x84
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	01db      	lsls	r3, r3, #7
 80053b2:	4413      	add	r3, r2
 80053b4:	3384      	adds	r3, #132	; 0x84
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	4413      	add	r3, r2
 80053c4:	3384      	adds	r3, #132	; 0x84
 80053c6:	461a      	mov	r2, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	4413      	add	r3, r2
 80053d8:	3384      	adds	r3, #132	; 0x84
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80053ea:	2304      	movs	r3, #4
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	e01b      	b.n	8005428 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d102      	bne.n	80053fe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80053f8:	2303      	movs	r3, #3
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e014      	b.n	8005428 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b04      	cmp	r3, #4
 8005404:	d00b      	beq.n	800541e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800540a:	2b02      	cmp	r3, #2
 800540c:	d007      	beq.n	800541e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005412:	2b03      	cmp	r3, #3
 8005414:	d003      	beq.n	800541e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800541a:	2b07      	cmp	r3, #7
 800541c:	d102      	bne.n	8005424 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800541e:	2302      	movs	r3, #2
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e001      	b.n	8005428 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005424:	2301      	movs	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	01db      	lsls	r3, r3, #7
 8005432:	4413      	add	r3, r2
 8005434:	3384      	adds	r3, #132	; 0x84
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	4611      	mov	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	01d2      	lsls	r2, r2, #7
 8005442:	440a      	add	r2, r1
 8005444:	3284      	adds	r2, #132	; 0x84
 8005446:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800544a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1acb      	subs	r3, r1, r3
 8005462:	69f9      	ldr	r1, [r7, #28]
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	6809      	ldr	r1, [r1, #0]
 800546e:	4608      	mov	r0, r1
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	01c9      	lsls	r1, r1, #7
 8005474:	4401      	add	r1, r0
 8005476:	3184      	adds	r1, #132	; 0x84
 8005478:	4313      	orrs	r3, r2
 800547a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	; 0x84
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	4611      	mov	r1, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	01d2      	lsls	r2, r2, #7
 8005496:	440a      	add	r2, r1
 8005498:	3284      	adds	r2, #132	; 0x84
 800549a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	4413      	add	r3, r2
 80054b0:	3384      	adds	r3, #132	; 0x84
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	01db      	lsls	r3, r3, #7
 80054c4:	4413      	add	r3, r2
 80054c6:	3384      	adds	r3, #132	; 0x84
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	4611      	mov	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	01d2      	lsls	r2, r2, #7
 80054d4:	440a      	add	r2, r1
 80054d6:	3284      	adds	r2, #132	; 0x84
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6013      	str	r3, [r2, #0]
}
 80054de:	bf00      	nop
 80054e0:	3724      	adds	r7, #36	; 0x24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e267      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d075      	beq.n	80055f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800550a:	4b88      	ldr	r3, [pc, #544]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b04      	cmp	r3, #4
 8005514:	d00c      	beq.n	8005530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005516:	4b85      	ldr	r3, [pc, #532]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800551e:	2b08      	cmp	r3, #8
 8005520:	d112      	bne.n	8005548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005522:	4b82      	ldr	r3, [pc, #520]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552e:	d10b      	bne.n	8005548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005530:	4b7e      	ldr	r3, [pc, #504]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05b      	beq.n	80055f4 <HAL_RCC_OscConfig+0x108>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d157      	bne.n	80055f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e242      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005550:	d106      	bne.n	8005560 <HAL_RCC_OscConfig+0x74>
 8005552:	4b76      	ldr	r3, [pc, #472]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a75      	ldr	r2, [pc, #468]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e01d      	b.n	800559c <HAL_RCC_OscConfig+0xb0>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x98>
 800556a:	4b70      	ldr	r3, [pc, #448]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6f      	ldr	r2, [pc, #444]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	4b6d      	ldr	r3, [pc, #436]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6c      	ldr	r2, [pc, #432]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800557c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e00b      	b.n	800559c <HAL_RCC_OscConfig+0xb0>
 8005584:	4b69      	ldr	r3, [pc, #420]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a68      	ldr	r2, [pc, #416]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	4b66      	ldr	r3, [pc, #408]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a65      	ldr	r2, [pc, #404]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7ff f8ae 	bl	8004704 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ac:	f7ff f8aa 	bl	8004704 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e207      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055be:	4b5b      	ldr	r3, [pc, #364]	; (800572c <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0xc0>
 80055ca:	e014      	b.n	80055f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7ff f89a 	bl	8004704 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d4:	f7ff f896 	bl	8004704 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	; 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e1f3      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e6:	4b51      	ldr	r3, [pc, #324]	; (800572c <HAL_RCC_OscConfig+0x240>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0xe8>
 80055f2:	e000      	b.n	80055f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d063      	beq.n	80056ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005602:	4b4a      	ldr	r3, [pc, #296]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005616:	2b08      	cmp	r3, #8
 8005618:	d11c      	bne.n	8005654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800561a:	4b44      	ldr	r3, [pc, #272]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d116      	bne.n	8005654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_RCC_OscConfig+0x152>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d001      	beq.n	800563e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e1c7      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563e:	4b3b      	ldr	r3, [pc, #236]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	4937      	ldr	r1, [pc, #220]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005652:	e03a      	b.n	80056ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d020      	beq.n	800569e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800565c:	4b34      	ldr	r3, [pc, #208]	; (8005730 <HAL_RCC_OscConfig+0x244>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005662:	f7ff f84f 	bl	8004704 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800566a:	f7ff f84b 	bl	8004704 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e1a8      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005688:	4b28      	ldr	r3, [pc, #160]	; (800572c <HAL_RCC_OscConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4925      	ldr	r1, [pc, #148]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005698:	4313      	orrs	r3, r2
 800569a:	600b      	str	r3, [r1, #0]
 800569c:	e015      	b.n	80056ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <HAL_RCC_OscConfig+0x244>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7ff f82e 	bl	8004704 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ac:	f7ff f82a 	bl	8004704 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e187      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d036      	beq.n	8005744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <HAL_RCC_OscConfig+0x248>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7ff f80e 	bl	8004704 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ec:	f7ff f80a 	bl	8004704 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e167      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCC_OscConfig+0x240>)
 8005700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0x200>
 800570a:	e01b      	b.n	8005744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_RCC_OscConfig+0x248>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005712:	f7fe fff7 	bl	8004704 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005718:	e00e      	b.n	8005738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800571a:	f7fe fff3 	bl	8004704 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d907      	bls.n	8005738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e150      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
 800572c:	40023800 	.word	0x40023800
 8005730:	42470000 	.word	0x42470000
 8005734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005738:	4b88      	ldr	r3, [pc, #544]	; (800595c <HAL_RCC_OscConfig+0x470>)
 800573a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ea      	bne.n	800571a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8097 	beq.w	8005880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005756:	4b81      	ldr	r3, [pc, #516]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10f      	bne.n	8005782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	4b7d      	ldr	r3, [pc, #500]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	4a7c      	ldr	r2, [pc, #496]	; (800595c <HAL_RCC_OscConfig+0x470>)
 800576c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005770:	6413      	str	r3, [r2, #64]	; 0x40
 8005772:	4b7a      	ldr	r3, [pc, #488]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005782:	4b77      	ldr	r3, [pc, #476]	; (8005960 <HAL_RCC_OscConfig+0x474>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d118      	bne.n	80057c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800578e:	4b74      	ldr	r3, [pc, #464]	; (8005960 <HAL_RCC_OscConfig+0x474>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a73      	ldr	r2, [pc, #460]	; (8005960 <HAL_RCC_OscConfig+0x474>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579a:	f7fe ffb3 	bl	8004704 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fe ffaf 	bl	8004704 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e10c      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b4:	4b6a      	ldr	r3, [pc, #424]	; (8005960 <HAL_RCC_OscConfig+0x474>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d106      	bne.n	80057d6 <HAL_RCC_OscConfig+0x2ea>
 80057c8:	4b64      	ldr	r3, [pc, #400]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	4a63      	ldr	r2, [pc, #396]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70
 80057d4:	e01c      	b.n	8005810 <HAL_RCC_OscConfig+0x324>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b05      	cmp	r3, #5
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCC_OscConfig+0x30c>
 80057de:	4b5f      	ldr	r3, [pc, #380]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a5e      	ldr	r2, [pc, #376]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057e4:	f043 0304 	orr.w	r3, r3, #4
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	4b5c      	ldr	r3, [pc, #368]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a5b      	ldr	r2, [pc, #364]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	e00b      	b.n	8005810 <HAL_RCC_OscConfig+0x324>
 80057f8:	4b58      	ldr	r3, [pc, #352]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	4a57      	ldr	r2, [pc, #348]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	6713      	str	r3, [r2, #112]	; 0x70
 8005804:	4b55      	ldr	r3, [pc, #340]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	4a54      	ldr	r2, [pc, #336]	; (800595c <HAL_RCC_OscConfig+0x470>)
 800580a:	f023 0304 	bic.w	r3, r3, #4
 800580e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d015      	beq.n	8005844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fe ff74 	bl	8004704 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581e:	e00a      	b.n	8005836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005820:	f7fe ff70 	bl	8004704 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	; 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0cb      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005836:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0ee      	beq.n	8005820 <HAL_RCC_OscConfig+0x334>
 8005842:	e014      	b.n	800586e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005844:	f7fe ff5e 	bl	8004704 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584c:	f7fe ff5a 	bl	8004704 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e0b5      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005862:	4b3e      	ldr	r3, [pc, #248]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ee      	bne.n	800584c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d105      	bne.n	8005880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005874:	4b39      	ldr	r3, [pc, #228]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	4a38      	ldr	r2, [pc, #224]	; (800595c <HAL_RCC_OscConfig+0x470>)
 800587a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80a1 	beq.w	80059cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800588a:	4b34      	ldr	r3, [pc, #208]	; (800595c <HAL_RCC_OscConfig+0x470>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b08      	cmp	r3, #8
 8005894:	d05c      	beq.n	8005950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d141      	bne.n	8005922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589e:	4b31      	ldr	r3, [pc, #196]	; (8005964 <HAL_RCC_OscConfig+0x478>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fe ff2e 	bl	8004704 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fe ff2a 	bl	8004704 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e087      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	4b27      	ldr	r3, [pc, #156]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	3b01      	subs	r3, #1
 80058e4:	041b      	lsls	r3, r3, #16
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	491b      	ldr	r1, [pc, #108]	; (800595c <HAL_RCC_OscConfig+0x470>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_RCC_OscConfig+0x478>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fa:	f7fe ff03 	bl	8004704 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005902:	f7fe feff 	bl	8004704 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e05c      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x416>
 8005920:	e054      	b.n	80059cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <HAL_RCC_OscConfig+0x478>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005928:	f7fe feec 	bl	8004704 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005930:	f7fe fee8 	bl	8004704 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e045      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <HAL_RCC_OscConfig+0x470>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x444>
 800594e:	e03d      	b.n	80059cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e038      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
 800595c:	40023800 	.word	0x40023800
 8005960:	40007000 	.word	0x40007000
 8005964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <HAL_RCC_OscConfig+0x4ec>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d028      	beq.n	80059c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005980:	429a      	cmp	r2, r3
 8005982:	d121      	bne.n	80059c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d11a      	bne.n	80059c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800599e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d111      	bne.n	80059c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	3b01      	subs	r3, #1
 80059b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d107      	bne.n	80059c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800

080059dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0cc      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f0:	4b68      	ldr	r3, [pc, #416]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d90c      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b65      	ldr	r3, [pc, #404]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b63      	ldr	r3, [pc, #396]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0b8      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a30:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a58      	ldr	r2, [pc, #352]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a52      	ldr	r2, [pc, #328]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a54:	4b50      	ldr	r3, [pc, #320]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	494d      	ldr	r1, [pc, #308]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d044      	beq.n	8005afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7a:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d119      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e07f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e06f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aaa:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e067      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aba:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 0203 	bic.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4934      	ldr	r1, [pc, #208]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005acc:	f7fe fe1a 	bl	8004704 <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad4:	f7fe fe16 	bl	8004704 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e04f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 020c 	and.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1eb      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d20c      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e032      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4916      	ldr	r1, [pc, #88]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	490e      	ldr	r1, [pc, #56]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b62:	f000 f821 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	490a      	ldr	r1, [pc, #40]	; (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005b74:	5ccb      	ldrb	r3, [r1, r3]
 8005b76:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fd7a 	bl	800467c <HAL_InitTick>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023c00 	.word	0x40023c00
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	08010238 	.word	0x08010238
 8005ba0:	200002f4 	.word	0x200002f4
 8005ba4:	200002f8 	.word	0x200002f8

08005ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bac:	b094      	sub	sp, #80	; 0x50
 8005bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb8:	2300      	movs	r3, #0
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc0:	4b79      	ldr	r3, [pc, #484]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d00d      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x40>
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	f200 80e1 	bhi.w	8005d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x34>
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bda:	e0db      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b73      	ldr	r3, [pc, #460]	; (8005dac <HAL_RCC_GetSysClockFreq+0x204>)
 8005bde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005be0:	e0db      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005be2:	4b73      	ldr	r3, [pc, #460]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005be6:	e0d8      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be8:	4b6f      	ldr	r3, [pc, #444]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bf2:	4b6d      	ldr	r3, [pc, #436]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d063      	beq.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bfe:	4b6a      	ldr	r3, [pc, #424]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	099b      	lsrs	r3, r3, #6
 8005c04:	2200      	movs	r2, #0
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
 8005c12:	2300      	movs	r3, #0
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	f04f 0000 	mov.w	r0, #0
 8005c22:	f04f 0100 	mov.w	r1, #0
 8005c26:	0159      	lsls	r1, r3, #5
 8005c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c2c:	0150      	lsls	r0, r2, #5
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4621      	mov	r1, r4
 8005c34:	1a51      	subs	r1, r2, r1
 8005c36:	6139      	str	r1, [r7, #16]
 8005c38:	4629      	mov	r1, r5
 8005c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	018b      	lsls	r3, r1, #6
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c56:	4651      	mov	r1, sl
 8005c58:	018a      	lsls	r2, r1, #6
 8005c5a:	4651      	mov	r1, sl
 8005c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8005c60:	4659      	mov	r1, fp
 8005c62:	eb63 0901 	sbc.w	r9, r3, r1
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7a:	4690      	mov	r8, r2
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	4623      	mov	r3, r4
 8005c80:	eb18 0303 	adds.w	r3, r8, r3
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	462b      	mov	r3, r5
 8005c88:	eb49 0303 	adc.w	r3, r9, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	024b      	lsls	r3, r1, #9
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	024a      	lsls	r2, r1, #9
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cae:	2200      	movs	r2, #0
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb8:	f7fa ff78 	bl	8000bac <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc4:	e058      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc6:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
 8005cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	0159      	lsls	r1, r3, #5
 8005cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf2:	0150      	lsls	r0, r2, #5
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cfe:	4649      	mov	r1, r9
 8005d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d18:	ebb2 040a 	subs.w	r4, r2, sl
 8005d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	00eb      	lsls	r3, r5, #3
 8005d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d2e:	00e2      	lsls	r2, r4, #3
 8005d30:	4614      	mov	r4, r2
 8005d32:	461d      	mov	r5, r3
 8005d34:	4643      	mov	r3, r8
 8005d36:	18e3      	adds	r3, r4, r3
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	eb45 0303 	adc.w	r3, r5, r3
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d4e:	4629      	mov	r1, r5
 8005d50:	028b      	lsls	r3, r1, #10
 8005d52:	4621      	mov	r1, r4
 8005d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d58:	4621      	mov	r1, r4
 8005d5a:	028a      	lsls	r2, r1, #10
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d62:	2200      	movs	r2, #0
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	61fa      	str	r2, [r7, #28]
 8005d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d6c:	f7fa ff1e 	bl	8000bac <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4613      	mov	r3, r2
 8005d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	3301      	adds	r3, #1
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d92:	e002      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_GetSysClockFreq+0x204>)
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3750      	adds	r7, #80	; 0x50
 8005da0:	46bd      	mov	sp, r7
 8005da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800
 8005dac:	00f42400 	.word	0x00f42400
 8005db0:	007a1200 	.word	0x007a1200

08005db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d075      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005de8:	4b91      	ldr	r3, [pc, #580]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dee:	f7fe fc89 	bl	8004704 <HAL_GetTick>
 8005df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005df6:	f7fe fc85 	bl	8004704 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e189      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e08:	4b8a      	ldr	r3, [pc, #552]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f0      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	019a      	lsls	r2, r3, #6
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	071b      	lsls	r3, r3, #28
 8005e2c:	4981      	ldr	r1, [pc, #516]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01f      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e40:	4b7c      	ldr	r3, [pc, #496]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e46:	0f1b      	lsrs	r3, r3, #28
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	019a      	lsls	r2, r3, #6
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	061b      	lsls	r3, r3, #24
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	071b      	lsls	r3, r3, #28
 8005e60:	4974      	ldr	r1, [pc, #464]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e68:	4b72      	ldr	r3, [pc, #456]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6e:	f023 021f 	bic.w	r2, r3, #31
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	496e      	ldr	r1, [pc, #440]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	019a      	lsls	r2, r3, #6
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	061b      	lsls	r3, r3, #24
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	071b      	lsls	r3, r3, #28
 8005ea0:	4964      	ldr	r1, [pc, #400]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ea8:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eae:	f7fe fc29 	bl	8004704 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eb6:	f7fe fc25 	bl	8004704 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e129      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ec8:	4b5a      	ldr	r3, [pc, #360]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d079      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eec:	4b52      	ldr	r3, [pc, #328]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ef2:	f7fe fc07 	bl	8004704 <HAL_GetTick>
 8005ef6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005efa:	f7fe fc03 	bl	8004704 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e107      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f0c:	4b49      	ldr	r3, [pc, #292]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f18:	d0ef      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f26:	4b43      	ldr	r3, [pc, #268]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2c:	0f1b      	lsrs	r3, r3, #28
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	019a      	lsls	r2, r3, #6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	493b      	ldr	r1, [pc, #236]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	4934      	ldr	r1, [pc, #208]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01e      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f74:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	0e1b      	lsrs	r3, r3, #24
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	019a      	lsls	r2, r3, #6
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	061b      	lsls	r3, r3, #24
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	071b      	lsls	r3, r3, #28
 8005f94:	4927      	ldr	r1, [pc, #156]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f9c:	4b25      	ldr	r3, [pc, #148]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	4922      	ldr	r1, [pc, #136]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fb2:	4b21      	ldr	r3, [pc, #132]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb8:	f7fe fba4 	bl	8004704 <HAL_GetTick>
 8005fbc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fc0:	f7fe fba0 	bl	8004704 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0a4      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fd2:	4b18      	ldr	r3, [pc, #96]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fde:	d1ef      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 808b 	beq.w	8006104 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4a0f      	ldr	r2, [pc, #60]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a0b      	ldr	r2, [pc, #44]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006014:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006016:	f7fe fb75 	bl	8004704 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800601c:	e010      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800601e:	f7fe fb71 	bl	8004704 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d909      	bls.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e075      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006030:	42470068 	.word	0x42470068
 8006034:	40023800 	.word	0x40023800
 8006038:	42470070 	.word	0x42470070
 800603c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006040:	4b38      	ldr	r3, [pc, #224]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0e8      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800604c:	4b36      	ldr	r3, [pc, #216]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006054:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d02f      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	429a      	cmp	r2, r3
 8006068:	d028      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006074:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800607a:	4b2c      	ldr	r3, [pc, #176]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006086:	4b28      	ldr	r3, [pc, #160]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d114      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006092:	f7fe fb37 	bl	8004704 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006098:	e00a      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800609a:	f7fe fb33 	bl	8004704 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e035      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b0:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0ee      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c8:	d10d      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80060ca:	4b17      	ldr	r3, [pc, #92]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060de:	4912      	ldr	r1, [pc, #72]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	608b      	str	r3, [r1, #8]
 80060e4:	e005      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060f0:	6093      	str	r3, [r2, #8]
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fe:	490a      	ldr	r1, [pc, #40]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006100:	4313      	orrs	r3, r2
 8006102:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006118:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40007000 	.word	0x40007000
 8006128:	40023800 	.word	0x40023800
 800612c:	42470e40 	.word	0x42470e40
 8006130:	424711e0 	.word	0x424711e0

08006134 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e01c      	b.n	8006180 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	795b      	ldrb	r3, [r3, #5]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe f87e 	bl	8004258 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0204 	orr.w	r2, r2, #4
 8006170:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	791b      	ldrb	r3, [r3, #4]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_RNG_GenerateRandomNumber+0x1a>
 800619e:	2302      	movs	r3, #2
 80061a0:	e044      	b.n	800622c <HAL_RNG_GenerateRandomNumber+0xa4>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	795b      	ldrb	r3, [r3, #5]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d133      	bne.n	800621a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061b8:	f7fe faa4 	bl	8004704 <HAL_GetTick>
 80061bc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80061be:	e018      	b.n	80061f2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061c0:	f7fe faa0 	bl	8004704 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d911      	bls.n	80061f2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d00a      	beq.n	80061f2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e01c      	b.n	800622c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d1df      	bne.n	80061c0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	715a      	strb	r2, [r3, #5]
 8006218:	e004      	b.n	8006224 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	711a      	strb	r2, [r3, #4]

  return status;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b20      	cmp	r3, #32
 800624c:	d105      	bne.n	800625a <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2210      	movs	r2, #16
 8006252:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8006254:	2301      	movs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e00b      	b.n	8006272 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d104      	bne.n	8006272 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2208      	movs	r2, #8
 800626c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800626e:	2301      	movs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10b      	bne.n	8006290 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2204      	movs	r2, #4
 800627c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f839 	bl	80062f6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800628c:	605a      	str	r2, [r3, #4]

    return;
 800628e:	e024      	b.n	80062da <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b01      	cmp	r3, #1
 800629c:	d11d      	bne.n	80062da <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0208 	bic.w	r2, r2, #8
 80062ac:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	795b      	ldrb	r3, [r3, #5]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d00b      	beq.n	80062da <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f803 	bl	80062e0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e07b      	b.n	8006414 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d108      	bne.n	8006336 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632c:	d009      	beq.n	8006342 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	61da      	str	r2, [r3, #28]
 8006334:	e005      	b.n	8006342 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fd ffa3 	bl	80042a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006378:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	ea42 0103 	orr.w	r1, r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	f003 0104 	and.w	r1, r3, #4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0210 	and.w	r2, r3, #16
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69da      	ldr	r2, [r3, #28]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006402:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e01a      	b.n	8006464 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fd ff76 	bl	8004338 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_SPI_Transmit+0x22>
 800648a:	2302      	movs	r3, #2
 800648c:	e126      	b.n	80066dc <HAL_SPI_Transmit+0x270>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006496:	f7fe f935 	bl	8004704 <HAL_GetTick>
 800649a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064b0:	e10b      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Transmit+0x52>
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064c2:	e102      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2203      	movs	r2, #3
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650a:	d10f      	bne.n	800652c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800652a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b40      	cmp	r3, #64	; 0x40
 8006538:	d007      	beq.n	800654a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006552:	d14b      	bne.n	80065ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_SPI_Transmit+0xf6>
 800655c:	8afb      	ldrh	r3, [r7, #22]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d13e      	bne.n	80065e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006586:	e02b      	b.n	80065e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b02      	cmp	r3, #2
 8006594:	d112      	bne.n	80065bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065ba:	e011      	b.n	80065e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065bc:	f7fe f8a2 	bl	8004704 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d803      	bhi.n	80065d4 <HAL_SPI_Transmit+0x168>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d2:	d102      	bne.n	80065da <HAL_SPI_Transmit+0x16e>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065de:	e074      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ce      	bne.n	8006588 <HAL_SPI_Transmit+0x11c>
 80065ea:	e04c      	b.n	8006686 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_SPI_Transmit+0x18e>
 80065f4:	8afb      	ldrh	r3, [r7, #22]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d140      	bne.n	800667c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006620:	e02c      	b.n	800667c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d113      	bne.n	8006658 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	86da      	strh	r2, [r3, #54]	; 0x36
 8006656:	e011      	b.n	800667c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006658:	f7fe f854 	bl	8004704 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d803      	bhi.n	8006670 <HAL_SPI_Transmit+0x204>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800666e:	d102      	bne.n	8006676 <HAL_SPI_Transmit+0x20a>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800667a:	e026      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cd      	bne.n	8006622 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fbda 	bl	8006e44 <SPI_EndRxTxTransaction>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e000      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80066c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066da:	7ffb      	ldrb	r3, [r7, #31]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006700:	d112      	bne.n	8006728 <HAL_SPI_Receive+0x44>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10e      	bne.n	8006728 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2204      	movs	r2, #4
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f8f1 	bl	8006906 <HAL_SPI_TransmitReceive>
 8006724:	4603      	mov	r3, r0
 8006726:	e0ea      	b.n	80068fe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_SPI_Receive+0x52>
 8006732:	2302      	movs	r3, #2
 8006734:	e0e3      	b.n	80068fe <HAL_SPI_Receive+0x21a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673e:	f7fd ffe1 	bl	8004704 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d002      	beq.n	8006756 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006750:	2302      	movs	r3, #2
 8006752:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006754:	e0ca      	b.n	80068ec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_SPI_Receive+0x7e>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006766:	e0c1      	b.n	80068ec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2204      	movs	r2, #4
 800676c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	88fa      	ldrh	r2, [r7, #6]
 8006786:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ae:	d10f      	bne.n	80067d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d007      	beq.n	80067ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d162      	bne.n	80068bc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067f6:	e02e      	b.n	8006856 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d115      	bne.n	8006832 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f103 020c 	add.w	r2, r3, #12
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006830:	e011      	b.n	8006856 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fd ff67 	bl	8004704 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_Receive+0x166>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006848:	d102      	bne.n	8006850 <HAL_SPI_Receive+0x16c>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006854:	e04a      	b.n	80068ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1cb      	bne.n	80067f8 <HAL_SPI_Receive+0x114>
 8006860:	e031      	b.n	80068c6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d113      	bne.n	8006898 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	b292      	uxth	r2, r2
 800687c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	1c9a      	adds	r2, r3, #2
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006896:	e011      	b.n	80068bc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006898:	f7fd ff34 	bl	8004704 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d803      	bhi.n	80068b0 <HAL_SPI_Receive+0x1cc>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ae:	d102      	bne.n	80068b6 <HAL_SPI_Receive+0x1d2>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068ba:	e017      	b.n	80068ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1cd      	bne.n	8006862 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fa54 	bl	8006d78 <SPI_EndRxTransaction>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
 80068e8:	e000      	b.n	80068ec <HAL_SPI_Receive+0x208>
  }

error :
 80068ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08c      	sub	sp, #48	; 0x30
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006914:	2301      	movs	r3, #1
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_SPI_TransmitReceive+0x26>
 8006928:	2302      	movs	r3, #2
 800692a:	e18a      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x33c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006934:	f7fd fee6 	bl	8004704 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800694e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006952:	2b01      	cmp	r3, #1
 8006954:	d00f      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x70>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695c:	d107      	bne.n	800696e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <HAL_SPI_TransmitReceive+0x68>
 8006966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696a:	2b04      	cmp	r3, #4
 800696c:	d003      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800696e:	2302      	movs	r3, #2
 8006970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006974:	e15b      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x82>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x82>
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800698e:	e14e      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b04      	cmp	r3, #4
 800699a:	d003      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2205      	movs	r2, #5
 80069a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	887a      	ldrh	r2, [r7, #2]
 80069b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	887a      	ldrh	r2, [r7, #2]
 80069ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d007      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a00:	d178      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x10a>
 8006a0a:	8b7b      	ldrh	r3, [r7, #26]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d166      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a34:	e053      	b.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11b      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d113      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	1c9a      	adds	r2, r3, #2
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d119      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x1b8>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d014      	beq.n	8006abe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aba:	2301      	movs	r3, #1
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006abe:	f7fd fe21 	bl	8004704 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d807      	bhi.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad4:	d003      	beq.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006adc:	e0a7      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1a6      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x130>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1a1      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x130>
 8006af2:	e07c      	b.n	8006bee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x1fc>
 8006afc:	8b7b      	ldrh	r3, [r7, #26]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d16b      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	7812      	ldrb	r2, [r2, #0]
 8006b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b28:	e057      	b.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d11c      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d017      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d114      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d119      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x2ae>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb4:	f7fd fda6 	bl	8004704 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d803      	bhi.n	8006bcc <HAL_SPI_TransmitReceive+0x2c6>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bca:	d102      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x2cc>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bd8:	e029      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1a2      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x224>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d19d      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f926 	bl	8006e44 <SPI_EndRxTxTransaction>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d006      	beq.n	8006c0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c0a:	e010      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	e000      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3730      	adds	r7, #48	; 0x30
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c58:	b2db      	uxtb	r3, r3
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	4613      	mov	r3, r2
 8006c76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c78:	f7fd fd44 	bl	8004704 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	4413      	add	r3, r2
 8006c86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c88:	f7fd fd3c 	bl	8004704 <HAL_GetTick>
 8006c8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c8e:	4b39      	ldr	r3, [pc, #228]	; (8006d74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	015b      	lsls	r3, r3, #5
 8006c94:	0d1b      	lsrs	r3, r3, #20
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	fb02 f303 	mul.w	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c9e:	e054      	b.n	8006d4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca6:	d050      	beq.n	8006d4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ca8:	f7fd fd2c 	bl	8004704 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d902      	bls.n	8006cbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d13d      	bne.n	8006d3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ccc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd6:	d111      	bne.n	8006cfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	d004      	beq.n	8006cec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cea:	d107      	bne.n	8006cfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d04:	d10f      	bne.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e017      	b.n	8006d6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4013      	ands	r3, r2
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d19b      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200002f4 	.word	0x200002f4

08006d78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8c:	d111      	bne.n	8006db2 <SPI_EndRxTransaction+0x3a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d96:	d004      	beq.n	8006da2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da0:	d107      	bne.n	8006db2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dba:	d12a      	bne.n	8006e12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc4:	d012      	beq.n	8006dec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff ff49 	bl	8006c68 <SPI_WaitFlagStateUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d02d      	beq.n	8006e38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	f043 0220 	orr.w	r2, r3, #32
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e026      	b.n	8006e3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2101      	movs	r1, #1
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff ff36 	bl	8006c68 <SPI_WaitFlagStateUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01a      	beq.n	8006e38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f043 0220 	orr.w	r2, r3, #32
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e013      	b.n	8006e3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff ff23 	bl	8006c68 <SPI_WaitFlagStateUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e000      	b.n	8006e3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e50:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <SPI_EndRxTxTransaction+0x7c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <SPI_EndRxTxTransaction+0x80>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	0d5b      	lsrs	r3, r3, #21
 8006e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e6e:	d112      	bne.n	8006e96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fef4 	bl	8006c68 <SPI_WaitFlagStateUntilTimeout>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d016      	beq.n	8006eb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	f043 0220 	orr.w	r2, r3, #32
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e00f      	b.n	8006eb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d0f2      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x52>
 8006eb0:	e000      	b.n	8006eb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006eb2:	bf00      	nop
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200002f4 	.word	0x200002f4
 8006ec4:	165e9f81 	.word	0x165e9f81

08006ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e041      	b.n	8006f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fd fa40 	bl	8004374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f000 f968 	bl	80071dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d122      	bne.n	8006fc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d11b      	bne.n	8006fc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0202 	mvn.w	r2, #2
 8006f92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8f8 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 8006fae:	e005      	b.n	8006fbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8ea 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f8fb 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d122      	bne.n	8007016 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d11b      	bne.n	8007016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f06f 0204 	mvn.w	r2, #4
 8006fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f8ce 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 8007002:	e005      	b.n	8007010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8c0 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f8d1 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b08      	cmp	r3, #8
 8007022:	d122      	bne.n	800706a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b08      	cmp	r3, #8
 8007030:	d11b      	bne.n	800706a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f06f 0208 	mvn.w	r2, #8
 800703a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2204      	movs	r2, #4
 8007040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f8a4 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 8007056:	e005      	b.n	8007064 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f896 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8a7 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	d122      	bne.n	80070be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b10      	cmp	r3, #16
 8007084:	d11b      	bne.n	80070be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f06f 0210 	mvn.w	r2, #16
 800708e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2208      	movs	r2, #8
 8007094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f87a 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 80070aa:	e005      	b.n	80070b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f86c 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f87d 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d10e      	bne.n	80070ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d107      	bne.n	80070ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f06f 0201 	mvn.w	r2, #1
 80070e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f846 	bl	8007176 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d10e      	bne.n	8007116 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d107      	bne.n	8007116 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800710e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f90d 	bl	8007330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b40      	cmp	r3, #64	; 0x40
 8007122:	d10e      	bne.n	8007142 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d107      	bne.n	8007142 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800713a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f842 	bl	80071c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b20      	cmp	r3, #32
 800714e:	d10e      	bne.n	800716e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b20      	cmp	r3, #32
 800715c:	d107      	bne.n	800716e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f06f 0220 	mvn.w	r2, #32
 8007166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f8d7 	bl	800731c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a40      	ldr	r2, [pc, #256]	; (80072f0 <TIM_Base_SetConfig+0x114>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d013      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fa:	d00f      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a3d      	ldr	r2, [pc, #244]	; (80072f4 <TIM_Base_SetConfig+0x118>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00b      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a3c      	ldr	r2, [pc, #240]	; (80072f8 <TIM_Base_SetConfig+0x11c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a3b      	ldr	r2, [pc, #236]	; (80072fc <TIM_Base_SetConfig+0x120>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a3a      	ldr	r2, [pc, #232]	; (8007300 <TIM_Base_SetConfig+0x124>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d108      	bne.n	800722e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <TIM_Base_SetConfig+0x114>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02b      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723c:	d027      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a2c      	ldr	r2, [pc, #176]	; (80072f4 <TIM_Base_SetConfig+0x118>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d023      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a2b      	ldr	r2, [pc, #172]	; (80072f8 <TIM_Base_SetConfig+0x11c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d01f      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <TIM_Base_SetConfig+0x120>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01b      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <TIM_Base_SetConfig+0x124>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d017      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a28      	ldr	r2, [pc, #160]	; (8007304 <TIM_Base_SetConfig+0x128>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a27      	ldr	r2, [pc, #156]	; (8007308 <TIM_Base_SetConfig+0x12c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00f      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a26      	ldr	r2, [pc, #152]	; (800730c <TIM_Base_SetConfig+0x130>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00b      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a25      	ldr	r2, [pc, #148]	; (8007310 <TIM_Base_SetConfig+0x134>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a24      	ldr	r2, [pc, #144]	; (8007314 <TIM_Base_SetConfig+0x138>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a23      	ldr	r2, [pc, #140]	; (8007318 <TIM_Base_SetConfig+0x13c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d108      	bne.n	80072a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <TIM_Base_SetConfig+0x114>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0xf8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a0c      	ldr	r2, [pc, #48]	; (8007300 <TIM_Base_SetConfig+0x124>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d103      	bne.n	80072dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	615a      	str	r2, [r3, #20]
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00
 8007300:	40010400 	.word	0x40010400
 8007304:	40014000 	.word	0x40014000
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800
 8007310:	40001800 	.word	0x40001800
 8007314:	40001c00 	.word	0x40001c00
 8007318:	40002000 	.word	0x40002000

0800731c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <__NVIC_SetPriority>:
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007354:	2b00      	cmp	r3, #0
 8007356:	db0a      	blt.n	800736e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	490c      	ldr	r1, [pc, #48]	; (8007390 <__NVIC_SetPriority+0x4c>)
 800735e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007362:	0112      	lsls	r2, r2, #4
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	440b      	add	r3, r1
 8007368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800736c:	e00a      	b.n	8007384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	4908      	ldr	r1, [pc, #32]	; (8007394 <__NVIC_SetPriority+0x50>)
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	3b04      	subs	r3, #4
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	440b      	add	r3, r1
 8007382:	761a      	strb	r2, [r3, #24]
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	e000e100 	.word	0xe000e100
 8007394:	e000ed00 	.word	0xe000ed00

08007398 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800739c:	2100      	movs	r1, #0
 800739e:	f06f 0004 	mvn.w	r0, #4
 80073a2:	f7ff ffcf 	bl	8007344 <__NVIC_SetPriority>
#endif
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b2:	f3ef 8305 	mrs	r3, IPSR
 80073b6:	603b      	str	r3, [r7, #0]
  return(result);
 80073b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073be:	f06f 0305 	mvn.w	r3, #5
 80073c2:	607b      	str	r3, [r7, #4]
 80073c4:	e00c      	b.n	80073e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073c6:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <osKernelInitialize+0x44>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073ce:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <osKernelInitialize+0x44>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	e002      	b.n	80073e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073e0:	687b      	ldr	r3, [r7, #4]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20029458 	.word	0x20029458

080073f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073fa:	f3ef 8305 	mrs	r3, IPSR
 80073fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007406:	f06f 0305 	mvn.w	r3, #5
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	e010      	b.n	8007430 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <osKernelStart+0x48>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d109      	bne.n	800742a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007416:	f7ff ffbf 	bl	8007398 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <osKernelStart+0x48>)
 800741c:	2202      	movs	r2, #2
 800741e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007420:	f002 f920 	bl	8009664 <vTaskStartScheduler>
      stat = osOK;
 8007424:	2300      	movs	r3, #0
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e002      	b.n	8007430 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800742a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800742e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007430:	687b      	ldr	r3, [r7, #4]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20029458 	.word	0x20029458

08007440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	; 0x38
 8007444:	af04      	add	r7, sp, #16
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007450:	f3ef 8305 	mrs	r3, IPSR
 8007454:	617b      	str	r3, [r7, #20]
  return(result);
 8007456:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007458:	2b00      	cmp	r3, #0
 800745a:	d17e      	bne.n	800755a <osThreadNew+0x11a>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d07b      	beq.n	800755a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007462:	2380      	movs	r3, #128	; 0x80
 8007464:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007466:	2318      	movs	r3, #24
 8007468:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007472:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d045      	beq.n	8007506 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <osThreadNew+0x48>
        name = attr->name;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <osThreadNew+0x6e>
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	2b38      	cmp	r3, #56	; 0x38
 80074a0:	d805      	bhi.n	80074ae <osThreadNew+0x6e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <osThreadNew+0x72>
        return (NULL);
 80074ae:	2300      	movs	r3, #0
 80074b0:	e054      	b.n	800755c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	089b      	lsrs	r3, r3, #2
 80074c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00e      	beq.n	80074e8 <osThreadNew+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2ba7      	cmp	r3, #167	; 0xa7
 80074d0:	d90a      	bls.n	80074e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <osThreadNew+0xa8>
        mem = 1;
 80074e2:	2301      	movs	r3, #1
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	e010      	b.n	800750a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10c      	bne.n	800750a <osThreadNew+0xca>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d108      	bne.n	800750a <osThreadNew+0xca>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <osThreadNew+0xca>
          mem = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	e001      	b.n	800750a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d110      	bne.n	8007532 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007518:	9202      	str	r2, [sp, #8]
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	6a3a      	ldr	r2, [r7, #32]
 8007524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f001 fd9c 	bl	8009064 <xTaskCreateStatic>
 800752c:	4603      	mov	r3, r0
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	e013      	b.n	800755a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d110      	bne.n	800755a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	b29a      	uxth	r2, r3
 800753c:	f107 0310 	add.w	r3, r7, #16
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f001 fde7 	bl	800911e <xTaskCreate>
 8007550:	4603      	mov	r3, r0
 8007552:	2b01      	cmp	r3, #1
 8007554:	d001      	beq.n	800755a <osThreadNew+0x11a>
            hTask = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800755a:	693b      	ldr	r3, [r7, #16]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3728      	adds	r7, #40	; 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007570:	f3ef 8305 	mrs	r3, IPSR
 8007574:	60bb      	str	r3, [r7, #8]
  return(result);
 8007576:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800757c:	f06f 0305 	mvn.w	r3, #5
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e017      	b.n	80075b4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800758a:	f06f 0303 	mvn.w	r3, #3
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e010      	b.n	80075b4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007592:	6938      	ldr	r0, [r7, #16]
 8007594:	f002 f800 	bl	8009598 <eTaskGetState>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d005      	beq.n	80075ae <osThreadTerminate+0x4a>
      stat = osOK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80075a6:	6938      	ldr	r0, [r7, #16]
 80075a8:	f001 ff32 	bl	8009410 <vTaskDelete>
 80075ac:	e002      	b.n	80075b4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80075ae:	f06f 0302 	mvn.w	r3, #2
 80075b2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80075b4:	697b      	ldr	r3, [r7, #20]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c6:	f3ef 8305 	mrs	r3, IPSR
 80075ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80075cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <osDelay+0x1c>
    stat = osErrorISR;
 80075d2:	f06f 0305 	mvn.w	r3, #5
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e007      	b.n	80075ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 ff9f 	bl	8009528 <vTaskDelay>
    }
  }

  return (stat);
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f003 fbb5 	bl	800ad6c <pvTimerGetTimerID>
 8007602:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <TimerCallback+0x22>
    callb->func (callb->arg);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	6852      	ldr	r2, [r2, #4]
 8007612:	4610      	mov	r0, r2
 8007614:	4798      	blx	r3
  }
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	; 0x30
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	460b      	mov	r3, r1
 800762e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007634:	f3ef 8305 	mrs	r3, IPSR
 8007638:	613b      	str	r3, [r7, #16]
  return(result);
 800763a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800763c:	2b00      	cmp	r3, #0
 800763e:	d163      	bne.n	8007708 <osTimerNew+0xe8>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d060      	beq.n	8007708 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007646:	2008      	movs	r0, #8
 8007648:	f003 fe1e 	bl	800b288 <pvPortMalloc>
 800764c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d059      	beq.n	8007708 <osTimerNew+0xe8>
      callb->func = func;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <osTimerNew+0x4c>
        reload = pdFALSE;
 8007666:	2300      	movs	r3, #0
 8007668:	61fb      	str	r3, [r7, #28]
 800766a:	e001      	b.n	8007670 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007674:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01c      	beq.n	80076ba <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <osTimerNew+0x6e>
          name = attr->name;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <osTimerNew+0x84>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	2b2b      	cmp	r3, #43	; 0x2b
 800769c:	d902      	bls.n	80076a4 <osTimerNew+0x84>
          mem = 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e00c      	b.n	80076be <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d108      	bne.n	80076be <osTimerNew+0x9e>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <osTimerNew+0x9e>
            mem = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e001      	b.n	80076be <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d10c      	bne.n	80076de <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <osTimerNew+0xf4>)
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	2101      	movs	r1, #1
 80076d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076d6:	f002 ffca 	bl	800a66e <xTimerCreateStatic>
 80076da:	6238      	str	r0, [r7, #32]
 80076dc:	e00b      	b.n	80076f6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d108      	bne.n	80076f6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <osTimerNew+0xf4>)
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	2101      	movs	r1, #1
 80076ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076f0:	f002 ff9c 	bl	800a62c <xTimerCreate>
 80076f4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d105      	bne.n	8007708 <osTimerNew+0xe8>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <osTimerNew+0xe8>
        vPortFree (callb);
 8007702:	6978      	ldr	r0, [r7, #20]
 8007704:	f003 fe8c 	bl	800b420 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007708:	6a3b      	ldr	r3, [r7, #32]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	080075f5 	.word	0x080075f5

08007718 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af02      	add	r7, sp, #8
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007726:	f3ef 8305 	mrs	r3, IPSR
 800772a:	60fb      	str	r3, [r7, #12]
  return(result);
 800772c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <osTimerStart+0x22>
    stat = osErrorISR;
 8007732:	f06f 0305 	mvn.w	r3, #5
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e017      	b.n	800776a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007740:	f06f 0303 	mvn.w	r3, #3
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	e010      	b.n	800776a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007748:	2300      	movs	r3, #0
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2300      	movs	r3, #0
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	2104      	movs	r1, #4
 8007752:	6938      	ldr	r0, [r7, #16]
 8007754:	f003 f804 	bl	800a760 <xTimerGenericCommand>
 8007758:	4603      	mov	r3, r0
 800775a:	2b01      	cmp	r3, #1
 800775c:	d102      	bne.n	8007764 <osTimerStart+0x4c>
      stat = osOK;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e002      	b.n	800776a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007764:	f06f 0302 	mvn.w	r3, #2
 8007768:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800776a:	697b      	ldr	r3, [r7, #20]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007780:	f3ef 8305 	mrs	r3, IPSR
 8007784:	60fb      	str	r3, [r7, #12]
  return(result);
 8007786:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007788:	2b00      	cmp	r3, #0
 800778a:	d12d      	bne.n	80077e8 <osEventFlagsNew+0x74>
    mem = -1;
 800778c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007790:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d015      	beq.n	80077c4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <osEventFlagsNew+0x3a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2b1f      	cmp	r3, #31
 80077a6:	d902      	bls.n	80077ae <osEventFlagsNew+0x3a>
        mem = 1;
 80077a8:	2301      	movs	r3, #1
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	e00c      	b.n	80077c8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <osEventFlagsNew+0x54>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <osEventFlagsNew+0x54>
          mem = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	e001      	b.n	80077c8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d106      	bne.n	80077dc <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f9fa 	bl	8007bcc <xEventGroupCreateStatic>
 80077d8:	6178      	str	r0, [r7, #20]
 80077da:	e005      	b.n	80077e8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80077e2:	f000 fa2a 	bl	8007c3a <xEventGroupCreate>
 80077e6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80077e8:	697b      	ldr	r3, [r7, #20]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <osEventFlagsSet+0x1e>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007812:	f06f 0303 	mvn.w	r3, #3
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e028      	b.n	800786c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800781a:	f3ef 8305 	mrs	r3, IPSR
 800781e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007820:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01d      	beq.n	8007862 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	461a      	mov	r2, r3
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6938      	ldr	r0, [r7, #16]
 8007834:	f000 fba4 	bl	8007f80 <xEventGroupSetBitsFromISR>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800783e:	f06f 0302 	mvn.w	r3, #2
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e012      	b.n	800786c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00d      	beq.n	800786c <osEventFlagsSet+0x78>
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <osEventFlagsSet+0x84>)
 8007852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	e004      	b.n	800786c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6938      	ldr	r0, [r7, #16]
 8007866:	f000 fad1 	bl	8007e0c <xEventGroupSetBits>
 800786a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800786c:	697b      	ldr	r3, [r7, #20]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b08c      	sub	sp, #48	; 0x30
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <osEventFlagsWait+0x22>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800789e:	f06f 0303 	mvn.w	r3, #3
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	e04b      	b.n	800793e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a6:	f3ef 8305 	mrs	r3, IPSR
 80078aa:	617b      	str	r3, [r7, #20]
  return(result);
 80078ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80078b2:	f06f 0305 	mvn.w	r3, #5
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e041      	b.n	800793e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
 80078c8:	e001      	b.n	80078ce <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80078d8:	2300      	movs	r3, #0
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	e001      	b.n	80078e2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	69b8      	ldr	r0, [r7, #24]
 80078ee:	f000 f9bf 	bl	8007c70 <xEventGroupWaitBits>
 80078f2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d010      	beq.n	8007920 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4013      	ands	r3, r2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	d019      	beq.n	800793e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8007910:	f06f 0301 	mvn.w	r3, #1
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e012      	b.n	800793e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007918:	f06f 0302 	mvn.w	r3, #2
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e00e      	b.n	800793e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4013      	ands	r3, r2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8007930:	f06f 0301 	mvn.w	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	e002      	b.n	800793e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007938:	f06f 0302 	mvn.w	r3, #2
 800793c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800793e:	69fb      	ldr	r3, [r7, #28]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3728      	adds	r7, #40	; 0x28
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007954:	f3ef 8305 	mrs	r3, IPSR
 8007958:	60bb      	str	r3, [r7, #8]
  return(result);
 800795a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800795c:	2b00      	cmp	r3, #0
 800795e:	d174      	bne.n	8007a4a <osMutexNew+0x102>
    if (attr != NULL) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <osMutexNew+0x26>
      type = attr->attr_bits;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	e001      	b.n	8007972 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <osMutexNew+0x3a>
      rmtx = 1U;
 800797c:	2301      	movs	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e001      	b.n	8007986 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d15c      	bne.n	8007a4a <osMutexNew+0x102>
      mem = -1;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007994:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <osMutexNew+0x6a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	2b4f      	cmp	r3, #79	; 0x4f
 80079aa:	d902      	bls.n	80079b2 <osMutexNew+0x6a>
          mem = 1;
 80079ac:	2301      	movs	r3, #1
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	e00c      	b.n	80079cc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d108      	bne.n	80079cc <osMutexNew+0x84>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <osMutexNew+0x84>
            mem = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	e001      	b.n	80079cc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d112      	bne.n	80079f8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	4619      	mov	r1, r3
 80079de:	2004      	movs	r0, #4
 80079e0:	f000 fd0b 	bl	80083fa <xQueueCreateMutexStatic>
 80079e4:	61f8      	str	r0, [r7, #28]
 80079e6:	e016      	b.n	8007a16 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4619      	mov	r1, r3
 80079ee:	2001      	movs	r0, #1
 80079f0:	f000 fd03 	bl	80083fa <xQueueCreateMutexStatic>
 80079f4:	61f8      	str	r0, [r7, #28]
 80079f6:	e00e      	b.n	8007a16 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007a04:	2004      	movs	r0, #4
 8007a06:	f000 fce0 	bl	80083ca <xQueueCreateMutex>
 8007a0a:	61f8      	str	r0, [r7, #28]
 8007a0c:	e003      	b.n	8007a16 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007a0e:	2001      	movs	r0, #1
 8007a10:	f000 fcdb 	bl	80083ca <xQueueCreateMutex>
 8007a14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00c      	beq.n	8007a36 <osMutexNew+0xee>
        if (attr != NULL) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <osMutexNew+0xe2>
          name = attr->name;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e001      	b.n	8007a2e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	69f8      	ldr	r0, [r7, #28]
 8007a32:	f001 fab1 	bl	8008f98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <osMutexNew+0x102>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007a4a:	69fb      	ldr	r3, [r7, #28]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3720      	adds	r7, #32
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a72:	f3ef 8305 	mrs	r3, IPSR
 8007a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007a7e:	f06f 0305 	mvn.w	r3, #5
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e02c      	b.n	8007ae0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007a8c:	f06f 0303 	mvn.w	r3, #3
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e025      	b.n	8007ae0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d011      	beq.n	8007abe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6938      	ldr	r0, [r7, #16]
 8007a9e:	f000 fcfb 	bl	8008498 <xQueueTakeMutexRecursive>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d01b      	beq.n	8007ae0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007aae:	f06f 0301 	mvn.w	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e014      	b.n	8007ae0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007ab6:	f06f 0302 	mvn.w	r3, #2
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e010      	b.n	8007ae0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6938      	ldr	r0, [r7, #16]
 8007ac2:	f001 f805 	bl	8008ad0 <xQueueSemaphoreTake>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d009      	beq.n	8007ae0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007ad2:	f06f 0301 	mvn.w	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	e002      	b.n	8007ae0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007ada:	f06f 0302 	mvn.w	r3, #2
 8007ade:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007ae0:	697b      	ldr	r3, [r7, #20]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b06:	f3ef 8305 	mrs	r3, IPSR
 8007b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <osMutexRelease+0x30>
    stat = osErrorISR;
 8007b12:	f06f 0305 	mvn.w	r3, #5
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	e01f      	b.n	8007b5a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007b20:	f06f 0303 	mvn.w	r3, #3
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	e018      	b.n	8007b5a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f000 fc7e 	bl	8008430 <xQueueGiveMutexRecursive>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d00f      	beq.n	8007b5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8007b3a:	f06f 0302 	mvn.w	r3, #2
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e00b      	b.n	8007b5a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007b42:	2300      	movs	r3, #0
 8007b44:	2200      	movs	r2, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	6938      	ldr	r0, [r7, #16]
 8007b4a:	f000 fcdb 	bl	8008504 <xQueueGenericSend>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d002      	beq.n	8007b5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8007b54:	f06f 0302 	mvn.w	r3, #2
 8007b58:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007b5a:	697b      	ldr	r3, [r7, #20]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4a06      	ldr	r2, [pc, #24]	; (8007b94 <vApplicationGetIdleTaskMemory+0x30>)
 8007b7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	601a      	str	r2, [r3, #0]
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	2002945c 	.word	0x2002945c
 8007b94:	20029504 	.word	0x20029504

08007b98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a07      	ldr	r2, [pc, #28]	; (8007bc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4a06      	ldr	r2, [pc, #24]	; (8007bc8 <vApplicationGetTimerTaskMemory+0x30>)
 8007bae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bb6:	601a      	str	r2, [r3, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20029704 	.word	0x20029704
 8007bc8:	200297ac 	.word	0x200297ac

08007bcc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d00a      	beq.n	8007c10 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	60fb      	str	r3, [r7, #12]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f9bf 	bl	8007fa8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007c30:	697b      	ldr	r3, [r7, #20]
	}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007c40:	2020      	movs	r0, #32
 8007c42:	f003 fb21 	bl	800b288 <pvPortMalloc>
 8007c46:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f9a5 	bl	8007fa8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007c64:	687b      	ldr	r3, [r7, #4]
	}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b090      	sub	sp, #64	; 0x40
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	623b      	str	r3, [r7, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	61fb      	str	r3, [r7, #28]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	61bb      	str	r3, [r7, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ce2:	f002 fa4b 	bl	800a17c <xTaskGetSchedulerState>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <xEventGroupWaitBits+0x82>
 8007cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <xEventGroupWaitBits+0x86>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <xEventGroupWaitBits+0x88>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	617b      	str	r3, [r7, #20]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8007d12:	f001 fd29 	bl	8009768 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d22:	f000 f90b 	bl	8007f3c <prvTestWaitCondition>
 8007d26:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00e      	beq.n	8007d4c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d028      	beq.n	8007d8e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	43db      	mvns	r3, r3
 8007d44:	401a      	ands	r2, r3
 8007d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	e020      	b.n	8007d8e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
 8007d5a:	e018      	b.n	8007d8e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d68:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	1d18      	adds	r0, r3, #4
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	4313      	orrs	r3, r2
 8007d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d84:	4619      	mov	r1, r3
 8007d86:	f001 ff1b 	bl	8009bc0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007d8e:	f001 fcf9 	bl	8009784 <xTaskResumeAll>
 8007d92:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d031      	beq.n	8007dfe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d107      	bne.n	8007db0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007da0:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <xEventGroupWaitBits+0x198>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007db0:	f002 fb74 	bl	800a49c <uxTaskResetEventItemValue>
 8007db4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11a      	bne.n	8007df6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007dc0:	f003 f940 	bl	800b044 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007dd0:	f000 f8b4 	bl	8007f3c <prvTestWaitCondition>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	43db      	mvns	r3, r3
 8007de8:	401a      	ands	r2, r3
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007dee:	2301      	movs	r3, #1
 8007df0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007df2:	f003 f957 	bl	800b0a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3740      	adds	r7, #64	; 0x40
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08e      	sub	sp, #56	; 0x38
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007e16:	2300      	movs	r3, #0
 8007e18:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <xEventGroupSetBits+0x32>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	613b      	str	r3, [r7, #16]
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <xEventGroupSetBits+0x52>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	3304      	adds	r3, #4
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	3308      	adds	r3, #8
 8007e68:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007e6a:	f001 fc7d 	bl	8009768 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007e80:	e03c      	b.n	8007efc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e98:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ea0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d108      	bne.n	8007ebe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebc:	e008      	b.n	8007ed0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d101      	bne.n	8007ed0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d010      	beq.n	8007ef8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ef4:	f001 ff36 	bl	8009d64 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d1be      	bne.n	8007e82 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	401a      	ands	r2, r3
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007f12:	f001 fc37 	bl	8009784 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	681b      	ldr	r3, [r3, #0]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3738      	adds	r7, #56	; 0x38
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff ff6c 	bl	8007e0c <xEventGroupSetBits>
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d107      	bne.n	8007f62 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e007      	b.n	8007f72 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4013      	ands	r3, r2
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d101      	bne.n	8007f72 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007f72:	697b      	ldr	r3, [r7, #20]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	68f9      	ldr	r1, [r7, #12]
 8007f92:	4804      	ldr	r0, [pc, #16]	; (8007fa4 <xEventGroupSetBitsFromISR+0x24>)
 8007f94:	f002 ff0a 	bl	800adac <xTimerPendFunctionCallFromISR>
 8007f98:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007f9a:	697b      	ldr	r3, [r7, #20]
	}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	08007f23 	.word	0x08007f23

08007fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f103 0208 	add.w	r2, r3, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f103 0208 	add.w	r2, r3, #8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0208 	add.w	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008060:	d103      	bne.n	800806a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e00c      	b.n	8008084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3308      	adds	r3, #8
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e002      	b.n	8008078 <vListInsert+0x2e>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d2f6      	bcs.n	8008072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6892      	ldr	r2, [r2, #8]
 80080d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6852      	ldr	r2, [r2, #4]
 80080dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d103      	bne.n	80080f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	1e5a      	subs	r2, r3, #1
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <xQueueGenericReset+0x2a>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60bb      	str	r3, [r7, #8]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800813a:	f002 ff83 	bl	800b044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008146:	68f9      	ldr	r1, [r7, #12]
 8008148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800814a:	fb01 f303 	mul.w	r3, r1, r3
 800814e:	441a      	add	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	3b01      	subs	r3, #1
 800816c:	68f9      	ldr	r1, [r7, #12]
 800816e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	441a      	add	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	22ff      	movs	r2, #255	; 0xff
 800817e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d114      	bne.n	80081ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01a      	beq.n	80081ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3310      	adds	r3, #16
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fd79 	bl	8009c94 <xTaskRemoveFromEventList>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d012      	beq.n	80081ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081a8:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <xQueueGenericReset+0xcc>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	e009      	b.n	80081ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3310      	adds	r3, #16
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fef2 	bl	8007fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3324      	adds	r3, #36	; 0x24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff feed 	bl	8007fa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081ce:	f002 ff69 	bl	800b0a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081d2:	2301      	movs	r3, #1
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	; 0x38
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <xQueueGenericCreateStatic+0x52>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <xQueueGenericCreateStatic+0x56>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueGenericCreateStatic+0x58>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <xQueueGenericCreateStatic+0x7e>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <xQueueGenericCreateStatic+0x82>
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <xQueueGenericCreateStatic+0x84>
 8008262:	2300      	movs	r3, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	61fb      	str	r3, [r7, #28]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800827e:	2350      	movs	r3, #80	; 0x50
 8008280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b50      	cmp	r3, #80	; 0x50
 8008286:	d00a      	beq.n	800829e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	61bb      	str	r3, [r7, #24]
}
 800829a:	bf00      	nop
 800829c:	e7fe      	b.n	800829c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800829e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f83f 	bl	8008344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3730      	adds	r7, #48	; 0x30
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	613b      	str	r3, [r7, #16]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	3350      	adds	r3, #80	; 0x50
 8008308:	4618      	mov	r0, r3
 800830a:	f002 ffbd 	bl	800b288 <pvPortMalloc>
 800830e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d011      	beq.n	800833a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	3350      	adds	r3, #80	; 0x50
 800831e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008328:	79fa      	ldrb	r2, [r7, #7]
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4613      	mov	r3, r2
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f805 	bl	8008344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800833a:	69bb      	ldr	r3, [r7, #24]
	}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d103      	bne.n	8008360 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e002      	b.n	8008366 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008372:	2101      	movs	r1, #1
 8008374:	69b8      	ldr	r0, [r7, #24]
 8008376:	f7ff fecb 	bl	8008110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	2073      	movs	r0, #115	; 0x73
 800838a:	f003 fe41 	bl	800c010 <SEGGER_SYSVIEW_RecordU32x3>
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f8a1 	bl	8008504 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	4603      	mov	r3, r0
 80083d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	461a      	mov	r2, r3
 80083e0:	6939      	ldr	r1, [r7, #16]
 80083e2:	6978      	ldr	r0, [r7, #20]
 80083e4:	f7ff ff74 	bl	80082d0 <xQueueGenericCreate>
 80083e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ffd3 	bl	8008396 <prvInitialiseMutex>

		return xNewQueue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b088      	sub	sp, #32
 80083fe:	af02      	add	r7, sp, #8
 8008400:	4603      	mov	r3, r0
 8008402:	6039      	str	r1, [r7, #0]
 8008404:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008406:	2301      	movs	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	2300      	movs	r3, #0
 800840c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	6939      	ldr	r1, [r7, #16]
 8008418:	6978      	ldr	r0, [r7, #20]
 800841a:	f7ff fee1 	bl	80081e0 <xQueueGenericCreateStatic>
 800841e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff ffb8 	bl	8008396 <prvInitialiseMutex>

		return xNewQueue;
 8008426:	68fb      	ldr	r3, [r7, #12]
	}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008430:	b590      	push	{r4, r7, lr}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60fb      	str	r3, [r7, #12]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	689c      	ldr	r4, [r3, #8]
 800845c:	f001 fe7e 	bl	800a15c <xTaskGetCurrentTaskHandle>
 8008460:	4603      	mov	r3, r0
 8008462:	429c      	cmp	r4, r3
 8008464:	d111      	bne.n	800848a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	1e5a      	subs	r2, r3, #1
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008478:	2300      	movs	r3, #0
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f000 f840 	bl	8008504 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008484:	2301      	movs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e001      	b.n	800848e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800848e:	697b      	ldr	r3, [r7, #20]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	bd90      	pop	{r4, r7, pc}

08008498 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008498:	b590      	push	{r4, r7, lr}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60fb      	str	r3, [r7, #12]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	689c      	ldr	r4, [r3, #8]
 80084c6:	f001 fe49 	bl	800a15c <xTaskGetCurrentTaskHandle>
 80084ca:	4603      	mov	r3, r0
 80084cc:	429c      	cmp	r4, r3
 80084ce:	d107      	bne.n	80084e0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80084da:	2301      	movs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	e00c      	b.n	80084fa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6938      	ldr	r0, [r7, #16]
 80084e4:	f000 faf4 	bl	8008ad0 <xQueueSemaphoreTake>
 80084e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80084fa:	697b      	ldr	r3, [r7, #20]
	}
 80084fc:	4618      	mov	r0, r3
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}

08008504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b090      	sub	sp, #64	; 0x40
 8008508:	af02      	add	r7, sp, #8
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008512:	2300      	movs	r3, #0
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xQueueGenericSend+0x32>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d103      	bne.n	8008544 <xQueueGenericSend+0x40>
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <xQueueGenericSend+0x44>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <xQueueGenericSend+0x46>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <xQueueGenericSend+0x60>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d103      	bne.n	8008572 <xQueueGenericSend+0x6e>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <xQueueGenericSend+0x72>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueGenericSend+0x74>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueGenericSend+0x8e>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	623b      	str	r3, [r7, #32]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008592:	f001 fdf3 	bl	800a17c <xTaskGetSchedulerState>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <xQueueGenericSend+0x9e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <xQueueGenericSend+0xa2>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <xQueueGenericSend+0xa4>
 80085a6:	2300      	movs	r3, #0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	61fb      	str	r3, [r7, #28]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085c2:	f002 fd3f 	bl	800b044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d302      	bcc.n	80085d8 <xQueueGenericSend+0xd4>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d136      	bne.n	8008646 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	4618      	mov	r0, r3
 80085dc:	f004 f9ca 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	460b      	mov	r3, r1
 80085ea:	4601      	mov	r1, r0
 80085ec:	205a      	movs	r0, #90	; 0x5a
 80085ee:	f003 fd85 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f8:	f000 fbbe 	bl	8008d78 <prvCopyDataToQueue>
 80085fc:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	d010      	beq.n	8008628 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	3324      	adds	r3, #36	; 0x24
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fb42 	bl	8009c94 <xTaskRemoveFromEventList>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d013      	beq.n	800863e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008616:	4b4d      	ldr	r3, [pc, #308]	; (800874c <xQueueGenericSend+0x248>)
 8008618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	e00a      	b.n	800863e <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800862e:	4b47      	ldr	r3, [pc, #284]	; (800874c <xQueueGenericSend+0x248>)
 8008630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800863e:	f002 fd31 	bl	800b0a4 <vPortExitCritical>
				return pdPASS;
 8008642:	2301      	movs	r3, #1
 8008644:	e07d      	b.n	8008742 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800864c:	f002 fd2a 	bl	800b0a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	4618      	mov	r0, r3
 8008654:	f004 f98e 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	460b      	mov	r3, r1
 8008662:	4601      	mov	r1, r0
 8008664:	205a      	movs	r0, #90	; 0x5a
 8008666:	f003 fd49 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800866a:	2300      	movs	r3, #0
 800866c:	e069      	b.n	8008742 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008674:	f107 0314 	add.w	r3, r7, #20
 8008678:	4618      	mov	r0, r3
 800867a:	f001 fbd9 	bl	8009e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800867e:	2301      	movs	r3, #1
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008682:	f002 fd0f 	bl	800b0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008686:	f001 f86f 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800868a:	f002 fcdb 	bl	800b044 <vPortEnterCritical>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008694:	b25b      	sxtb	r3, r3
 8008696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800869a:	d103      	bne.n	80086a4 <xQueueGenericSend+0x1a0>
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b0:	d103      	bne.n	80086ba <xQueueGenericSend+0x1b6>
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ba:	f002 fcf3 	bl	800b0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086be:	1d3a      	adds	r2, r7, #4
 80086c0:	f107 0314 	add.w	r3, r7, #20
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 fbc8 	bl	8009e5c <xTaskCheckForTimeOut>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d124      	bne.n	800871c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d4:	f000 fc48 	bl	8008f68 <prvIsQueueFull>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d018      	beq.n	8008710 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	3310      	adds	r3, #16
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 fa46 	bl	8009b78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ee:	f000 fbd3 	bl	8008e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086f2:	f001 f847 	bl	8009784 <xTaskResumeAll>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f af62 	bne.w	80085c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80086fe:	4b13      	ldr	r3, [pc, #76]	; (800874c <xQueueGenericSend+0x248>)
 8008700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	e758      	b.n	80085c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008712:	f000 fbc1 	bl	8008e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008716:	f001 f835 	bl	8009784 <xTaskResumeAll>
 800871a:	e752      	b.n	80085c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800871c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800871e:	f000 fbbb 	bl	8008e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008722:	f001 f82f 	bl	8009784 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	4618      	mov	r0, r3
 800872a:	f004 f923 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	460b      	mov	r3, r1
 8008738:	4601      	mov	r1, r0
 800873a:	205a      	movs	r0, #90	; 0x5a
 800873c:	f003 fcde 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8008740:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008742:	4618      	mov	r0, r3
 8008744:	3738      	adds	r7, #56	; 0x38
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	e000ed04 	.word	0xe000ed04

08008750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b090      	sub	sp, #64	; 0x40
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <xQueueGenericSendFromISR+0x3c>
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <xQueueGenericSendFromISR+0x40>
 800878c:	2301      	movs	r3, #1
 800878e:	e000      	b.n	8008792 <xQueueGenericSendFromISR+0x42>
 8008790:	2300      	movs	r3, #0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d103      	bne.n	80087ba <xQueueGenericSendFromISR+0x6a>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <xQueueGenericSendFromISR+0x6e>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericSendFromISR+0x70>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	623b      	str	r3, [r7, #32]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087da:	f002 fd15 	bl	800b208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087de:	f3ef 8211 	mrs	r2, BASEPRI
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	61fa      	str	r2, [r7, #28]
 80087f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	429a      	cmp	r2, r3
 8008804:	d302      	bcc.n	800880c <xQueueGenericSendFromISR+0xbc>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d139      	bne.n	8008880 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	4618      	mov	r0, r3
 8008820:	f004 f8a8 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008824:	4601      	mov	r1, r0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	461a      	mov	r2, r3
 800882a:	2060      	movs	r0, #96	; 0x60
 800882c:	f003 fb96 	bl	800bf5c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008836:	f000 fa9f 	bl	8008d78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800883a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008842:	d112      	bne.n	800886a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d016      	beq.n	800887a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fa1f 	bl	8009c94 <xTaskRemoveFromEventList>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00e      	beq.n	800887a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e007      	b.n	800887a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800886a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800886e:	3301      	adds	r3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	b25a      	sxtb	r2, r3
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800887a:	2301      	movs	r3, #1
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800887e:	e00b      	b.n	8008898 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	4618      	mov	r0, r3
 8008884:	f004 f876 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008888:	4601      	mov	r1, r0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	461a      	mov	r2, r3
 800888e:	2060      	movs	r0, #96	; 0x60
 8008890:	f003 fb64 	bl	800bf5c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3740      	adds	r7, #64	; 0x40
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b08f      	sub	sp, #60	; 0x3c
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xQueueReceive+0x30>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	623b      	str	r3, [r7, #32]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d103      	bne.n	80088ee <xQueueReceive+0x3e>
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <xQueueReceive+0x42>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xQueueReceive+0x44>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xQueueReceive+0x5e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	61fb      	str	r3, [r7, #28]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800890e:	f001 fc35 	bl	800a17c <xTaskGetSchedulerState>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <xQueueReceive+0x6e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <xQueueReceive+0x72>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <xQueueReceive+0x74>
 8008922:	2300      	movs	r3, #0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <xQueueReceive+0x8e>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	61bb      	str	r3, [r7, #24]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800893e:	f002 fb81 	bl	800b044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d02f      	beq.n	80089ae <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008952:	f000 fa7b 	bl	8008e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	4618      	mov	r0, r3
 800895a:	f004 f80b 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 800895e:	4604      	mov	r4, r0
 8008960:	2000      	movs	r0, #0
 8008962:	f004 f807 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008966:	4602      	mov	r2, r0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2101      	movs	r1, #1
 800896c:	9100      	str	r1, [sp, #0]
 800896e:	4621      	mov	r1, r4
 8008970:	205c      	movs	r0, #92	; 0x5c
 8008972:	f003 fbc3 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00f      	beq.n	80089a6 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	3310      	adds	r3, #16
 800898a:	4618      	mov	r0, r3
 800898c:	f001 f982 	bl	8009c94 <xTaskRemoveFromEventList>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008996:	4b4d      	ldr	r3, [pc, #308]	; (8008acc <xQueueReceive+0x21c>)
 8008998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089a6:	f002 fb7d 	bl	800b0a4 <vPortExitCritical>
				return pdPASS;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e08a      	b.n	8008ac4 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d113      	bne.n	80089dc <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089b4:	f002 fb76 	bl	800b0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	4618      	mov	r0, r3
 80089bc:	f003 ffda 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 80089c0:	4604      	mov	r4, r0
 80089c2:	2000      	movs	r0, #0
 80089c4:	f003 ffd6 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 80089c8:	4602      	mov	r2, r0
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2101      	movs	r1, #1
 80089ce:	9100      	str	r1, [sp, #0]
 80089d0:	4621      	mov	r1, r4
 80089d2:	205c      	movs	r0, #92	; 0x5c
 80089d4:	f003 fb92 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80089d8:	2300      	movs	r3, #0
 80089da:	e073      	b.n	8008ac4 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d106      	bne.n	80089f0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089e2:	f107 0310 	add.w	r3, r7, #16
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fa22 	bl	8009e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089f0:	f002 fb58 	bl	800b0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089f4:	f000 feb8 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089f8:	f002 fb24 	bl	800b044 <vPortEnterCritical>
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a08:	d103      	bne.n	8008a12 <xQueueReceive+0x162>
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1e:	d103      	bne.n	8008a28 <xQueueReceive+0x178>
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a28:	f002 fb3c 	bl	800b0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a2c:	1d3a      	adds	r2, r7, #4
 8008a2e:	f107 0310 	add.w	r3, r7, #16
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fa11 	bl	8009e5c <xTaskCheckForTimeOut>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d124      	bne.n	8008a8a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a42:	f000 fa7b 	bl	8008f3c <prvIsQueueEmpty>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d018      	beq.n	8008a7e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	3324      	adds	r3, #36	; 0x24
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 f88f 	bl	8009b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5c:	f000 fa1c 	bl	8008e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a60:	f000 fe90 	bl	8009784 <xTaskResumeAll>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f47f af69 	bne.w	800893e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a6c:	4b17      	ldr	r3, [pc, #92]	; (8008acc <xQueueReceive+0x21c>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	e75f      	b.n	800893e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a80:	f000 fa0a 	bl	8008e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a84:	f000 fe7e 	bl	8009784 <xTaskResumeAll>
 8008a88:	e759      	b.n	800893e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a8c:	f000 fa04 	bl	8008e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a90:	f000 fe78 	bl	8009784 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a96:	f000 fa51 	bl	8008f3c <prvIsQueueEmpty>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f43f af4e 	beq.w	800893e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f003 ff65 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008aaa:	4604      	mov	r4, r0
 8008aac:	2000      	movs	r0, #0
 8008aae:	f003 ff61 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	9100      	str	r1, [sp, #0]
 8008aba:	4621      	mov	r1, r4
 8008abc:	205c      	movs	r0, #92	; 0x5c
 8008abe:	f003 fb1d 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008ac2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3734      	adds	r7, #52	; 0x34
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd90      	pop	{r4, r7, pc}
 8008acc:	e000ed04 	.word	0xe000ed04

08008ad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b091      	sub	sp, #68	; 0x44
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	623b      	str	r3, [r7, #32]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	61fb      	str	r3, [r7, #28]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b20:	f001 fb2c 	bl	800a17c <xTaskGetSchedulerState>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d102      	bne.n	8008b30 <xQueueSemaphoreTake+0x60>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <xQueueSemaphoreTake+0x64>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <xQueueSemaphoreTake+0x66>
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	61bb      	str	r3, [r7, #24]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b50:	f002 fa78 	bl	800b044 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d034      	beq.n	8008bca <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	4618      	mov	r0, r3
 8008b64:	f003 ff06 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	f003 ff02 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008b70:	4602      	mov	r2, r0
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2101      	movs	r1, #1
 8008b76:	9100      	str	r1, [sp, #0]
 8008b78:	4621      	mov	r1, r4
 8008b7a:	205c      	movs	r0, #92	; 0x5c
 8008b7c:	f003 fabe 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	1e5a      	subs	r2, r3, #1
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b90:	f001 fc9c 	bl	800a4cc <pvTaskIncrementMutexHeldCount>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	3310      	adds	r3, #16
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 f874 	bl	8009c94 <xTaskRemoveFromEventList>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bb2:	4b64      	ldr	r3, [pc, #400]	; (8008d44 <xQueueSemaphoreTake+0x274>)
 8008bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bc2:	f002 fa6f 	bl	800b0a4 <vPortExitCritical>
				return pdPASS;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e0b7      	b.n	8008d3a <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d121      	bne.n	8008c14 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	617b      	str	r3, [r7, #20]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008bec:	f002 fa5a 	bl	800b0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f003 febe 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f003 feba 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008c00:	4602      	mov	r2, r0
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2101      	movs	r1, #1
 8008c06:	9100      	str	r1, [sp, #0]
 8008c08:	4621      	mov	r1, r4
 8008c0a:	205c      	movs	r0, #92	; 0x5c
 8008c0c:	f003 fa76 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e092      	b.n	8008d3a <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c1a:	f107 030c 	add.w	r3, r7, #12
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 f906 	bl	8009e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c24:	2301      	movs	r3, #1
 8008c26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c28:	f002 fa3c 	bl	800b0a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c2c:	f000 fd9c 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c30:	f002 fa08 	bl	800b044 <vPortEnterCritical>
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c3a:	b25b      	sxtb	r3, r3
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c40:	d103      	bne.n	8008c4a <xQueueSemaphoreTake+0x17a>
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c50:	b25b      	sxtb	r3, r3
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c56:	d103      	bne.n	8008c60 <xQueueSemaphoreTake+0x190>
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c60:	f002 fa20 	bl	800b0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c64:	463a      	mov	r2, r7
 8008c66:	f107 030c 	add.w	r3, r7, #12
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 f8f5 	bl	8009e5c <xTaskCheckForTimeOut>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d132      	bne.n	8008cde <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c7a:	f000 f95f 	bl	8008f3c <prvIsQueueEmpty>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d026      	beq.n	8008cd2 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d109      	bne.n	8008ca0 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8008c8c:	f002 f9da 	bl	800b044 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fa8f 	bl	800a1b8 <xTaskPriorityInherit>
 8008c9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008c9c:	f002 fa02 	bl	800b0a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 ff65 	bl	8009b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cb0:	f000 f8f2 	bl	8008e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cb4:	f000 fd66 	bl	8009784 <xTaskResumeAll>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f47f af48 	bne.w	8008b50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008cc0:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <xQueueSemaphoreTake+0x274>)
 8008cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	e73e      	b.n	8008b50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cd4:	f000 f8e0 	bl	8008e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cd8:	f000 fd54 	bl	8009784 <xTaskResumeAll>
 8008cdc:	e738      	b.n	8008b50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ce0:	f000 f8da 	bl	8008e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ce4:	f000 fd4e 	bl	8009784 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cea:	f000 f927 	bl	8008f3c <prvIsQueueEmpty>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f43f af2d 	beq.w	8008b50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00d      	beq.n	8008d18 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8008cfc:	f002 f9a2 	bl	800b044 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d02:	f000 f821 	bl	8008d48 <prvGetDisinheritPriorityAfterTimeout>
 8008d06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fb3a 	bl	800a388 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d14:	f002 f9c6 	bl	800b0a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f003 fe2a 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008d20:	4604      	mov	r4, r0
 8008d22:	2000      	movs	r0, #0
 8008d24:	f003 fe26 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	9100      	str	r1, [sp, #0]
 8008d30:	4621      	mov	r1, r4
 8008d32:	205c      	movs	r0, #92	; 0x5c
 8008d34:	f003 f9e2 	bl	800c0fc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008d38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	373c      	adds	r7, #60	; 0x3c
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	e000ed04 	.word	0xe000ed04

08008d48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d006      	beq.n	8008d66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e001      	b.n	8008d6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
	}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d84:	2300      	movs	r3, #0
 8008d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10d      	bne.n	8008db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d14d      	bne.n	8008e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 fa7a 	bl	800a29c <xTaskPriorityDisinherit>
 8008da8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	609a      	str	r2, [r3, #8]
 8008db0:	e043      	b.n	8008e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d119      	bne.n	8008dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6858      	ldr	r0, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	f004 fc3b 	bl	800d63e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	441a      	add	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d32b      	bcc.n	8008e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	e026      	b.n	8008e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68d8      	ldr	r0, [r3, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	461a      	mov	r2, r3
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	f004 fc21 	bl	800d63e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	425b      	negs	r3, r3
 8008e06:	441a      	add	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d207      	bcs.n	8008e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	425b      	negs	r3, r3
 8008e22:	441a      	add	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d105      	bne.n	8008e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e42:	697b      	ldr	r3, [r7, #20]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d018      	beq.n	8008e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	441a      	add	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68da      	ldr	r2, [r3, #12]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d303      	bcc.n	8008e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68d9      	ldr	r1, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6838      	ldr	r0, [r7, #0]
 8008e8c:	f004 fbd7 	bl	800d63e <memcpy>
	}
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ea0:	f002 f8d0 	bl	800b044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eac:	e011      	b.n	8008ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d012      	beq.n	8008edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3324      	adds	r3, #36	; 0x24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 feea 	bl	8009c94 <xTaskRemoveFromEventList>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ec6:	f001 f82b 	bl	8009f20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dce9      	bgt.n	8008eae <prvUnlockQueue+0x16>
 8008eda:	e000      	b.n	8008ede <prvUnlockQueue+0x46>
					break;
 8008edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	22ff      	movs	r2, #255	; 0xff
 8008ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ee6:	f002 f8dd 	bl	800b0a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008eea:	f002 f8ab 	bl	800b044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ef6:	e011      	b.n	8008f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d012      	beq.n	8008f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3310      	adds	r3, #16
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fec5 	bl	8009c94 <xTaskRemoveFromEventList>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f10:	f001 f806 	bl	8009f20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dce9      	bgt.n	8008ef8 <prvUnlockQueue+0x60>
 8008f24:	e000      	b.n	8008f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	22ff      	movs	r2, #255	; 0xff
 8008f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f30:	f002 f8b8 	bl	800b0a4 <vPortExitCritical>
}
 8008f34:	bf00      	nop
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f44:	f002 f87e 	bl	800b044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f50:	2301      	movs	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e001      	b.n	8008f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f5a:	f002 f8a3 	bl	800b0a4 <vPortExitCritical>

	return xReturn;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f70:	f002 f868 	bl	800b044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d102      	bne.n	8008f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e001      	b.n	8008f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f8a:	f002 f88b 	bl	800b0a4 <vPortExitCritical>

	return xReturn;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e01e      	b.n	8008fe6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fa8:	4a13      	ldr	r2, [pc, #76]	; (8008ff8 <vQueueAddToRegistry+0x60>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d115      	bne.n	8008fe0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fb4:	4910      	ldr	r1, [pc, #64]	; (8008ff8 <vQueueAddToRegistry+0x60>)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fbe:	4a0e      	ldr	r2, [pc, #56]	; (8008ff8 <vQueueAddToRegistry+0x60>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f003 fcd1 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2071      	movs	r0, #113	; 0x71
 8008fda:	f002 ffbf 	bl	800bf5c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8008fde:	e006      	b.n	8008fee <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	d9dd      	bls.n	8008fa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20029bac 	.word	0x20029bac

08008ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800900c:	f002 f81a 	bl	800b044 <vPortEnterCritical>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009016:	b25b      	sxtb	r3, r3
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800901c:	d103      	bne.n	8009026 <vQueueWaitForMessageRestricted+0x2a>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800902c:	b25b      	sxtb	r3, r3
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009032:	d103      	bne.n	800903c <vQueueWaitForMessageRestricted+0x40>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800903c:	f002 f832 	bl	800b0a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3324      	adds	r3, #36	; 0x24
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fdf1 	bl	8009c38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f7ff ff1e 	bl	8008e98 <prvUnlockQueue>
	}
 800905c:	bf00      	nop
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08e      	sub	sp, #56	; 0x38
 8009068:	af04      	add	r7, sp, #16
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	623b      	str	r3, [r7, #32]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <xTaskCreateStatic+0x46>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	61fb      	str	r3, [r7, #28]
}
 80090a6:	bf00      	nop
 80090a8:	e7fe      	b.n	80090a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090aa:	23a8      	movs	r3, #168	; 0xa8
 80090ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2ba8      	cmp	r3, #168	; 0xa8
 80090b2:	d00a      	beq.n	80090ca <xTaskCreateStatic+0x66>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	61bb      	str	r3, [r7, #24]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d01e      	beq.n	8009110 <xTaskCreateStatic+0xac>
 80090d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01b      	beq.n	8009110 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	2202      	movs	r2, #2
 80090e6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090ea:	2300      	movs	r3, #0
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	f107 0314 	add.w	r3, r7, #20
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 f850 	bl	80091a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800910a:	f000 f8f3 	bl	80092f4 <prvAddNewTaskToReadyList>
 800910e:	e001      	b.n	8009114 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009114:	697b      	ldr	r3, [r7, #20]
	}
 8009116:	4618      	mov	r0, r3
 8009118:	3728      	adds	r7, #40	; 0x28
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800911e:	b580      	push	{r7, lr}
 8009120:	b08c      	sub	sp, #48	; 0x30
 8009122:	af04      	add	r7, sp, #16
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	603b      	str	r3, [r7, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4618      	mov	r0, r3
 8009134:	f002 f8a8 	bl	800b288 <pvPortMalloc>
 8009138:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00e      	beq.n	800915e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009140:	20a8      	movs	r0, #168	; 0xa8
 8009142:	f002 f8a1 	bl	800b288 <pvPortMalloc>
 8009146:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	631a      	str	r2, [r3, #48]	; 0x30
 8009154:	e005      	b.n	8009162 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	f002 f962 	bl	800b420 <vPortFree>
 800915c:	e001      	b.n	8009162 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d017      	beq.n	8009198 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009170:	88fa      	ldrh	r2, [r7, #6]
 8009172:	2300      	movs	r3, #0
 8009174:	9303      	str	r3, [sp, #12]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	9302      	str	r3, [sp, #8]
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f80e 	bl	80091a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800918c:	69f8      	ldr	r0, [r7, #28]
 800918e:	f000 f8b1 	bl	80092f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009192:	2301      	movs	r3, #1
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	e002      	b.n	800919e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800919c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800919e:	69bb      	ldr	r3, [r7, #24]
	}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	461a      	mov	r2, r3
 80091c0:	21a5      	movs	r1, #165	; 0xa5
 80091c2:	f004 f96a 	bl	800d49a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091d0:	3b01      	subs	r3, #1
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f023 0307 	bic.w	r3, r3, #7
 80091de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <prvInitialiseNewTask+0x58>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	617b      	str	r3, [r7, #20]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01f      	beq.n	8009246 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009206:	2300      	movs	r3, #0
 8009208:	61fb      	str	r3, [r7, #28]
 800920a:	e012      	b.n	8009232 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	4413      	add	r3, r2
 8009212:	7819      	ldrb	r1, [r3, #0]
 8009214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	3334      	adds	r3, #52	; 0x34
 800921c:	460a      	mov	r2, r1
 800921e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	3301      	adds	r3, #1
 8009230:	61fb      	str	r3, [r7, #28]
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b0f      	cmp	r3, #15
 8009236:	d9e9      	bls.n	800920c <prvInitialiseNewTask+0x64>
 8009238:	e000      	b.n	800923c <prvInitialiseNewTask+0x94>
			{
				break;
 800923a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009244:	e003      	b.n	800924e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	2b37      	cmp	r3, #55	; 0x37
 8009252:	d901      	bls.n	8009258 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009254:	2337      	movs	r3, #55	; 0x37
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800925c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009262:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	2200      	movs	r2, #0
 8009268:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	3304      	adds	r3, #4
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe feba 	bl	8007fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	3318      	adds	r3, #24
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe feb5 	bl	8007fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	3354      	adds	r3, #84	; 0x54
 80092a8:	224c      	movs	r2, #76	; 0x4c
 80092aa:	2100      	movs	r1, #0
 80092ac:	4618      	mov	r0, r3
 80092ae:	f004 f8f4 	bl	800d49a <memset>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <prvInitialiseNewTask+0x140>)
 80092b6:	659a      	str	r2, [r3, #88]	; 0x58
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	4a0c      	ldr	r2, [pc, #48]	; (80092ec <prvInitialiseNewTask+0x144>)
 80092bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <prvInitialiseNewTask+0x148>)
 80092c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	69b8      	ldr	r0, [r7, #24]
 80092ca:	f001 fd8f 	bl	800adec <pxPortInitialiseStack>
 80092ce:	4602      	mov	r2, r0
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092e0:	bf00      	nop
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	2002e8bc 	.word	0x2002e8bc
 80092ec:	2002e924 	.word	0x2002e924
 80092f0:	2002e98c 	.word	0x2002e98c

080092f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092f4:	b5b0      	push	{r4, r5, r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092fc:	f001 fea2 	bl	800b044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009300:	4b3c      	ldr	r3, [pc, #240]	; (80093f4 <prvAddNewTaskToReadyList+0x100>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3301      	adds	r3, #1
 8009306:	4a3b      	ldr	r2, [pc, #236]	; (80093f4 <prvAddNewTaskToReadyList+0x100>)
 8009308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800930a:	4b3b      	ldr	r3, [pc, #236]	; (80093f8 <prvAddNewTaskToReadyList+0x104>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009312:	4a39      	ldr	r2, [pc, #228]	; (80093f8 <prvAddNewTaskToReadyList+0x104>)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009318:	4b36      	ldr	r3, [pc, #216]	; (80093f4 <prvAddNewTaskToReadyList+0x100>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d110      	bne.n	8009342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009320:	f000 fe22 	bl	8009f68 <prvInitialiseTaskLists>
 8009324:	e00d      	b.n	8009342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009326:	4b35      	ldr	r3, [pc, #212]	; (80093fc <prvAddNewTaskToReadyList+0x108>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800932e:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <prvAddNewTaskToReadyList+0x104>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	429a      	cmp	r2, r3
 800933a:	d802      	bhi.n	8009342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800933c:	4a2e      	ldr	r2, [pc, #184]	; (80093f8 <prvAddNewTaskToReadyList+0x104>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009342:	4b2f      	ldr	r3, [pc, #188]	; (8009400 <prvAddNewTaskToReadyList+0x10c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3301      	adds	r3, #1
 8009348:	4a2d      	ldr	r2, [pc, #180]	; (8009400 <prvAddNewTaskToReadyList+0x10c>)
 800934a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800934c:	4b2c      	ldr	r3, [pc, #176]	; (8009400 <prvAddNewTaskToReadyList+0x10c>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d016      	beq.n	8009388 <prvAddNewTaskToReadyList+0x94>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4618      	mov	r0, r3
 800935e:	f003 fa43 	bl	800c7e8 <SEGGER_SYSVIEW_OnTaskCreate>
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	461d      	mov	r5, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461c      	mov	r4, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	1ae3      	subs	r3, r4, r3
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462b      	mov	r3, r5
 8009384:	f003 fdc2 	bl	800cf0c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4618      	mov	r0, r3
 800938c:	f003 fab0 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	4b1b      	ldr	r3, [pc, #108]	; (8009404 <prvAddNewTaskToReadyList+0x110>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d903      	bls.n	80093a4 <prvAddNewTaskToReadyList+0xb0>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	4a18      	ldr	r2, [pc, #96]	; (8009404 <prvAddNewTaskToReadyList+0x110>)
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4a15      	ldr	r2, [pc, #84]	; (8009408 <prvAddNewTaskToReadyList+0x114>)
 80093b2:	441a      	add	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4619      	mov	r1, r3
 80093ba:	4610      	mov	r0, r2
 80093bc:	f7fe fe21 	bl	8008002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093c0:	f001 fe70 	bl	800b0a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <prvAddNewTaskToReadyList+0x108>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00e      	beq.n	80093ea <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <prvAddNewTaskToReadyList+0x104>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d207      	bcs.n	80093ea <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <prvAddNewTaskToReadyList+0x118>)
 80093dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bdb0      	pop	{r4, r5, r7, pc}
 80093f2:	bf00      	nop
 80093f4:	2002a0c0 	.word	0x2002a0c0
 80093f8:	20029bec 	.word	0x20029bec
 80093fc:	2002a0cc 	.word	0x2002a0cc
 8009400:	2002a0dc 	.word	0x2002a0dc
 8009404:	2002a0c8 	.word	0x2002a0c8
 8009408:	20029bf0 	.word	0x20029bf0
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009418:	f001 fe14 	bl	800b044 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d102      	bne.n	8009428 <vTaskDelete+0x18>
 8009422:	4b39      	ldr	r3, [pc, #228]	; (8009508 <vTaskDelete+0xf8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	e000      	b.n	800942a <vTaskDelete+0x1a>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3304      	adds	r3, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fe43 	bl	80080bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3318      	adds	r3, #24
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fe3a 	bl	80080bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009448:	4b30      	ldr	r3, [pc, #192]	; (800950c <vTaskDelete+0xfc>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	4a2f      	ldr	r2, [pc, #188]	; (800950c <vTaskDelete+0xfc>)
 8009450:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009452:	4b2d      	ldr	r3, [pc, #180]	; (8009508 <vTaskDelete+0xf8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	429a      	cmp	r2, r3
 800945a:	d118      	bne.n	800948e <vTaskDelete+0x7e>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	482b      	ldr	r0, [pc, #172]	; (8009510 <vTaskDelete+0x100>)
 8009464:	f7fe fdcd 	bl	8008002 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009468:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <vTaskDelete+0x104>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	4a29      	ldr	r2, [pc, #164]	; (8009514 <vTaskDelete+0x104>)
 8009470:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4618      	mov	r0, r3
 8009476:	f003 fa7d 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 800947a:	4603      	mov	r3, r0
 800947c:	4619      	mov	r1, r3
 800947e:	2022      	movs	r0, #34	; 0x22
 8009480:	f002 fd30 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4618      	mov	r0, r3
 8009488:	f003 fda8 	bl	800cfdc <SYSVIEW_DeleteTask>
 800948c:	e016      	b.n	80094bc <vTaskDelete+0xac>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800948e:	4b22      	ldr	r3, [pc, #136]	; (8009518 <vTaskDelete+0x108>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3b01      	subs	r3, #1
 8009494:	4a20      	ldr	r2, [pc, #128]	; (8009518 <vTaskDelete+0x108>)
 8009496:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4618      	mov	r0, r3
 800949c:	f003 fa6a 	bl	800c974 <SEGGER_SYSVIEW_ShrinkId>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4619      	mov	r1, r3
 80094a4:	2022      	movs	r0, #34	; 0x22
 80094a6:	f002 fd1d 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f003 fd95 	bl	800cfdc <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fdfe 	bl	800a0b4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80094b8:	f000 fe30 	bl	800a11c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80094bc:	f001 fdf2 	bl	800b0a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80094c0:	4b16      	ldr	r3, [pc, #88]	; (800951c <vTaskDelete+0x10c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d01b      	beq.n	8009500 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 80094c8:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <vTaskDelete+0xf8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d116      	bne.n	8009500 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80094d2:	4b13      	ldr	r3, [pc, #76]	; (8009520 <vTaskDelete+0x110>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <vTaskDelete+0xe0>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	60bb      	str	r3, [r7, #8]
}
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 80094f0:	4b0c      	ldr	r3, [pc, #48]	; (8009524 <vTaskDelete+0x114>)
 80094f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009500:	bf00      	nop
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20029bec 	.word	0x20029bec
 800950c:	2002a0dc 	.word	0x2002a0dc
 8009510:	2002a094 	.word	0x2002a094
 8009514:	2002a0a8 	.word	0x2002a0a8
 8009518:	2002a0c0 	.word	0x2002a0c0
 800951c:	2002a0cc 	.word	0x2002a0cc
 8009520:	2002a0e8 	.word	0x2002a0e8
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d01b      	beq.n	8009572 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <vTaskDelay+0x68>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <vTaskDelay+0x30>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	60bb      	str	r3, [r7, #8]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009558:	f000 f906 	bl	8009768 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	2023      	movs	r0, #35	; 0x23
 8009560:	f002 fcc0 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009564:	2100      	movs	r1, #0
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 ffc4 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800956c:	f000 f90a 	bl	8009784 <xTaskResumeAll>
 8009570:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d107      	bne.n	8009588 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <vTaskDelay+0x6c>)
 800957a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	2002a0e8 	.word	0x2002a0e8
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <eTaskGetState+0x28>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60bb      	str	r3, [r7, #8]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80095c0:	4b23      	ldr	r3, [pc, #140]	; (8009650 <eTaskGetState+0xb8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d102      	bne.n	80095d0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80095ca:	2300      	movs	r3, #0
 80095cc:	77fb      	strb	r3, [r7, #31]
 80095ce:	e03a      	b.n	8009646 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80095d0:	f001 fd38 	bl	800b044 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80095da:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <eTaskGetState+0xbc>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80095e0:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <eTaskGetState+0xc0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80095e6:	f001 fd5d 	bl	800b0a4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d003      	beq.n	80095fa <eTaskGetState+0x62>
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d102      	bne.n	8009600 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80095fa:	2302      	movs	r3, #2
 80095fc:	77fb      	strb	r3, [r7, #31]
 80095fe:	e022      	b.n	8009646 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	4a16      	ldr	r2, [pc, #88]	; (800965c <eTaskGetState+0xc4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d112      	bne.n	800962e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10b      	bne.n	8009628 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b01      	cmp	r3, #1
 800961a:	d102      	bne.n	8009622 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800961c:	2302      	movs	r3, #2
 800961e:	77fb      	strb	r3, [r7, #31]
 8009620:	e011      	b.n	8009646 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009622:	2303      	movs	r3, #3
 8009624:	77fb      	strb	r3, [r7, #31]
 8009626:	e00e      	b.n	8009646 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009628:	2302      	movs	r3, #2
 800962a:	77fb      	strb	r3, [r7, #31]
 800962c:	e00b      	b.n	8009646 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4a0b      	ldr	r2, [pc, #44]	; (8009660 <eTaskGetState+0xc8>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d002      	beq.n	800963c <eTaskGetState+0xa4>
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800963c:	2304      	movs	r3, #4
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e001      	b.n	8009646 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009642:	2301      	movs	r3, #1
 8009644:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009646:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009648:	4618      	mov	r0, r3
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20029bec 	.word	0x20029bec
 8009654:	2002a078 	.word	0x2002a078
 8009658:	2002a07c 	.word	0x2002a07c
 800965c:	2002a0ac 	.word	0x2002a0ac
 8009660:	2002a094 	.word	0x2002a094

08009664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800966e:	2300      	movs	r3, #0
 8009670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009672:	463a      	mov	r2, r7
 8009674:	1d39      	adds	r1, r7, #4
 8009676:	f107 0308 	add.w	r3, r7, #8
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fa72 	bl	8007b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	9202      	str	r2, [sp, #8]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	2300      	movs	r3, #0
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	2300      	movs	r3, #0
 8009690:	460a      	mov	r2, r1
 8009692:	492d      	ldr	r1, [pc, #180]	; (8009748 <vTaskStartScheduler+0xe4>)
 8009694:	482d      	ldr	r0, [pc, #180]	; (800974c <vTaskStartScheduler+0xe8>)
 8009696:	f7ff fce5 	bl	8009064 <xTaskCreateStatic>
 800969a:	4603      	mov	r3, r0
 800969c:	4a2c      	ldr	r2, [pc, #176]	; (8009750 <vTaskStartScheduler+0xec>)
 800969e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096a0:	4b2b      	ldr	r3, [pc, #172]	; (8009750 <vTaskStartScheduler+0xec>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096a8:	2301      	movs	r3, #1
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e001      	b.n	80096b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d102      	bne.n	80096be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096b8:	f000 ff70 	bl	800a59c <xTimerCreateTimerTask>
 80096bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d12e      	bne.n	8009722 <vTaskStartScheduler+0xbe>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	613b      	str	r3, [r7, #16]
}
 80096d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096d8:	4b1e      	ldr	r3, [pc, #120]	; (8009754 <vTaskStartScheduler+0xf0>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3354      	adds	r3, #84	; 0x54
 80096de:	4a1e      	ldr	r2, [pc, #120]	; (8009758 <vTaskStartScheduler+0xf4>)
 80096e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096e2:	4b1e      	ldr	r3, [pc, #120]	; (800975c <vTaskStartScheduler+0xf8>)
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096ea:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <vTaskStartScheduler+0xfc>)
 80096ec:	2201      	movs	r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096f0:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <vTaskStartScheduler+0x100>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80096f6:	4b17      	ldr	r3, [pc, #92]	; (8009754 <vTaskStartScheduler+0xf0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3334      	adds	r3, #52	; 0x34
 80096fc:	2205      	movs	r2, #5
 80096fe:	4912      	ldr	r1, [pc, #72]	; (8009748 <vTaskStartScheduler+0xe4>)
 8009700:	4618      	mov	r0, r3
 8009702:	f003 feba 	bl	800d47a <memcmp>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <vTaskStartScheduler+0xb4>
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <vTaskStartScheduler+0xf0>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4618      	mov	r0, r3
 8009712:	f003 f8ab 	bl	800c86c <SEGGER_SYSVIEW_OnTaskStartExec>
 8009716:	e001      	b.n	800971c <vTaskStartScheduler+0xb8>
 8009718:	f003 f84a 	bl	800c7b0 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800971c:	f001 fbf0 	bl	800af00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009720:	e00e      	b.n	8009740 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009728:	d10a      	bne.n	8009740 <vTaskStartScheduler+0xdc>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	60fb      	str	r3, [r7, #12]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <vTaskStartScheduler+0xda>
}
 8009740:	bf00      	nop
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0800e344 	.word	0x0800e344
 800974c:	08009f39 	.word	0x08009f39
 8009750:	2002a0e4 	.word	0x2002a0e4
 8009754:	20029bec 	.word	0x20029bec
 8009758:	2000035c 	.word	0x2000035c
 800975c:	2002a0e0 	.word	0x2002a0e0
 8009760:	2002a0cc 	.word	0x2002a0cc
 8009764:	2002a0c4 	.word	0x2002a0c4

08009768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800976c:	4b04      	ldr	r3, [pc, #16]	; (8009780 <vTaskSuspendAll+0x18>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	4a03      	ldr	r2, [pc, #12]	; (8009780 <vTaskSuspendAll+0x18>)
 8009774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009776:	bf00      	nop
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	2002a0e8 	.word	0x2002a0e8

08009784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009792:	4b44      	ldr	r3, [pc, #272]	; (80098a4 <xTaskResumeAll+0x120>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	603b      	str	r3, [r7, #0]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097b0:	f001 fc48 	bl	800b044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097b4:	4b3b      	ldr	r3, [pc, #236]	; (80098a4 <xTaskResumeAll+0x120>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	4a3a      	ldr	r2, [pc, #232]	; (80098a4 <xTaskResumeAll+0x120>)
 80097bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097be:	4b39      	ldr	r3, [pc, #228]	; (80098a4 <xTaskResumeAll+0x120>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d166      	bne.n	8009894 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097c6:	4b38      	ldr	r3, [pc, #224]	; (80098a8 <xTaskResumeAll+0x124>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d062      	beq.n	8009894 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ce:	e033      	b.n	8009838 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d0:	4b36      	ldr	r3, [pc, #216]	; (80098ac <xTaskResumeAll+0x128>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3318      	adds	r3, #24
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe fc6d 	bl	80080bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fc68 	bl	80080bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f003 f87e 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4b2d      	ldr	r3, [pc, #180]	; (80098b0 <xTaskResumeAll+0x12c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d903      	bls.n	8009808 <xTaskResumeAll+0x84>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	4a2a      	ldr	r2, [pc, #168]	; (80098b0 <xTaskResumeAll+0x12c>)
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4a27      	ldr	r2, [pc, #156]	; (80098b4 <xTaskResumeAll+0x130>)
 8009816:	441a      	add	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fe fbef 	bl	8008002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009828:	4b23      	ldr	r3, [pc, #140]	; (80098b8 <xTaskResumeAll+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	429a      	cmp	r2, r3
 8009830:	d302      	bcc.n	8009838 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8009832:	4b22      	ldr	r3, [pc, #136]	; (80098bc <xTaskResumeAll+0x138>)
 8009834:	2201      	movs	r2, #1
 8009836:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009838:	4b1c      	ldr	r3, [pc, #112]	; (80098ac <xTaskResumeAll+0x128>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1c7      	bne.n	80097d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009846:	f000 fc69 	bl	800a11c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800984a:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <xTaskResumeAll+0x13c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d010      	beq.n	8009878 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009856:	f000 f859 	bl	800990c <xTaskIncrementTick>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8009860:	4b16      	ldr	r3, [pc, #88]	; (80098bc <xTaskResumeAll+0x138>)
 8009862:	2201      	movs	r2, #1
 8009864:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3b01      	subs	r3, #1
 800986a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1f1      	bne.n	8009856 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8009872:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <xTaskResumeAll+0x13c>)
 8009874:	2200      	movs	r2, #0
 8009876:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009878:	4b10      	ldr	r3, [pc, #64]	; (80098bc <xTaskResumeAll+0x138>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009884:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <xTaskResumeAll+0x140>)
 8009886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009894:	f001 fc06 	bl	800b0a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009898:	68bb      	ldr	r3, [r7, #8]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	2002a0e8 	.word	0x2002a0e8
 80098a8:	2002a0c0 	.word	0x2002a0c0
 80098ac:	2002a080 	.word	0x2002a080
 80098b0:	2002a0c8 	.word	0x2002a0c8
 80098b4:	20029bf0 	.word	0x20029bf0
 80098b8:	20029bec 	.word	0x20029bec
 80098bc:	2002a0d4 	.word	0x2002a0d4
 80098c0:	2002a0d0 	.word	0x2002a0d0
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <xTaskGetTickCount+0x1c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098d4:	687b      	ldr	r3, [r7, #4]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	2002a0c4 	.word	0x2002a0c4

080098e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098ee:	f001 fc8b 	bl	800b208 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80098f2:	2300      	movs	r3, #0
 80098f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80098f6:	4b04      	ldr	r3, [pc, #16]	; (8009908 <xTaskGetTickCountFromISR+0x20>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098fc:	683b      	ldr	r3, [r7, #0]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	2002a0c4 	.word	0x2002a0c4

0800990c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009916:	4b51      	ldr	r3, [pc, #324]	; (8009a5c <xTaskIncrementTick+0x150>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f040 8093 	bne.w	8009a46 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009920:	4b4f      	ldr	r3, [pc, #316]	; (8009a60 <xTaskIncrementTick+0x154>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009928:	4a4d      	ldr	r2, [pc, #308]	; (8009a60 <xTaskIncrementTick+0x154>)
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d120      	bne.n	8009976 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009934:	4b4b      	ldr	r3, [pc, #300]	; (8009a64 <xTaskIncrementTick+0x158>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <xTaskIncrementTick+0x48>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	603b      	str	r3, [r7, #0]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <xTaskIncrementTick+0x46>
 8009954:	4b43      	ldr	r3, [pc, #268]	; (8009a64 <xTaskIncrementTick+0x158>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	4b43      	ldr	r3, [pc, #268]	; (8009a68 <xTaskIncrementTick+0x15c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a41      	ldr	r2, [pc, #260]	; (8009a64 <xTaskIncrementTick+0x158>)
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	4a41      	ldr	r2, [pc, #260]	; (8009a68 <xTaskIncrementTick+0x15c>)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	4b40      	ldr	r3, [pc, #256]	; (8009a6c <xTaskIncrementTick+0x160>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3301      	adds	r3, #1
 800996e:	4a3f      	ldr	r2, [pc, #252]	; (8009a6c <xTaskIncrementTick+0x160>)
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	f000 fbd3 	bl	800a11c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009976:	4b3e      	ldr	r3, [pc, #248]	; (8009a70 <xTaskIncrementTick+0x164>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	429a      	cmp	r2, r3
 800997e:	d34d      	bcc.n	8009a1c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009980:	4b38      	ldr	r3, [pc, #224]	; (8009a64 <xTaskIncrementTick+0x158>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d104      	bne.n	8009994 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998a:	4b39      	ldr	r3, [pc, #228]	; (8009a70 <xTaskIncrementTick+0x164>)
 800998c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009990:	601a      	str	r2, [r3, #0]
					break;
 8009992:	e043      	b.n	8009a1c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009994:	4b33      	ldr	r3, [pc, #204]	; (8009a64 <xTaskIncrementTick+0x158>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d203      	bcs.n	80099b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099ac:	4a30      	ldr	r2, [pc, #192]	; (8009a70 <xTaskIncrementTick+0x164>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099b2:	e033      	b.n	8009a1c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fb7f 	bl	80080bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	3318      	adds	r3, #24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fb76 	bl	80080bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f002 ff8c 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099dc:	4b25      	ldr	r3, [pc, #148]	; (8009a74 <xTaskIncrementTick+0x168>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d903      	bls.n	80099ec <xTaskIncrementTick+0xe0>
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	4a22      	ldr	r2, [pc, #136]	; (8009a74 <xTaskIncrementTick+0x168>)
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <xTaskIncrementTick+0x16c>)
 80099fa:	441a      	add	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3304      	adds	r3, #4
 8009a00:	4619      	mov	r1, r3
 8009a02:	4610      	mov	r0, r2
 8009a04:	f7fe fafd 	bl	8008002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	4b1b      	ldr	r3, [pc, #108]	; (8009a7c <xTaskIncrementTick+0x170>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d3b4      	bcc.n	8009980 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a16:	2301      	movs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a1a:	e7b1      	b.n	8009980 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a1c:	4b17      	ldr	r3, [pc, #92]	; (8009a7c <xTaskIncrementTick+0x170>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a22:	4915      	ldr	r1, [pc, #84]	; (8009a78 <xTaskIncrementTick+0x16c>)
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d901      	bls.n	8009a38 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a38:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <xTaskIncrementTick+0x174>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	e004      	b.n	8009a50 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a46:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <xTaskIncrementTick+0x178>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	4a0d      	ldr	r2, [pc, #52]	; (8009a84 <xTaskIncrementTick+0x178>)
 8009a4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a50:	697b      	ldr	r3, [r7, #20]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	2002a0e8 	.word	0x2002a0e8
 8009a60:	2002a0c4 	.word	0x2002a0c4
 8009a64:	2002a078 	.word	0x2002a078
 8009a68:	2002a07c 	.word	0x2002a07c
 8009a6c:	2002a0d8 	.word	0x2002a0d8
 8009a70:	2002a0e0 	.word	0x2002a0e0
 8009a74:	2002a0c8 	.word	0x2002a0c8
 8009a78:	20029bf0 	.word	0x20029bf0
 8009a7c:	20029bec 	.word	0x20029bec
 8009a80:	2002a0d4 	.word	0x2002a0d4
 8009a84:	2002a0d0 	.word	0x2002a0d0

08009a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a8e:	4b33      	ldr	r3, [pc, #204]	; (8009b5c <vTaskSwitchContext+0xd4>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a96:	4b32      	ldr	r3, [pc, #200]	; (8009b60 <vTaskSwitchContext+0xd8>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a9c:	e059      	b.n	8009b52 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <vTaskSwitchContext+0xd8>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa4:	4b2f      	ldr	r3, [pc, #188]	; (8009b64 <vTaskSwitchContext+0xdc>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	e010      	b.n	8009ace <vTaskSwitchContext+0x46>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	607b      	str	r3, [r7, #4]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <vTaskSwitchContext+0x3e>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	4926      	ldr	r1, [pc, #152]	; (8009b68 <vTaskSwitchContext+0xe0>)
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0e4      	beq.n	8009aac <vTaskSwitchContext+0x24>
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4a1e      	ldr	r2, [pc, #120]	; (8009b68 <vTaskSwitchContext+0xe0>)
 8009aee:	4413      	add	r3, r2
 8009af0:	60bb      	str	r3, [r7, #8]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	605a      	str	r2, [r3, #4]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	3308      	adds	r3, #8
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d104      	bne.n	8009b12 <vTaskSwitchContext+0x8a>
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4a14      	ldr	r2, [pc, #80]	; (8009b6c <vTaskSwitchContext+0xe4>)
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	4a11      	ldr	r2, [pc, #68]	; (8009b64 <vTaskSwitchContext+0xdc>)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009b22:	4b12      	ldr	r3, [pc, #72]	; (8009b6c <vTaskSwitchContext+0xe4>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3334      	adds	r3, #52	; 0x34
 8009b28:	2205      	movs	r2, #5
 8009b2a:	4911      	ldr	r1, [pc, #68]	; (8009b70 <vTaskSwitchContext+0xe8>)
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f003 fca4 	bl	800d47a <memcmp>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <vTaskSwitchContext+0xbc>
 8009b38:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <vTaskSwitchContext+0xe4>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f002 fe95 	bl	800c86c <SEGGER_SYSVIEW_OnTaskStartExec>
 8009b42:	e001      	b.n	8009b48 <vTaskSwitchContext+0xc0>
 8009b44:	f002 fe34 	bl	800c7b0 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b48:	4b08      	ldr	r3, [pc, #32]	; (8009b6c <vTaskSwitchContext+0xe4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3354      	adds	r3, #84	; 0x54
 8009b4e:	4a09      	ldr	r2, [pc, #36]	; (8009b74 <vTaskSwitchContext+0xec>)
 8009b50:	6013      	str	r3, [r2, #0]
}
 8009b52:	bf00      	nop
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	2002a0e8 	.word	0x2002a0e8
 8009b60:	2002a0d4 	.word	0x2002a0d4
 8009b64:	2002a0c8 	.word	0x2002a0c8
 8009b68:	20029bf0 	.word	0x20029bf0
 8009b6c:	20029bec 	.word	0x20029bec
 8009b70:	0800e344 	.word	0x0800e344
 8009b74:	2000035c 	.word	0x2000035c

08009b78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b9e:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <vTaskPlaceOnEventList+0x44>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3318      	adds	r3, #24
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fe fa4f 	bl	800804a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bac:	2101      	movs	r1, #1
 8009bae:	6838      	ldr	r0, [r7, #0]
 8009bb0:	f000 fca0 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20029bec 	.word	0x20029bec

08009bc0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	617b      	str	r3, [r7, #20]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009be8:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	613b      	str	r3, [r7, #16]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009c10:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c12:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3318      	adds	r3, #24
 8009c18:	4619      	mov	r1, r3
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7fe f9f1 	bl	8008002 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c20:	2101      	movs	r1, #1
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fc66 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
}
 8009c28:	bf00      	nop
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	2002a0e8 	.word	0x2002a0e8
 8009c34:	20029bec 	.word	0x20029bec

08009c38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	617b      	str	r3, [r7, #20]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vTaskPlaceOnEventListRestricted+0x58>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3318      	adds	r3, #24
 8009c66:	4619      	mov	r1, r3
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7fe f9ca 	bl	8008002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009c7a:	2024      	movs	r0, #36	; 0x24
 8009c7c:	f002 f914 	bl	800bea8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	68b8      	ldr	r0, [r7, #8]
 8009c84:	f000 fc36 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
	}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	20029bec 	.word	0x20029bec

08009c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	60fb      	str	r3, [r7, #12]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	3318      	adds	r3, #24
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe f9f9 	bl	80080bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cca:	4b20      	ldr	r3, [pc, #128]	; (8009d4c <xTaskRemoveFromEventList+0xb8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d121      	bne.n	8009d16 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe f9f0 	bl	80080bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f002 fe06 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce8:	4b19      	ldr	r3, [pc, #100]	; (8009d50 <xTaskRemoveFromEventList+0xbc>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d903      	bls.n	8009cf8 <xTaskRemoveFromEventList+0x64>
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	4a16      	ldr	r2, [pc, #88]	; (8009d50 <xTaskRemoveFromEventList+0xbc>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4a13      	ldr	r2, [pc, #76]	; (8009d54 <xTaskRemoveFromEventList+0xc0>)
 8009d06:	441a      	add	r2, r3
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7fe f977 	bl	8008002 <vListInsertEnd>
 8009d14:	e005      	b.n	8009d22 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	3318      	adds	r3, #24
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	480e      	ldr	r0, [pc, #56]	; (8009d58 <xTaskRemoveFromEventList+0xc4>)
 8009d1e:	f7fe f970 	bl	8008002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <xTaskRemoveFromEventList+0xc8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d905      	bls.n	8009d3c <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <xTaskRemoveFromEventList+0xcc>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	e001      	b.n	8009d40 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d40:	697b      	ldr	r3, [r7, #20]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	2002a0e8 	.word	0x2002a0e8
 8009d50:	2002a0c8 	.word	0x2002a0c8
 8009d54:	20029bf0 	.word	0x20029bf0
 8009d58:	2002a080 	.word	0x2002a080
 8009d5c:	20029bec 	.word	0x20029bec
 8009d60:	2002a0d4 	.word	0x2002a0d4

08009d64 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009d6e:	4b2b      	ldr	r3, [pc, #172]	; (8009e1c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10a      	bne.n	8009d8c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	613b      	str	r3, [r7, #16]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	60fb      	str	r3, [r7, #12]
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fe f97f 	bl	80080bc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe f97a 	bl	80080bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f002 fd90 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd4:	4b12      	ldr	r3, [pc, #72]	; (8009e20 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d903      	bls.n	8009de4 <vTaskRemoveFromUnorderedEventList+0x80>
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	4a0f      	ldr	r2, [pc, #60]	; (8009e20 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4a0c      	ldr	r2, [pc, #48]	; (8009e24 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009df2:	441a      	add	r2, r3
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	f7fe f901 	bl	8008002 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d902      	bls.n	8009e14 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <vTaskRemoveFromUnorderedEventList+0xc8>)
 8009e10:	2201      	movs	r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
	}
}
 8009e14:	bf00      	nop
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	2002a0e8 	.word	0x2002a0e8
 8009e20:	2002a0c8 	.word	0x2002a0c8
 8009e24:	20029bf0 	.word	0x20029bf0
 8009e28:	20029bec 	.word	0x20029bec
 8009e2c:	2002a0d4 	.word	0x2002a0d4

08009e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e38:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <vTaskInternalSetTimeOutState+0x24>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e40:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <vTaskInternalSetTimeOutState+0x28>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	2002a0d8 	.word	0x2002a0d8
 8009e58:	2002a0c4 	.word	0x2002a0c4

08009e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10a      	bne.n	8009e82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	613b      	str	r3, [r7, #16]
}
 8009e7e:	bf00      	nop
 8009e80:	e7fe      	b.n	8009e80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60fb      	str	r3, [r7, #12]
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e9e:	f001 f8d1 	bl	800b044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ea2:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <xTaskCheckForTimeOut+0xbc>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eba:	d102      	bne.n	8009ec2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
 8009ec0:	e023      	b.n	8009f0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <xTaskCheckForTimeOut+0xc0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d007      	beq.n	8009ede <xTaskCheckForTimeOut+0x82>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d302      	bcc.n	8009ede <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	e015      	b.n	8009f0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d20b      	bcs.n	8009f00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ff9b 	bl	8009e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e004      	b.n	8009f0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f0a:	f001 f8cb 	bl	800b0a4 <vPortExitCritical>

	return xReturn;
 8009f0e:	69fb      	ldr	r3, [r7, #28]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	2002a0c4 	.word	0x2002a0c4
 8009f1c:	2002a0d8 	.word	0x2002a0d8

08009f20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f20:	b480      	push	{r7}
 8009f22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f24:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <vTaskMissedYield+0x14>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
}
 8009f2a:	bf00      	nop
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	2002a0d4 	.word	0x2002a0d4

08009f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f40:	f000 f852 	bl	8009fe8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <prvIdleTask+0x28>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d9f9      	bls.n	8009f40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f4c:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <prvIdleTask+0x2c>)
 8009f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f5c:	e7f0      	b.n	8009f40 <prvIdleTask+0x8>
 8009f5e:	bf00      	nop
 8009f60:	20029bf0 	.word	0x20029bf0
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]
 8009f72:	e00c      	b.n	8009f8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <prvInitialiseTaskLists+0x60>)
 8009f80:	4413      	add	r3, r2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe f810 	bl	8007fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	607b      	str	r3, [r7, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b37      	cmp	r3, #55	; 0x37
 8009f92:	d9ef      	bls.n	8009f74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f94:	480d      	ldr	r0, [pc, #52]	; (8009fcc <prvInitialiseTaskLists+0x64>)
 8009f96:	f7fe f807 	bl	8007fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f9a:	480d      	ldr	r0, [pc, #52]	; (8009fd0 <prvInitialiseTaskLists+0x68>)
 8009f9c:	f7fe f804 	bl	8007fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fa0:	480c      	ldr	r0, [pc, #48]	; (8009fd4 <prvInitialiseTaskLists+0x6c>)
 8009fa2:	f7fe f801 	bl	8007fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fa6:	480c      	ldr	r0, [pc, #48]	; (8009fd8 <prvInitialiseTaskLists+0x70>)
 8009fa8:	f7fd fffe 	bl	8007fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fac:	480b      	ldr	r0, [pc, #44]	; (8009fdc <prvInitialiseTaskLists+0x74>)
 8009fae:	f7fd fffb 	bl	8007fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fb2:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <prvInitialiseTaskLists+0x78>)
 8009fb4:	4a05      	ldr	r2, [pc, #20]	; (8009fcc <prvInitialiseTaskLists+0x64>)
 8009fb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <prvInitialiseTaskLists+0x7c>)
 8009fba:	4a05      	ldr	r2, [pc, #20]	; (8009fd0 <prvInitialiseTaskLists+0x68>)
 8009fbc:	601a      	str	r2, [r3, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20029bf0 	.word	0x20029bf0
 8009fcc:	2002a050 	.word	0x2002a050
 8009fd0:	2002a064 	.word	0x2002a064
 8009fd4:	2002a080 	.word	0x2002a080
 8009fd8:	2002a094 	.word	0x2002a094
 8009fdc:	2002a0ac 	.word	0x2002a0ac
 8009fe0:	2002a078 	.word	0x2002a078
 8009fe4:	2002a07c 	.word	0x2002a07c

08009fe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fee:	e019      	b.n	800a024 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ff0:	f001 f828 	bl	800b044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff4:	4b10      	ldr	r3, [pc, #64]	; (800a038 <prvCheckTasksWaitingTermination+0x50>)
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe f85b 	bl	80080bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a006:	4b0d      	ldr	r3, [pc, #52]	; (800a03c <prvCheckTasksWaitingTermination+0x54>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	4a0b      	ldr	r2, [pc, #44]	; (800a03c <prvCheckTasksWaitingTermination+0x54>)
 800a00e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <prvCheckTasksWaitingTermination+0x58>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3b01      	subs	r3, #1
 800a016:	4a0a      	ldr	r2, [pc, #40]	; (800a040 <prvCheckTasksWaitingTermination+0x58>)
 800a018:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a01a:	f001 f843 	bl	800b0a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f848 	bl	800a0b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a024:	4b06      	ldr	r3, [pc, #24]	; (800a040 <prvCheckTasksWaitingTermination+0x58>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e1      	bne.n	8009ff0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a02c:	bf00      	nop
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	2002a094 	.word	0x2002a094
 800a03c:	2002a0c0 	.word	0x2002a0c0
 800a040:	2002a0a8 	.word	0x2002a0a8

0800a044 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a050:	e005      	b.n	800a05e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3301      	adds	r3, #1
 800a056:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2ba5      	cmp	r3, #165	; 0xa5
 800a064:	d0f5      	beq.n	800a052 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	089b      	lsrs	r3, r3, #2
 800a06a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	b29b      	uxth	r3, r3
	}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d102      	bne.n	800a090 <uxTaskGetStackHighWaterMark+0x14>
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <uxTaskGetStackHighWaterMark+0x34>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	e000      	b.n	800a092 <uxTaskGetStackHighWaterMark+0x16>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800a09a:	6938      	ldr	r0, [r7, #16]
 800a09c:	f7ff ffd2 	bl	800a044 <prvTaskCheckFreeStackSpace>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
	}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20029bec 	.word	0x20029bec

0800a0b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3354      	adds	r3, #84	; 0x54
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f003 fa03 	bl	800d4cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d108      	bne.n	800a0e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f001 f9a3 	bl	800b420 <vPortFree>
				vPortFree( pxTCB );
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 f9a0 	bl	800b420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0e0:	e018      	b.n	800a114 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d103      	bne.n	800a0f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 f997 	bl	800b420 <vPortFree>
	}
 800a0f2:	e00f      	b.n	800a114 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d00a      	beq.n	800a114 <prvDeleteTCB+0x60>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	60fb      	str	r3, [r7, #12]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <prvDeleteTCB+0x5e>
	}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <prvResetNextTaskUnblockTime+0x38>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <prvResetNextTaskUnblockTime+0x3c>)
 800a12e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a134:	e008      	b.n	800a148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a136:	4b07      	ldr	r3, [pc, #28]	; (800a154 <prvResetNextTaskUnblockTime+0x38>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	4a04      	ldr	r2, [pc, #16]	; (800a158 <prvResetNextTaskUnblockTime+0x3c>)
 800a146:	6013      	str	r3, [r2, #0]
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	2002a078 	.word	0x2002a078
 800a158:	2002a0e0 	.word	0x2002a0e0

0800a15c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <xTaskGetCurrentTaskHandle+0x1c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a168:	687b      	ldr	r3, [r7, #4]
	}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20029bec 	.word	0x20029bec

0800a17c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a182:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <xTaskGetSchedulerState+0x34>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d102      	bne.n	800a190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a18a:	2301      	movs	r3, #1
 800a18c:	607b      	str	r3, [r7, #4]
 800a18e:	e008      	b.n	800a1a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a190:	4b08      	ldr	r3, [pc, #32]	; (800a1b4 <xTaskGetSchedulerState+0x38>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d102      	bne.n	800a19e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a198:	2302      	movs	r3, #2
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	e001      	b.n	800a1a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1a2:	687b      	ldr	r3, [r7, #4]
	}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	2002a0cc 	.word	0x2002a0cc
 800a1b4:	2002a0e8 	.word	0x2002a0e8

0800a1b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d05a      	beq.n	800a284 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d2:	4b2f      	ldr	r3, [pc, #188]	; (800a290 <xTaskPriorityInherit+0xd8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d24a      	bcs.n	800a272 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	db06      	blt.n	800a1f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e4:	4b2a      	ldr	r3, [pc, #168]	; (800a290 <xTaskPriorityInherit+0xd8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	6959      	ldr	r1, [r3, #20]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4a24      	ldr	r2, [pc, #144]	; (800a294 <xTaskPriorityInherit+0xdc>)
 800a204:	4413      	add	r3, r2
 800a206:	4299      	cmp	r1, r3
 800a208:	d126      	bne.n	800a258 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	3304      	adds	r3, #4
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fd ff54 	bl	80080bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a214:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <xTaskPriorityInherit+0xd8>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	4618      	mov	r0, r3
 800a222:	f002 fb65 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <xTaskPriorityInherit+0xe0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d903      	bls.n	800a23a <xTaskPriorityInherit+0x82>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	4a18      	ldr	r2, [pc, #96]	; (800a298 <xTaskPriorityInherit+0xe0>)
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4a13      	ldr	r2, [pc, #76]	; (800a294 <xTaskPriorityInherit+0xdc>)
 800a248:	441a      	add	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	4610      	mov	r0, r2
 800a252:	f7fd fed6 	bl	8008002 <vListInsertEnd>
 800a256:	e004      	b.n	800a262 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a258:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <xTaskPriorityInherit+0xd8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4619      	mov	r1, r3
 800a266:	2049      	movs	r0, #73	; 0x49
 800a268:	f001 fe3c 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a26c:	2301      	movs	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e008      	b.n	800a284 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a276:	4b06      	ldr	r3, [pc, #24]	; (800a290 <xTaskPriorityInherit+0xd8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d201      	bcs.n	800a284 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a284:	68fb      	ldr	r3, [r7, #12]
	}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20029bec 	.word	0x20029bec
 800a294:	20029bf0 	.word	0x20029bf0
 800a298:	2002a0c8 	.word	0x2002a0c8

0800a29c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d05f      	beq.n	800a372 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2b2:	4b32      	ldr	r3, [pc, #200]	; (800a37c <xTaskPriorityDisinherit+0xe0>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d00a      	beq.n	800a2d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60fb      	str	r3, [r7, #12]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	60bb      	str	r3, [r7, #8]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f4:	1e5a      	subs	r2, r3, #1
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a302:	429a      	cmp	r2, r3
 800a304:	d035      	beq.n	800a372 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d131      	bne.n	800a372 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3304      	adds	r3, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f7fd fed2 	bl	80080bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4619      	mov	r1, r3
 800a31c:	204a      	movs	r0, #74	; 0x4a
 800a31e:	f001 fde1 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	4618      	mov	r0, r3
 800a33a:	f002 fad9 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a342:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <xTaskPriorityDisinherit+0xe4>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	429a      	cmp	r2, r3
 800a348:	d903      	bls.n	800a352 <xTaskPriorityDisinherit+0xb6>
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	4a0c      	ldr	r2, [pc, #48]	; (800a380 <xTaskPriorityDisinherit+0xe4>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4a09      	ldr	r2, [pc, #36]	; (800a384 <xTaskPriorityDisinherit+0xe8>)
 800a360:	441a      	add	r2, r3
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3304      	adds	r3, #4
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f7fd fe4a 	bl	8008002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a36e:	2301      	movs	r3, #1
 800a370:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a372:	697b      	ldr	r3, [r7, #20]
	}
 800a374:	4618      	mov	r0, r3
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20029bec 	.word	0x20029bec
 800a380:	2002a0c8 	.word	0x2002a0c8
 800a384:	20029bf0 	.word	0x20029bf0

0800a388 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a396:	2301      	movs	r3, #1
 800a398:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d073      	beq.n	800a488 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	60fb      	str	r3, [r7, #12]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d902      	bls.n	800a3ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	61fb      	str	r3, [r7, #28]
 800a3cc:	e002      	b.n	800a3d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d054      	beq.n	800a488 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d14f      	bne.n	800a488 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3e8:	4b29      	ldr	r3, [pc, #164]	; (800a490 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d10a      	bne.n	800a408 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	60bb      	str	r3, [r7, #8]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4619      	mov	r1, r3
 800a40c:	204a      	movs	r0, #74	; 0x4a
 800a40e:	f001 fd69 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	69fa      	ldr	r2, [r7, #28]
 800a41c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	2b00      	cmp	r3, #0
 800a424:	db04      	blt.n	800a430 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	6959      	ldr	r1, [r3, #20]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4a15      	ldr	r2, [pc, #84]	; (800a494 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a440:	4413      	add	r3, r2
 800a442:	4299      	cmp	r1, r3
 800a444:	d120      	bne.n	800a488 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fd fe36 	bl	80080bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	4618      	mov	r0, r3
 800a454:	f002 fa4c 	bl	800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	4b0e      	ldr	r3, [pc, #56]	; (800a498 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d903      	bls.n	800a46c <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	4a0b      	ldr	r2, [pc, #44]	; (800a498 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4a06      	ldr	r2, [pc, #24]	; (800a494 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a47a:	441a      	add	r2, r3
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f7fd fdbd 	bl	8008002 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a488:	bf00      	nop
 800a48a:	3720      	adds	r7, #32
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20029bec 	.word	0x20029bec
 800a494:	20029bf0 	.word	0x20029bf0
 800a498:	2002a0c8 	.word	0x2002a0c8

0800a49c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <uxTaskResetEventItemValue+0x2c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4aa:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <uxTaskResetEventItemValue+0x2c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <uxTaskResetEventItemValue+0x2c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a4b8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a4ba:	687b      	ldr	r3, [r7, #4]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	20029bec 	.word	0x20029bec

0800a4cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d004      	beq.n	800a4e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4de:	3201      	adds	r2, #1
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a4e2:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
	}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20029bec 	.word	0x20029bec

0800a4f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4fe:	4b21      	ldr	r3, [pc, #132]	; (800a584 <prvAddCurrentTaskToDelayedList+0x90>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a504:	4b20      	ldr	r3, [pc, #128]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3304      	adds	r3, #4
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd fdd6 	bl	80080bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a516:	d10a      	bne.n	800a52e <prvAddCurrentTaskToDelayedList+0x3a>
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a51e:	4b1a      	ldr	r3, [pc, #104]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3304      	adds	r3, #4
 800a524:	4619      	mov	r1, r3
 800a526:	4819      	ldr	r0, [pc, #100]	; (800a58c <prvAddCurrentTaskToDelayedList+0x98>)
 800a528:	f7fd fd6b 	bl	8008002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a52c:	e026      	b.n	800a57c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a536:	4b14      	ldr	r3, [pc, #80]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	429a      	cmp	r2, r3
 800a544:	d209      	bcs.n	800a55a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a546:	4b12      	ldr	r3, [pc, #72]	; (800a590 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fd fd79 	bl	800804a <vListInsert>
}
 800a558:	e010      	b.n	800a57c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a55a:	4b0e      	ldr	r3, [pc, #56]	; (800a594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7fd fd6f 	bl	800804a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a56c:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	d202      	bcs.n	800a57c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a576:	4a08      	ldr	r2, [pc, #32]	; (800a598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6013      	str	r3, [r2, #0]
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	2002a0c4 	.word	0x2002a0c4
 800a588:	20029bec 	.word	0x20029bec
 800a58c:	2002a0ac 	.word	0x2002a0ac
 800a590:	2002a07c 	.word	0x2002a07c
 800a594:	2002a078 	.word	0x2002a078
 800a598:	2002a0e0 	.word	0x2002a0e0

0800a59c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08a      	sub	sp, #40	; 0x28
 800a5a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5a6:	f000 fba1 	bl	800acec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5aa:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <xTimerCreateTimerTask+0x80>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d021      	beq.n	800a5f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ba:	1d3a      	adds	r2, r7, #4
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fd fae7 	bl	8007b98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	460a      	mov	r2, r1
 800a5dc:	4910      	ldr	r1, [pc, #64]	; (800a620 <xTimerCreateTimerTask+0x84>)
 800a5de:	4811      	ldr	r0, [pc, #68]	; (800a624 <xTimerCreateTimerTask+0x88>)
 800a5e0:	f7fe fd40 	bl	8009064 <xTaskCreateStatic>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4a10      	ldr	r2, [pc, #64]	; (800a628 <xTimerCreateTimerTask+0x8c>)
 800a5e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5ea:	4b0f      	ldr	r3, [pc, #60]	; (800a628 <xTimerCreateTimerTask+0x8c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	613b      	str	r3, [r7, #16]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a612:	697b      	ldr	r3, [r7, #20]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	2002a11c 	.word	0x2002a11c
 800a620:	0800e34c 	.word	0x0800e34c
 800a624:	0800a895 	.word	0x0800a895
 800a628:	2002a120 	.word	0x2002a120

0800a62c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a63a:	202c      	movs	r0, #44	; 0x2c
 800a63c:	f000 fe24 	bl	800b288 <pvPortMalloc>
 800a640:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00d      	beq.n	800a664 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f843 	bl	800a6ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a664:	697b      	ldr	r3, [r7, #20]
	}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b08a      	sub	sp, #40	; 0x28
 800a672:	af02      	add	r7, sp, #8
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	607a      	str	r2, [r7, #4]
 800a67a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a67c:	232c      	movs	r3, #44	; 0x2c
 800a67e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b2c      	cmp	r3, #44	; 0x2c
 800a684:	d00a      	beq.n	800a69c <xTimerCreateStatic+0x2e>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	61bb      	str	r3, [r7, #24]
}
 800a698:	bf00      	nop
 800a69a:	e7fe      	b.n	800a69a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a69c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xTimerCreateStatic+0x4c>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	617b      	str	r3, [r7, #20]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00d      	beq.n	800a6e0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f805 	bl	800a6ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
	}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3720      	adds	r7, #32
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b086      	sub	sp, #24
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	607a      	str	r2, [r7, #4]
 800a6f6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	617b      	str	r3, [r7, #20]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d01e      	beq.n	800a758 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a71a:	f000 fae7 	bl	800acec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	6a3a      	ldr	r2, [r7, #32]
 800a734:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	3304      	adds	r3, #4
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fd fc54 	bl	8007fe8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d008      	beq.n	800a758 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a74c:	f043 0304 	orr.w	r3, r3, #4
 800a750:	b2da      	uxtb	r2, r3
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a758:	bf00      	nop
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b08a      	sub	sp, #40	; 0x28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a76e:	2300      	movs	r3, #0
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	623b      	str	r3, [r7, #32]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a78e:	4b1a      	ldr	r3, [pc, #104]	; (800a7f8 <xTimerGenericCommand+0x98>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d02a      	beq.n	800a7ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b05      	cmp	r3, #5
 800a7a6:	dc18      	bgt.n	800a7da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7a8:	f7ff fce8 	bl	800a17c <xTaskGetSchedulerState>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d109      	bne.n	800a7c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a7b2:	4b11      	ldr	r3, [pc, #68]	; (800a7f8 <xTimerGenericCommand+0x98>)
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f107 0110 	add.w	r1, r7, #16
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7be:	f7fd fea1 	bl	8008504 <xQueueGenericSend>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a7c4:	e012      	b.n	800a7ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <xTimerGenericCommand+0x98>)
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f107 0110 	add.w	r1, r7, #16
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7fd fe97 	bl	8008504 <xQueueGenericSend>
 800a7d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a7d8:	e008      	b.n	800a7ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7da:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <xTimerGenericCommand+0x98>)
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	f107 0110 	add.w	r1, r7, #16
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	f7fd ffb3 	bl	8008750 <xQueueGenericSendFromISR>
 800a7ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3728      	adds	r7, #40	; 0x28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	2002a11c 	.word	0x2002a11c

0800a7fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af02      	add	r7, sp, #8
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a806:	4b22      	ldr	r3, [pc, #136]	; (800a890 <prvProcessExpiredTimer+0x94>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	3304      	adds	r3, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f7fd fc51 	bl	80080bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	d022      	beq.n	800a86e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	699a      	ldr	r2, [r3, #24]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	18d1      	adds	r1, r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	6978      	ldr	r0, [r7, #20]
 800a836:	f000 f8d1 	bl	800a9dc <prvInsertTimerInActiveList>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d01f      	beq.n	800a880 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a840:	2300      	movs	r3, #0
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	2300      	movs	r3, #0
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	2100      	movs	r1, #0
 800a84a:	6978      	ldr	r0, [r7, #20]
 800a84c:	f7ff ff88 	bl	800a760 <xTimerGenericCommand>
 800a850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d113      	bne.n	800a880 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	60fb      	str	r3, [r7, #12]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a874:	f023 0301 	bic.w	r3, r3, #1
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	6978      	ldr	r0, [r7, #20]
 800a886:	4798      	blx	r3
}
 800a888:	bf00      	nop
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2002a114 	.word	0x2002a114

0800a894 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 f857 	bl	800a954 <prvGetNextExpireTime>
 800a8a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 f803 	bl	800a8b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a8b2:	f000 f8d5 	bl	800aa60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8b6:	e7f1      	b.n	800a89c <prvTimerTask+0x8>

0800a8b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a8c2:	f7fe ff51 	bl	8009768 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 f866 	bl	800a99c <prvSampleTimeNow>
 800a8d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d130      	bne.n	800a93a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <prvProcessTimerOrBlockTask+0x3c>
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d806      	bhi.n	800a8f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a8e6:	f7fe ff4d 	bl	8009784 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff85 	bl	800a7fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8f2:	e024      	b.n	800a93e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d008      	beq.n	800a90c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8fa:	4b13      	ldr	r3, [pc, #76]	; (800a948 <prvProcessTimerOrBlockTask+0x90>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <prvProcessTimerOrBlockTask+0x50>
 800a904:	2301      	movs	r3, #1
 800a906:	e000      	b.n	800a90a <prvProcessTimerOrBlockTask+0x52>
 800a908:	2300      	movs	r3, #0
 800a90a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a90c:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <prvProcessTimerOrBlockTask+0x94>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	4619      	mov	r1, r3
 800a91a:	f7fe fb6f 	bl	8008ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a91e:	f7fe ff31 	bl	8009784 <xTaskResumeAll>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a928:	4b09      	ldr	r3, [pc, #36]	; (800a950 <prvProcessTimerOrBlockTask+0x98>)
 800a92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	f3bf 8f6f 	isb	sy
}
 800a938:	e001      	b.n	800a93e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a93a:	f7fe ff23 	bl	8009784 <xTaskResumeAll>
}
 800a93e:	bf00      	nop
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	2002a118 	.word	0x2002a118
 800a94c:	2002a11c 	.word	0x2002a11c
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a95c:	4b0e      	ldr	r3, [pc, #56]	; (800a998 <prvGetNextExpireTime+0x44>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <prvGetNextExpireTime+0x16>
 800a966:	2201      	movs	r2, #1
 800a968:	e000      	b.n	800a96c <prvGetNextExpireTime+0x18>
 800a96a:	2200      	movs	r2, #0
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d105      	bne.n	800a984 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a978:	4b07      	ldr	r3, [pc, #28]	; (800a998 <prvGetNextExpireTime+0x44>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e001      	b.n	800a988 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a988:	68fb      	ldr	r3, [r7, #12]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	2002a114 	.word	0x2002a114

0800a99c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a9a4:	f7fe ff90 	bl	80098c8 <xTaskGetTickCount>
 800a9a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a9aa:	4b0b      	ldr	r3, [pc, #44]	; (800a9d8 <prvSampleTimeNow+0x3c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d205      	bcs.n	800a9c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a9b4:	f000 f936 	bl	800ac24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	e002      	b.n	800a9c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a9c6:	4a04      	ldr	r2, [pc, #16]	; (800a9d8 <prvSampleTimeNow+0x3c>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	2002a124 	.word	0x2002a124

0800a9dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d812      	bhi.n	800aa28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d302      	bcc.n	800aa16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	e01b      	b.n	800aa4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <prvInsertTimerInActiveList+0x7c>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f7fd fb12 	bl	800804a <vListInsert>
 800aa26:	e012      	b.n	800aa4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d206      	bcs.n	800aa3e <prvInsertTimerInActiveList+0x62>
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d302      	bcc.n	800aa3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	e007      	b.n	800aa4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa3e:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <prvInsertTimerInActiveList+0x80>)
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3304      	adds	r3, #4
 800aa46:	4619      	mov	r1, r3
 800aa48:	4610      	mov	r0, r2
 800aa4a:	f7fd fafe 	bl	800804a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa4e:	697b      	ldr	r3, [r7, #20]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	2002a118 	.word	0x2002a118
 800aa5c:	2002a114 	.word	0x2002a114

0800aa60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08e      	sub	sp, #56	; 0x38
 800aa64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa66:	e0ca      	b.n	800abfe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	da18      	bge.n	800aaa0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa6e:	1d3b      	adds	r3, r7, #4
 800aa70:	3304      	adds	r3, #4
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	61fb      	str	r3, [r7, #28]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa96:	6850      	ldr	r0, [r2, #4]
 800aa98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa9a:	6892      	ldr	r2, [r2, #8]
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f2c0 80ab 	blt.w	800abfe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	3304      	adds	r3, #4
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fd faff 	bl	80080bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aabe:	463b      	mov	r3, r7
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff ff6b 	bl	800a99c <prvSampleTimeNow>
 800aac6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b09      	cmp	r3, #9
 800aacc:	f200 8096 	bhi.w	800abfc <prvProcessReceivedCommands+0x19c>
 800aad0:	a201      	add	r2, pc, #4	; (adr r2, 800aad8 <prvProcessReceivedCommands+0x78>)
 800aad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad6:	bf00      	nop
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800ab01 	.word	0x0800ab01
 800aae0:	0800ab01 	.word	0x0800ab01
 800aae4:	0800ab75 	.word	0x0800ab75
 800aae8:	0800ab89 	.word	0x0800ab89
 800aaec:	0800abd3 	.word	0x0800abd3
 800aaf0:	0800ab01 	.word	0x0800ab01
 800aaf4:	0800ab01 	.word	0x0800ab01
 800aaf8:	0800ab75 	.word	0x0800ab75
 800aafc:	0800ab89 	.word	0x0800ab89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	18d1      	adds	r1, r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab20:	f7ff ff5c 	bl	800a9dc <prvInsertTimerInActiveList>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d069      	beq.n	800abfe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d05e      	beq.n	800abfe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	441a      	add	r2, r3
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab52:	f7ff fe05 	bl	800a760 <xTimerGenericCommand>
 800ab56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d14f      	bne.n	800abfe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	61bb      	str	r3, [r7, #24]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab7a:	f023 0301 	bic.w	r3, r3, #1
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab86:	e03a      	b.n	800abfe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	617b      	str	r3, [r7, #20]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	18d1      	adds	r1, r2, r3
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abcc:	f7ff ff06 	bl	800a9dc <prvInsertTimerInActiveList>
					break;
 800abd0:	e015      	b.n	800abfe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd8:	f003 0302 	and.w	r3, r3, #2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d103      	bne.n	800abe8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800abe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe2:	f000 fc1d 	bl	800b420 <vPortFree>
 800abe6:	e00a      	b.n	800abfe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abee:	f023 0301 	bic.w	r3, r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abfa:	e000      	b.n	800abfe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800abfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abfe:	4b08      	ldr	r3, [pc, #32]	; (800ac20 <prvProcessReceivedCommands+0x1c0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	1d39      	adds	r1, r7, #4
 800ac04:	2200      	movs	r2, #0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fd fe52 	bl	80088b0 <xQueueReceive>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f47f af2a 	bne.w	800aa68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	3730      	adds	r7, #48	; 0x30
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	2002a11c 	.word	0x2002a11c

0800ac24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac2a:	e048      	b.n	800acbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac2c:	4b2d      	ldr	r3, [pc, #180]	; (800ace4 <prvSwitchTimerLists+0xc0>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac36:	4b2b      	ldr	r3, [pc, #172]	; (800ace4 <prvSwitchTimerLists+0xc0>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd fa39 	bl	80080bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d02e      	beq.n	800acbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4413      	add	r3, r2
 800ac68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d90e      	bls.n	800ac90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac7e:	4b19      	ldr	r3, [pc, #100]	; (800ace4 <prvSwitchTimerLists+0xc0>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3304      	adds	r3, #4
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f7fd f9de 	bl	800804a <vListInsert>
 800ac8e:	e016      	b.n	800acbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac90:	2300      	movs	r3, #0
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	2100      	movs	r1, #0
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fd60 	bl	800a760 <xTimerGenericCommand>
 800aca0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	603b      	str	r3, [r7, #0]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acbe:	4b09      	ldr	r3, [pc, #36]	; (800ace4 <prvSwitchTimerLists+0xc0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1b1      	bne.n	800ac2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800acc8:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <prvSwitchTimerLists+0xc0>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800acce:	4b06      	ldr	r3, [pc, #24]	; (800ace8 <prvSwitchTimerLists+0xc4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a04      	ldr	r2, [pc, #16]	; (800ace4 <prvSwitchTimerLists+0xc0>)
 800acd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800acd6:	4a04      	ldr	r2, [pc, #16]	; (800ace8 <prvSwitchTimerLists+0xc4>)
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	6013      	str	r3, [r2, #0]
}
 800acdc:	bf00      	nop
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	2002a114 	.word	0x2002a114
 800ace8:	2002a118 	.word	0x2002a118

0800acec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acf2:	f000 f9a7 	bl	800b044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acf6:	4b15      	ldr	r3, [pc, #84]	; (800ad4c <prvCheckForValidListAndQueue+0x60>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d120      	bne.n	800ad40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acfe:	4814      	ldr	r0, [pc, #80]	; (800ad50 <prvCheckForValidListAndQueue+0x64>)
 800ad00:	f7fd f952 	bl	8007fa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad04:	4813      	ldr	r0, [pc, #76]	; (800ad54 <prvCheckForValidListAndQueue+0x68>)
 800ad06:	f7fd f94f 	bl	8007fa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad0a:	4b13      	ldr	r3, [pc, #76]	; (800ad58 <prvCheckForValidListAndQueue+0x6c>)
 800ad0c:	4a10      	ldr	r2, [pc, #64]	; (800ad50 <prvCheckForValidListAndQueue+0x64>)
 800ad0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad10:	4b12      	ldr	r3, [pc, #72]	; (800ad5c <prvCheckForValidListAndQueue+0x70>)
 800ad12:	4a10      	ldr	r2, [pc, #64]	; (800ad54 <prvCheckForValidListAndQueue+0x68>)
 800ad14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ad16:	2300      	movs	r3, #0
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	4b11      	ldr	r3, [pc, #68]	; (800ad60 <prvCheckForValidListAndQueue+0x74>)
 800ad1c:	4a11      	ldr	r2, [pc, #68]	; (800ad64 <prvCheckForValidListAndQueue+0x78>)
 800ad1e:	2110      	movs	r1, #16
 800ad20:	200a      	movs	r0, #10
 800ad22:	f7fd fa5d 	bl	80081e0 <xQueueGenericCreateStatic>
 800ad26:	4603      	mov	r3, r0
 800ad28:	4a08      	ldr	r2, [pc, #32]	; (800ad4c <prvCheckForValidListAndQueue+0x60>)
 800ad2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad2c:	4b07      	ldr	r3, [pc, #28]	; (800ad4c <prvCheckForValidListAndQueue+0x60>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d005      	beq.n	800ad40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad34:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <prvCheckForValidListAndQueue+0x60>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	490b      	ldr	r1, [pc, #44]	; (800ad68 <prvCheckForValidListAndQueue+0x7c>)
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe f92c 	bl	8008f98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad40:	f000 f9b0 	bl	800b0a4 <vPortExitCritical>
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	2002a11c 	.word	0x2002a11c
 800ad50:	2002a0ec 	.word	0x2002a0ec
 800ad54:	2002a100 	.word	0x2002a100
 800ad58:	2002a114 	.word	0x2002a114
 800ad5c:	2002a118 	.word	0x2002a118
 800ad60:	2002a1c8 	.word	0x2002a1c8
 800ad64:	2002a128 	.word	0x2002a128
 800ad68:	0800e354 	.word	0x0800e354

0800ad6c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	60fb      	str	r3, [r7, #12]
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ad94:	f000 f956 	bl	800b044 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ad9e:	f000 f981 	bl	800b0a4 <vPortExitCritical>

	return pvReturn;
 800ada2:	693b      	ldr	r3, [r7, #16]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	; 0x28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800adba:	f06f 0301 	mvn.w	r3, #1
 800adbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adcc:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <xTimerPendFunctionCallFromISR+0x3c>)
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	f107 0114 	add.w	r1, r7, #20
 800add4:	2300      	movs	r3, #0
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	f7fd fcba 	bl	8008750 <xQueueGenericSendFromISR>
 800addc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3728      	adds	r7, #40	; 0x28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	2002a11c 	.word	0x2002a11c

0800adec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3b04      	subs	r3, #4
 800adfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3b04      	subs	r3, #4
 800ae0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f023 0201 	bic.w	r2, r3, #1
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3b04      	subs	r3, #4
 800ae1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae1c:	4a0c      	ldr	r2, [pc, #48]	; (800ae50 <pxPortInitialiseStack+0x64>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3b14      	subs	r3, #20
 800ae26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3b04      	subs	r3, #4
 800ae32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f06f 0202 	mvn.w	r2, #2
 800ae3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3b20      	subs	r3, #32
 800ae40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae42:	68fb      	ldr	r3, [r7, #12]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	0800ae55 	.word	0x0800ae55

0800ae54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae5e:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <prvTaskExitError+0x54>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae66:	d00a      	beq.n	800ae7e <prvTaskExitError+0x2a>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	60fb      	str	r3, [r7, #12]
}
 800ae7a:	bf00      	nop
 800ae7c:	e7fe      	b.n	800ae7c <prvTaskExitError+0x28>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	60bb      	str	r3, [r7, #8]
}
 800ae90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae92:	bf00      	nop
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0fc      	beq.n	800ae94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae9a:	bf00      	nop
 800ae9c:	bf00      	nop
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20000300 	.word	0x20000300
 800aeac:	00000000 	.word	0x00000000

0800aeb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aeb0:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <pxCurrentTCBConst2>)
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	6808      	ldr	r0, [r1, #0]
 800aeb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	f380 8809 	msr	PSP, r0
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f04f 0000 	mov.w	r0, #0
 800aec6:	f380 8811 	msr	BASEPRI, r0
 800aeca:	4770      	bx	lr
 800aecc:	f3af 8000 	nop.w

0800aed0 <pxCurrentTCBConst2>:
 800aed0:	20029bec 	.word	0x20029bec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop

0800aed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aed8:	4808      	ldr	r0, [pc, #32]	; (800aefc <prvPortStartFirstTask+0x24>)
 800aeda:	6800      	ldr	r0, [r0, #0]
 800aedc:	6800      	ldr	r0, [r0, #0]
 800aede:	f380 8808 	msr	MSP, r0
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	f380 8814 	msr	CONTROL, r0
 800aeea:	b662      	cpsie	i
 800aeec:	b661      	cpsie	f
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	df00      	svc	0
 800aef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aefa:	bf00      	nop
 800aefc:	e000ed08 	.word	0xe000ed08

0800af00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af06:	4b46      	ldr	r3, [pc, #280]	; (800b020 <xPortStartScheduler+0x120>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a46      	ldr	r2, [pc, #280]	; (800b024 <xPortStartScheduler+0x124>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d10a      	bne.n	800af26 <xPortStartScheduler+0x26>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	613b      	str	r3, [r7, #16]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af26:	4b3e      	ldr	r3, [pc, #248]	; (800b020 <xPortStartScheduler+0x120>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a3f      	ldr	r2, [pc, #252]	; (800b028 <xPortStartScheduler+0x128>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d10a      	bne.n	800af46 <xPortStartScheduler+0x46>
	__asm volatile
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	60fb      	str	r3, [r7, #12]
}
 800af42:	bf00      	nop
 800af44:	e7fe      	b.n	800af44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af46:	4b39      	ldr	r3, [pc, #228]	; (800b02c <xPortStartScheduler+0x12c>)
 800af48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	22ff      	movs	r2, #255	; 0xff
 800af56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	4b31      	ldr	r3, [pc, #196]	; (800b030 <xPortStartScheduler+0x130>)
 800af6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af6e:	4b31      	ldr	r3, [pc, #196]	; (800b034 <xPortStartScheduler+0x134>)
 800af70:	2207      	movs	r2, #7
 800af72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af74:	e009      	b.n	800af8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800af76:	4b2f      	ldr	r3, [pc, #188]	; (800b034 <xPortStartScheduler+0x134>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	4a2d      	ldr	r2, [pc, #180]	; (800b034 <xPortStartScheduler+0x134>)
 800af7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	b2db      	uxtb	r3, r3
 800af84:	005b      	lsls	r3, r3, #1
 800af86:	b2db      	uxtb	r3, r3
 800af88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af8a:	78fb      	ldrb	r3, [r7, #3]
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af92:	2b80      	cmp	r3, #128	; 0x80
 800af94:	d0ef      	beq.n	800af76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af96:	4b27      	ldr	r3, [pc, #156]	; (800b034 <xPortStartScheduler+0x134>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1c3 0307 	rsb	r3, r3, #7
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	d00a      	beq.n	800afb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	60bb      	str	r3, [r7, #8]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afb8:	4b1e      	ldr	r3, [pc, #120]	; (800b034 <xPortStartScheduler+0x134>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	4a1d      	ldr	r2, [pc, #116]	; (800b034 <xPortStartScheduler+0x134>)
 800afc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afc2:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <xPortStartScheduler+0x134>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afca:	4a1a      	ldr	r2, [pc, #104]	; (800b034 <xPortStartScheduler+0x134>)
 800afcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afd6:	4b18      	ldr	r3, [pc, #96]	; (800b038 <xPortStartScheduler+0x138>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a17      	ldr	r2, [pc, #92]	; (800b038 <xPortStartScheduler+0x138>)
 800afdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afe2:	4b15      	ldr	r3, [pc, #84]	; (800b038 <xPortStartScheduler+0x138>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a14      	ldr	r2, [pc, #80]	; (800b038 <xPortStartScheduler+0x138>)
 800afe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800afec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afee:	f000 f8dd 	bl	800b1ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aff2:	4b12      	ldr	r3, [pc, #72]	; (800b03c <xPortStartScheduler+0x13c>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aff8:	f000 f8fc 	bl	800b1f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800affc:	4b10      	ldr	r3, [pc, #64]	; (800b040 <xPortStartScheduler+0x140>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a0f      	ldr	r2, [pc, #60]	; (800b040 <xPortStartScheduler+0x140>)
 800b002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b008:	f7ff ff66 	bl	800aed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b00c:	f7fe fd3c 	bl	8009a88 <vTaskSwitchContext>
	prvTaskExitError();
 800b010:	f7ff ff20 	bl	800ae54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	e000ed00 	.word	0xe000ed00
 800b024:	410fc271 	.word	0x410fc271
 800b028:	410fc270 	.word	0x410fc270
 800b02c:	e000e400 	.word	0xe000e400
 800b030:	2002a218 	.word	0x2002a218
 800b034:	2002a21c 	.word	0x2002a21c
 800b038:	e000ed20 	.word	0xe000ed20
 800b03c:	20000300 	.word	0x20000300
 800b040:	e000ef34 	.word	0xe000ef34

0800b044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	607b      	str	r3, [r7, #4]
}
 800b05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b05e:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <vPortEnterCritical+0x58>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	4a0d      	ldr	r2, [pc, #52]	; (800b09c <vPortEnterCritical+0x58>)
 800b066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b068:	4b0c      	ldr	r3, [pc, #48]	; (800b09c <vPortEnterCritical+0x58>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d10f      	bne.n	800b090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b070:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <vPortEnterCritical+0x5c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00a      	beq.n	800b090 <vPortEnterCritical+0x4c>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	603b      	str	r3, [r7, #0]
}
 800b08c:	bf00      	nop
 800b08e:	e7fe      	b.n	800b08e <vPortEnterCritical+0x4a>
	}
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	20000300 	.word	0x20000300
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0aa:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <vPortExitCritical+0x50>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10a      	bne.n	800b0c8 <vPortExitCritical+0x24>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	607b      	str	r3, [r7, #4]
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <vPortExitCritical+0x50>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	4a09      	ldr	r2, [pc, #36]	; (800b0f4 <vPortExitCritical+0x50>)
 800b0d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0d2:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <vPortExitCritical+0x50>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d105      	bne.n	800b0e6 <vPortExitCritical+0x42>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	f383 8811 	msr	BASEPRI, r3
}
 800b0e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	20000300 	.word	0x20000300
	...

0800b100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b100:	f3ef 8009 	mrs	r0, PSP
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	4b15      	ldr	r3, [pc, #84]	; (800b160 <pxCurrentTCBConst>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	f01e 0f10 	tst.w	lr, #16
 800b110:	bf08      	it	eq
 800b112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11a:	6010      	str	r0, [r2, #0]
 800b11c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b120:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b124:	f380 8811 	msr	BASEPRI, r0
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f7fe fcaa 	bl	8009a88 <vTaskSwitchContext>
 800b134:	f04f 0000 	mov.w	r0, #0
 800b138:	f380 8811 	msr	BASEPRI, r0
 800b13c:	bc09      	pop	{r0, r3}
 800b13e:	6819      	ldr	r1, [r3, #0]
 800b140:	6808      	ldr	r0, [r1, #0]
 800b142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b146:	f01e 0f10 	tst.w	lr, #16
 800b14a:	bf08      	it	eq
 800b14c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b150:	f380 8809 	msr	PSP, r0
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	f3af 8000 	nop.w

0800b160 <pxCurrentTCBConst>:
 800b160:	20029bec 	.word	0x20029bec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop

0800b168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	607b      	str	r3, [r7, #4]
}
 800b180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b182:	f7fe fbc3 	bl	800990c <xTaskIncrementTick>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <xPortSysTickHandler+0x40>)
 800b18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	2300      	movs	r3, #0
 800b196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	f383 8811 	msr	BASEPRI, r3
}
 800b19e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	e000ed04 	.word	0xe000ed04

0800b1ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <vPortSetupTimerInterrupt+0x34>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1b6:	4b0b      	ldr	r3, [pc, #44]	; (800b1e4 <vPortSetupTimerInterrupt+0x38>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <vPortSetupTimerInterrupt+0x3c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a0a      	ldr	r2, [pc, #40]	; (800b1ec <vPortSetupTimerInterrupt+0x40>)
 800b1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c6:	099b      	lsrs	r3, r3, #6
 800b1c8:	4a09      	ldr	r2, [pc, #36]	; (800b1f0 <vPortSetupTimerInterrupt+0x44>)
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1ce:	4b04      	ldr	r3, [pc, #16]	; (800b1e0 <vPortSetupTimerInterrupt+0x34>)
 800b1d0:	2207      	movs	r2, #7
 800b1d2:	601a      	str	r2, [r3, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	e000e010 	.word	0xe000e010
 800b1e4:	e000e018 	.word	0xe000e018
 800b1e8:	200002f4 	.word	0x200002f4
 800b1ec:	10624dd3 	.word	0x10624dd3
 800b1f0:	e000e014 	.word	0xe000e014

0800b1f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b204 <vPortEnableVFP+0x10>
 800b1f8:	6801      	ldr	r1, [r0, #0]
 800b1fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b1fe:	6001      	str	r1, [r0, #0]
 800b200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b202:	bf00      	nop
 800b204:	e000ed88 	.word	0xe000ed88

0800b208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b20e:	f3ef 8305 	mrs	r3, IPSR
 800b212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b0f      	cmp	r3, #15
 800b218:	d914      	bls.n	800b244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <vPortValidateInterruptPriority+0x70>)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4413      	add	r3, r2
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b224:	4b15      	ldr	r3, [pc, #84]	; (800b27c <vPortValidateInterruptPriority+0x74>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	7afa      	ldrb	r2, [r7, #11]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d20a      	bcs.n	800b244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	607b      	str	r3, [r7, #4]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b244:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <vPortValidateInterruptPriority+0x78>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b24c:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <vPortValidateInterruptPriority+0x7c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d90a      	bls.n	800b26a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	603b      	str	r3, [r7, #0]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <vPortValidateInterruptPriority+0x60>
	}
 800b26a:	bf00      	nop
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	e000e3f0 	.word	0xe000e3f0
 800b27c:	2002a218 	.word	0x2002a218
 800b280:	e000ed0c 	.word	0xe000ed0c
 800b284:	2002a21c 	.word	0x2002a21c

0800b288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b294:	f7fe fa68 	bl	8009768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b298:	4b5b      	ldr	r3, [pc, #364]	; (800b408 <pvPortMalloc+0x180>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2a0:	f000 f920 	bl	800b4e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2a4:	4b59      	ldr	r3, [pc, #356]	; (800b40c <pvPortMalloc+0x184>)
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f040 8093 	bne.w	800b3d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01d      	beq.n	800b2f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b2b8:	2208      	movs	r2, #8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4413      	add	r3, r2
 800b2be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f003 0307 	and.w	r3, r3, #7
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d014      	beq.n	800b2f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f023 0307 	bic.w	r3, r3, #7
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <pvPortMalloc+0x6c>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	617b      	str	r3, [r7, #20]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d06e      	beq.n	800b3d8 <pvPortMalloc+0x150>
 800b2fa:	4b45      	ldr	r3, [pc, #276]	; (800b410 <pvPortMalloc+0x188>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	429a      	cmp	r2, r3
 800b302:	d869      	bhi.n	800b3d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b304:	4b43      	ldr	r3, [pc, #268]	; (800b414 <pvPortMalloc+0x18c>)
 800b306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b308:	4b42      	ldr	r3, [pc, #264]	; (800b414 <pvPortMalloc+0x18c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b30e:	e004      	b.n	800b31a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	429a      	cmp	r2, r3
 800b322:	d903      	bls.n	800b32c <pvPortMalloc+0xa4>
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f1      	bne.n	800b310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b32c:	4b36      	ldr	r3, [pc, #216]	; (800b408 <pvPortMalloc+0x180>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b332:	429a      	cmp	r2, r3
 800b334:	d050      	beq.n	800b3d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2208      	movs	r2, #8
 800b33c:	4413      	add	r3, r2
 800b33e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	2308      	movs	r3, #8
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	429a      	cmp	r2, r3
 800b356:	d91f      	bls.n	800b398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4413      	add	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <pvPortMalloc+0xf8>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	613b      	str	r3, [r7, #16]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	1ad2      	subs	r2, r2, r3
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b392:	69b8      	ldr	r0, [r7, #24]
 800b394:	f000 f908 	bl	800b5a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b398:	4b1d      	ldr	r3, [pc, #116]	; (800b410 <pvPortMalloc+0x188>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	4a1b      	ldr	r2, [pc, #108]	; (800b410 <pvPortMalloc+0x188>)
 800b3a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3a6:	4b1a      	ldr	r3, [pc, #104]	; (800b410 <pvPortMalloc+0x188>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	4b1b      	ldr	r3, [pc, #108]	; (800b418 <pvPortMalloc+0x190>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d203      	bcs.n	800b3ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3b2:	4b17      	ldr	r3, [pc, #92]	; (800b410 <pvPortMalloc+0x188>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a18      	ldr	r2, [pc, #96]	; (800b418 <pvPortMalloc+0x190>)
 800b3b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	4b13      	ldr	r3, [pc, #76]	; (800b40c <pvPortMalloc+0x184>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3ce:	4b13      	ldr	r3, [pc, #76]	; (800b41c <pvPortMalloc+0x194>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	4a11      	ldr	r2, [pc, #68]	; (800b41c <pvPortMalloc+0x194>)
 800b3d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3d8:	f7fe f9d4 	bl	8009784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	f003 0307 	and.w	r3, r3, #7
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00a      	beq.n	800b3fc <pvPortMalloc+0x174>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	60fb      	str	r3, [r7, #12]
}
 800b3f8:	bf00      	nop
 800b3fa:	e7fe      	b.n	800b3fa <pvPortMalloc+0x172>
	return pvReturn;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3728      	adds	r7, #40	; 0x28
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	2002de28 	.word	0x2002de28
 800b40c:	2002de3c 	.word	0x2002de3c
 800b410:	2002de2c 	.word	0x2002de2c
 800b414:	2002de20 	.word	0x2002de20
 800b418:	2002de30 	.word	0x2002de30
 800b41c:	2002de34 	.word	0x2002de34

0800b420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d04d      	beq.n	800b4ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b432:	2308      	movs	r3, #8
 800b434:	425b      	negs	r3, r3
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	4413      	add	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	4b24      	ldr	r3, [pc, #144]	; (800b4d8 <vPortFree+0xb8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4013      	ands	r3, r2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <vPortFree+0x44>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	60fb      	str	r3, [r7, #12]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <vPortFree+0x62>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	60bb      	str	r3, [r7, #8]
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <vPortFree+0xb8>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4013      	ands	r3, r2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01e      	beq.n	800b4ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d11a      	bne.n	800b4ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	4b0e      	ldr	r3, [pc, #56]	; (800b4d8 <vPortFree+0xb8>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	43db      	mvns	r3, r3
 800b4a2:	401a      	ands	r2, r3
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4a8:	f7fe f95e 	bl	8009768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	4b0a      	ldr	r3, [pc, #40]	; (800b4dc <vPortFree+0xbc>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	4a09      	ldr	r2, [pc, #36]	; (800b4dc <vPortFree+0xbc>)
 800b4b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4ba:	6938      	ldr	r0, [r7, #16]
 800b4bc:	f000 f874 	bl	800b5a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <vPortFree+0xc0>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	4a06      	ldr	r2, [pc, #24]	; (800b4e0 <vPortFree+0xc0>)
 800b4c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4ca:	f7fe f95b 	bl	8009784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4ce:	bf00      	nop
 800b4d0:	3718      	adds	r7, #24
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2002de3c 	.word	0x2002de3c
 800b4dc:	2002de2c 	.word	0x2002de2c
 800b4e0:	2002de38 	.word	0x2002de38

0800b4e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b4ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4f0:	4b27      	ldr	r3, [pc, #156]	; (800b590 <prvHeapInit+0xac>)
 800b4f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f003 0307 	and.w	r3, r3, #7
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00c      	beq.n	800b518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3307      	adds	r3, #7
 800b502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 0307 	bic.w	r3, r3, #7
 800b50a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	4a1f      	ldr	r2, [pc, #124]	; (800b590 <prvHeapInit+0xac>)
 800b514:	4413      	add	r3, r2
 800b516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b51c:	4a1d      	ldr	r2, [pc, #116]	; (800b594 <prvHeapInit+0xb0>)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b522:	4b1c      	ldr	r3, [pc, #112]	; (800b594 <prvHeapInit+0xb0>)
 800b524:	2200      	movs	r2, #0
 800b526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	4413      	add	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b530:	2208      	movs	r2, #8
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	1a9b      	subs	r3, r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f023 0307 	bic.w	r3, r3, #7
 800b53e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4a15      	ldr	r2, [pc, #84]	; (800b598 <prvHeapInit+0xb4>)
 800b544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <prvHeapInit+0xb4>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2200      	movs	r2, #0
 800b54c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b54e:	4b12      	ldr	r3, [pc, #72]	; (800b598 <prvHeapInit+0xb4>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b564:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <prvHeapInit+0xb4>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	4a0a      	ldr	r2, [pc, #40]	; (800b59c <prvHeapInit+0xb8>)
 800b572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4a09      	ldr	r2, [pc, #36]	; (800b5a0 <prvHeapInit+0xbc>)
 800b57a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b57c:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <prvHeapInit+0xc0>)
 800b57e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b582:	601a      	str	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	2002a220 	.word	0x2002a220
 800b594:	2002de20 	.word	0x2002de20
 800b598:	2002de28 	.word	0x2002de28
 800b59c:	2002de30 	.word	0x2002de30
 800b5a0:	2002de2c 	.word	0x2002de2c
 800b5a4:	2002de3c 	.word	0x2002de3c

0800b5a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5b0:	4b28      	ldr	r3, [pc, #160]	; (800b654 <prvInsertBlockIntoFreeList+0xac>)
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	e002      	b.n	800b5bc <prvInsertBlockIntoFreeList+0x14>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d8f7      	bhi.n	800b5b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d108      	bne.n	800b5ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	441a      	add	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d118      	bne.n	800b630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	4b15      	ldr	r3, [pc, #84]	; (800b658 <prvInsertBlockIntoFreeList+0xb0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d00d      	beq.n	800b626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	441a      	add	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	e008      	b.n	800b638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b626:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <prvInsertBlockIntoFreeList+0xb0>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	e003      	b.n	800b638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d002      	beq.n	800b646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b646:	bf00      	nop
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2002de20 	.word	0x2002de20
 800b658:	2002de28 	.word	0x2002de28

0800b65c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b662:	4b24      	ldr	r3, [pc, #144]	; (800b6f4 <_DoInit+0x98>)
 800b664:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2203      	movs	r2, #3
 800b66a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2203      	movs	r2, #3
 800b670:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a20      	ldr	r2, [pc, #128]	; (800b6f8 <_DoInit+0x9c>)
 800b676:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a20      	ldr	r2, [pc, #128]	; (800b6fc <_DoInit+0xa0>)
 800b67c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b684:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a17      	ldr	r2, [pc, #92]	; (800b6f8 <_DoInit+0x9c>)
 800b69c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a17      	ldr	r2, [pc, #92]	; (800b700 <_DoInit+0xa4>)
 800b6a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2210      	movs	r2, #16
 800b6a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3307      	adds	r3, #7
 800b6c0:	4a10      	ldr	r2, [pc, #64]	; (800b704 <_DoInit+0xa8>)
 800b6c2:	6810      	ldr	r0, [r2, #0]
 800b6c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b6c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a0e      	ldr	r2, [pc, #56]	; (800b708 <_DoInit+0xac>)
 800b6ce:	6810      	ldr	r0, [r2, #0]
 800b6d0:	6018      	str	r0, [r3, #0]
 800b6d2:	8891      	ldrh	r1, [r2, #4]
 800b6d4:	7992      	ldrb	r2, [r2, #6]
 800b6d6:	8099      	strh	r1, [r3, #4]
 800b6d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b6da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b6e4:	f3bf 8f5f 	dmb	sy
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	2002de40 	.word	0x2002de40
 800b6f8:	0800e35c 	.word	0x0800e35c
 800b6fc:	2002dee8 	.word	0x2002dee8
 800b700:	2002e2e8 	.word	0x2002e2e8
 800b704:	0800e368 	.word	0x0800e368
 800b708:	0800e36c 	.word	0x0800e36c

0800b70c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08c      	sub	sp, #48	; 0x30
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b718:	4b3e      	ldr	r3, [pc, #248]	; (800b814 <SEGGER_RTT_ReadNoLock+0x108>)
 800b71a:	623b      	str	r3, [r7, #32]
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d101      	bne.n	800b72a <SEGGER_RTT_ReadNoLock+0x1e>
 800b726:	f7ff ff99 	bl	800b65c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	3360      	adds	r3, #96	; 0x60
 800b736:	4a37      	ldr	r2, [pc, #220]	; (800b814 <SEGGER_RTT_ReadNoLock+0x108>)
 800b738:	4413      	add	r3, r2
 800b73a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b74c:	2300      	movs	r3, #0
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	429a      	cmp	r2, r3
 800b756:	d92b      	bls.n	800b7b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	689a      	ldr	r2, [r3, #8]
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4293      	cmp	r3, r2
 800b768:	bf28      	it	cs
 800b76a:	4613      	movcs	r3, r2
 800b76c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	4413      	add	r3, r2
 800b776:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	6939      	ldr	r1, [r7, #16]
 800b77c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b77e:	f001 ff5e 	bl	800d63e <memcpy>
    NumBytesRead += NumBytesRem;
 800b782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	4413      	add	r3, r2
 800b788:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	4413      	add	r3, r2
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	4413      	add	r3, r2
 800b7a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d101      	bne.n	800b7b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	bf28      	it	cs
 800b7c0:	4613      	movcs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d019      	beq.n	800b7fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d0:	4413      	add	r3, r2
 800b7d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	6939      	ldr	r1, [r7, #16]
 800b7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7da:	f001 ff30 	bl	800d63e <memcpy>
    NumBytesRead += NumBytesRem;
 800b7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b808:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3730      	adds	r7, #48	; 0x30
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	2002de40 	.word	0x2002de40

0800b818 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
 800b824:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b826:	4b3d      	ldr	r3, [pc, #244]	; (800b91c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <SEGGER_RTT_AllocUpBuffer+0x20>
 800b834:	f7ff ff12 	bl	800b65c <_DoInit>
  SEGGER_RTT_LOCK();
 800b838:	f3ef 8311 	mrs	r3, BASEPRI
 800b83c:	f04f 0120 	mov.w	r1, #32
 800b840:	f381 8811 	msr	BASEPRI, r1
 800b844:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b846:	4b35      	ldr	r3, [pc, #212]	; (800b91c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b848:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b84e:	6939      	ldr	r1, [r7, #16]
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	4613      	mov	r3, r2
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	4413      	add	r3, r2
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	440b      	add	r3, r1
 800b85e:	3304      	adds	r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d008      	beq.n	800b878 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	3301      	adds	r3, #1
 800b86a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	69fa      	ldr	r2, [r7, #28]
 800b872:	429a      	cmp	r2, r3
 800b874:	dbeb      	blt.n	800b84e <SEGGER_RTT_AllocUpBuffer+0x36>
 800b876:	e000      	b.n	800b87a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b878:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	429a      	cmp	r2, r3
 800b882:	da3f      	bge.n	800b904 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b884:	6939      	ldr	r1, [r7, #16]
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	4613      	mov	r3, r2
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	4413      	add	r3, r2
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	440b      	add	r3, r1
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b898:	6939      	ldr	r1, [r7, #16]
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	4613      	mov	r3, r2
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	4413      	add	r3, r2
 800b8a4:	00db      	lsls	r3, r3, #3
 800b8a6:	440b      	add	r3, r1
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b8ae:	6939      	ldr	r1, [r7, #16]
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	4413      	add	r3, r2
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	440b      	add	r3, r1
 800b8bc:	3320      	adds	r3, #32
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b8c2:	6939      	ldr	r1, [r7, #16]
 800b8c4:	69fa      	ldr	r2, [r7, #28]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	440b      	add	r3, r1
 800b8d0:	3328      	adds	r3, #40	; 0x28
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b8d6:	6939      	ldr	r1, [r7, #16]
 800b8d8:	69fa      	ldr	r2, [r7, #28]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	4413      	add	r3, r2
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	440b      	add	r3, r1
 800b8e4:	3324      	adds	r3, #36	; 0x24
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b8ea:	6939      	ldr	r1, [r7, #16]
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	4413      	add	r3, r2
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	440b      	add	r3, r1
 800b8f8:	332c      	adds	r3, #44	; 0x2c
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b8fe:	f3bf 8f5f 	dmb	sy
 800b902:	e002      	b.n	800b90a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800b904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b908:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b910:	69fb      	ldr	r3, [r7, #28]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	2002de40 	.word	0x2002de40

0800b920 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	; 0x28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800b92e:	4b21      	ldr	r3, [pc, #132]	; (800b9b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b930:	623b      	str	r3, [r7, #32]
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b93c:	f7ff fe8e 	bl	800b65c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b940:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b942:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b02      	cmp	r3, #2
 800b948:	d82c      	bhi.n	800b9a4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800b94a:	f3ef 8311 	mrs	r3, BASEPRI
 800b94e:	f04f 0120 	mov.w	r1, #32
 800b952:	f381 8811 	msr	BASEPRI, r1
 800b956:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	4613      	mov	r3, r2
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	4413      	add	r3, r2
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	3360      	adds	r3, #96	; 0x60
 800b964:	69fa      	ldr	r2, [r7, #28]
 800b966:	4413      	add	r3, r2
 800b968:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00e      	beq.n	800b98e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2200      	movs	r2, #0
 800b986:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2200      	movs	r2, #0
 800b98c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b992:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b994:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9a2:	e002      	b.n	800b9aa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800b9a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3728      	adds	r7, #40	; 0x28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	2002de40 	.word	0x2002de40

0800b9b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00f      	beq.n	800b9ee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800b9ce:	e002      	b.n	800b9d6 <_EncodeStr+0x1e>
      Len++;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	4413      	add	r3, r2
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1f6      	bne.n	800b9d0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d901      	bls.n	800b9ee <_EncodeStr+0x36>
      Len = Limit;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	2bfe      	cmp	r3, #254	; 0xfe
 800b9f2:	d806      	bhi.n	800ba02 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	1c5a      	adds	r2, r3, #1
 800b9f8:	60fa      	str	r2, [r7, #12]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	e011      	b.n	800ba26 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	60fa      	str	r2, [r7, #12]
 800ba08:	22ff      	movs	r2, #255	; 0xff
 800ba0a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	60fa      	str	r2, [r7, #12]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	0a19      	lsrs	r1, r3, #8
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	60fa      	str	r2, [r7, #12]
 800ba22:	b2ca      	uxtb	r2, r1
 800ba24:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ba2a:	e00a      	b.n	800ba42 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	1c53      	adds	r3, r2, #1
 800ba30:	60bb      	str	r3, [r7, #8]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	1c59      	adds	r1, r3, #1
 800ba36:	60f9      	str	r1, [r7, #12]
 800ba38:	7812      	ldrb	r2, [r2, #0]
 800ba3a:	701a      	strb	r2, [r3, #0]
    n++;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d3f0      	bcc.n	800ba2c <_EncodeStr+0x74>
  }
  return pPayload;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	371c      	adds	r7, #28
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3304      	adds	r3, #4
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ba76:	4b35      	ldr	r3, [pc, #212]	; (800bb4c <_HandleIncomingPacket+0xdc>)
 800ba78:	7e1b      	ldrb	r3, [r3, #24]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	1cfb      	adds	r3, r7, #3
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4619      	mov	r1, r3
 800ba82:	f7ff fe43 	bl	800b70c <SEGGER_RTT_ReadNoLock>
 800ba86:	4603      	mov	r3, r0
 800ba88:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dd59      	ble.n	800bb44 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	2b80      	cmp	r3, #128	; 0x80
 800ba94:	d032      	beq.n	800bafc <_HandleIncomingPacket+0x8c>
 800ba96:	2b80      	cmp	r3, #128	; 0x80
 800ba98:	dc42      	bgt.n	800bb20 <_HandleIncomingPacket+0xb0>
 800ba9a:	2b07      	cmp	r3, #7
 800ba9c:	dc16      	bgt.n	800bacc <_HandleIncomingPacket+0x5c>
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dd3e      	ble.n	800bb20 <_HandleIncomingPacket+0xb0>
 800baa2:	3b01      	subs	r3, #1
 800baa4:	2b06      	cmp	r3, #6
 800baa6:	d83b      	bhi.n	800bb20 <_HandleIncomingPacket+0xb0>
 800baa8:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <_HandleIncomingPacket+0x40>)
 800baaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baae:	bf00      	nop
 800bab0:	0800bad3 	.word	0x0800bad3
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800badf 	.word	0x0800badf
 800babc:	0800bae5 	.word	0x0800bae5
 800bac0:	0800baeb 	.word	0x0800baeb
 800bac4:	0800baf1 	.word	0x0800baf1
 800bac8:	0800baf7 	.word	0x0800baf7
 800bacc:	2b7f      	cmp	r3, #127	; 0x7f
 800bace:	d034      	beq.n	800bb3a <_HandleIncomingPacket+0xca>
 800bad0:	e026      	b.n	800bb20 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800bad2:	f000 fba5 	bl	800c220 <SEGGER_SYSVIEW_Start>
      break;
 800bad6:	e035      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800bad8:	f000 fc5c 	bl	800c394 <SEGGER_SYSVIEW_Stop>
      break;
 800badc:	e032      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800bade:	f000 fe35 	bl	800c74c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800bae2:	e02f      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800bae4:	f000 fdfa 	bl	800c6dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 800bae8:	e02c      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800baea:	f000 fc79 	bl	800c3e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800baee:	e029      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800baf0:	f000 ffee 	bl	800cad0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800baf4:	e026      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800baf6:	f000 ffcd 	bl	800ca94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800bafa:	e023      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bafc:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <_HandleIncomingPacket+0xdc>)
 800bafe:	7e1b      	ldrb	r3, [r3, #24]
 800bb00:	4618      	mov	r0, r3
 800bb02:	1cfb      	adds	r3, r7, #3
 800bb04:	2201      	movs	r2, #1
 800bb06:	4619      	mov	r1, r3
 800bb08:	f7ff fe00 	bl	800b70c <SEGGER_RTT_ReadNoLock>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dd13      	ble.n	800bb3e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 ff3b 	bl	800c994 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bb1e:	e00e      	b.n	800bb3e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	da0c      	bge.n	800bb42 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bb28:	4b08      	ldr	r3, [pc, #32]	; (800bb4c <_HandleIncomingPacket+0xdc>)
 800bb2a:	7e1b      	ldrb	r3, [r3, #24]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	1cfb      	adds	r3, r7, #3
 800bb30:	2201      	movs	r2, #1
 800bb32:	4619      	mov	r1, r3
 800bb34:	f7ff fdea 	bl	800b70c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800bb38:	e003      	b.n	800bb42 <_HandleIncomingPacket+0xd2>
      break;
 800bb3a:	bf00      	nop
 800bb3c:	e002      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
      break;
 800bb3e:	bf00      	nop
 800bb40:	e000      	b.n	800bb44 <_HandleIncomingPacket+0xd4>
      break;
 800bb42:	bf00      	nop
    }
  }
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	2002e704 	.word	0x2002e704

0800bb50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b08c      	sub	sp, #48	; 0x30
 800bb54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800bb56:	2301      	movs	r3, #1
 800bb58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800bb5a:	1d3b      	adds	r3, r7, #4
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb64:	4b31      	ldr	r3, [pc, #196]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb6a:	e00b      	b.n	800bb84 <_TrySendOverflowPacket+0x34>
 800bb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	1c59      	adds	r1, r3, #1
 800bb74:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bb76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	701a      	strb	r2, [r3, #0]
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	09db      	lsrs	r3, r3, #7
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	2b7f      	cmp	r3, #127	; 0x7f
 800bb88:	d8f0      	bhi.n	800bb6c <_TrySendOverflowPacket+0x1c>
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb92:	b2d2      	uxtb	r2, r2
 800bb94:	701a      	strb	r2, [r3, #0]
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bb9a:	4b25      	ldr	r3, [pc, #148]	; (800bc30 <_TrySendOverflowPacket+0xe0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bba0:	4b22      	ldr	r3, [pc, #136]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	627b      	str	r3, [r7, #36]	; 0x24
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	623b      	str	r3, [r7, #32]
 800bbb2:	e00b      	b.n	800bbcc <_TrySendOverflowPacket+0x7c>
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	1c59      	adds	r1, r3, #1
 800bbbc:	6279      	str	r1, [r7, #36]	; 0x24
 800bbbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbc2:	b2d2      	uxtb	r2, r2
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	09db      	lsrs	r3, r3, #7
 800bbca:	623b      	str	r3, [r7, #32]
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	2b7f      	cmp	r3, #127	; 0x7f
 800bbd0:	d8f0      	bhi.n	800bbb4 <_TrySendOverflowPacket+0x64>
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	1c5a      	adds	r2, r3, #1
 800bbd6:	627a      	str	r2, [r7, #36]	; 0x24
 800bbd8:	6a3a      	ldr	r2, [r7, #32]
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800bbe2:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	1d3b      	adds	r3, r7, #4
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	461a      	mov	r2, r3
 800bbf0:	1d3b      	adds	r3, r7, #4
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f7f4 fafc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bc02:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800bc08:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bc12:	701a      	strb	r2, [r3, #0]
 800bc14:	e004      	b.n	800bc20 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800bc16:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	4a03      	ldr	r2, [pc, #12]	; (800bc2c <_TrySendOverflowPacket+0xdc>)
 800bc1e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800bc20:	693b      	ldr	r3, [r7, #16]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3730      	adds	r7, #48	; 0x30
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	2002e704 	.word	0x2002e704
 800bc30:	e0001004 	.word	0xe0001004

0800bc34 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800bc40:	4b6c      	ldr	r3, [pc, #432]	; (800bdf4 <_SendPacket+0x1c0>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d010      	beq.n	800bc6a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bc48:	4b6a      	ldr	r3, [pc, #424]	; (800bdf4 <_SendPacket+0x1c0>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 80a3 	beq.w	800bd98 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800bc52:	4b68      	ldr	r3, [pc, #416]	; (800bdf4 <_SendPacket+0x1c0>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d109      	bne.n	800bc6e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800bc5a:	f7ff ff79 	bl	800bb50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800bc5e:	4b65      	ldr	r3, [pc, #404]	; (800bdf4 <_SendPacket+0x1c0>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	f040 809a 	bne.w	800bd9c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800bc68:	e001      	b.n	800bc6e <_SendPacket+0x3a>
    goto Send;
 800bc6a:	bf00      	nop
 800bc6c:	e000      	b.n	800bc70 <_SendPacket+0x3c>
Send:
 800bc6e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b1f      	cmp	r3, #31
 800bc74:	d809      	bhi.n	800bc8a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800bc76:	4b5f      	ldr	r3, [pc, #380]	; (800bdf4 <_SendPacket+0x1c0>)
 800bc78:	69da      	ldr	r2, [r3, #28]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f040 808b 	bne.w	800bda0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b17      	cmp	r3, #23
 800bc8e:	d807      	bhi.n	800bca0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e03d      	b.n	800bd1c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	2b7f      	cmp	r3, #127	; 0x7f
 800bcac:	d912      	bls.n	800bcd4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	09da      	lsrs	r2, r3, #7
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	b2d2      	uxtb	r2, r2
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	3a01      	subs	r2, #1
 800bcc6:	60fa      	str	r2, [r7, #12]
 800bcc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	e006      	b.n	800bce2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b7f      	cmp	r3, #127	; 0x7f
 800bce6:	d912      	bls.n	800bd0e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	09da      	lsrs	r2, r3, #7
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	b2d2      	uxtb	r2, r2
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	3a01      	subs	r2, #1
 800bd00:	60fa      	str	r2, [r7, #12]
 800bd02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	e006      	b.n	800bd1c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bd1c:	4b36      	ldr	r3, [pc, #216]	; (800bdf8 <_SendPacket+0x1c4>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bd22:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <_SendPacket+0x1c0>)
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	623b      	str	r3, [r7, #32]
 800bd34:	e00b      	b.n	800bd4e <_SendPacket+0x11a>
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	1c59      	adds	r1, r3, #1
 800bd3e:	6279      	str	r1, [r7, #36]	; 0x24
 800bd40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	6a3b      	ldr	r3, [r7, #32]
 800bd4a:	09db      	lsrs	r3, r3, #7
 800bd4c:	623b      	str	r3, [r7, #32]
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	2b7f      	cmp	r3, #127	; 0x7f
 800bd52:	d8f0      	bhi.n	800bd36 <_SendPacket+0x102>
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	1c5a      	adds	r2, r3, #1
 800bd58:	627a      	str	r2, [r7, #36]	; 0x24
 800bd5a:	6a3a      	ldr	r2, [r7, #32]
 800bd5c:	b2d2      	uxtb	r2, r2
 800bd5e:	701a      	strb	r2, [r3, #0]
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800bd64:	4b23      	ldr	r3, [pc, #140]	; (800bdf4 <_SendPacket+0x1c0>)
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	461a      	mov	r2, r3
 800bd72:	68f9      	ldr	r1, [r7, #12]
 800bd74:	f7f4 fa3c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bd82:	4a1c      	ldr	r2, [pc, #112]	; (800bdf4 <_SendPacket+0x1c0>)
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	60d3      	str	r3, [r2, #12]
 800bd88:	e00b      	b.n	800bda2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800bd8a:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <_SendPacket+0x1c0>)
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	4b18      	ldr	r3, [pc, #96]	; (800bdf4 <_SendPacket+0x1c0>)
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	e004      	b.n	800bda2 <_SendPacket+0x16e>
    goto SendDone;
 800bd98:	bf00      	nop
 800bd9a:	e002      	b.n	800bda2 <_SendPacket+0x16e>
      goto SendDone;
 800bd9c:	bf00      	nop
 800bd9e:	e000      	b.n	800bda2 <_SendPacket+0x16e>
      goto SendDone;
 800bda0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800bda2:	4b14      	ldr	r3, [pc, #80]	; (800bdf4 <_SendPacket+0x1c0>)
 800bda4:	7e1b      	ldrb	r3, [r3, #24]
 800bda6:	4619      	mov	r1, r3
 800bda8:	4a14      	ldr	r2, [pc, #80]	; (800bdfc <_SendPacket+0x1c8>)
 800bdaa:	460b      	mov	r3, r1
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	440b      	add	r3, r1
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	336c      	adds	r3, #108	; 0x6c
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <_SendPacket+0x1c0>)
 800bdba:	7e1b      	ldrb	r3, [r3, #24]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	490f      	ldr	r1, [pc, #60]	; (800bdfc <_SendPacket+0x1c8>)
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	4403      	add	r3, r0
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	440b      	add	r3, r1
 800bdca:	3370      	adds	r3, #112	; 0x70
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d00b      	beq.n	800bdea <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800bdd2:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <_SendPacket+0x1c0>)
 800bdd4:	789b      	ldrb	r3, [r3, #2]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d107      	bne.n	800bdea <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800bdda:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <_SendPacket+0x1c0>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800bde0:	f7ff fe46 	bl	800ba70 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800bde4:	4b03      	ldr	r3, [pc, #12]	; (800bdf4 <_SendPacket+0x1c0>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800bdea:	bf00      	nop
 800bdec:	3728      	adds	r7, #40	; 0x28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	2002e704 	.word	0x2002e704
 800bdf8:	e0001004 	.word	0xe0001004
 800bdfc:	2002de40 	.word	0x2002de40

0800be00 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af02      	add	r7, sp, #8
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800be0e:	2300      	movs	r3, #0
 800be10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be14:	4917      	ldr	r1, [pc, #92]	; (800be74 <SEGGER_SYSVIEW_Init+0x74>)
 800be16:	4818      	ldr	r0, [pc, #96]	; (800be78 <SEGGER_SYSVIEW_Init+0x78>)
 800be18:	f7ff fcfe 	bl	800b818 <SEGGER_RTT_AllocUpBuffer>
 800be1c:	4603      	mov	r3, r0
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	4b16      	ldr	r3, [pc, #88]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be22:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800be24:	4b15      	ldr	r3, [pc, #84]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be26:	785a      	ldrb	r2, [r3, #1]
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be2a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800be2c:	4b13      	ldr	r3, [pc, #76]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be2e:	7e1b      	ldrb	r3, [r3, #24]
 800be30:	4618      	mov	r0, r3
 800be32:	2300      	movs	r3, #0
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	2308      	movs	r3, #8
 800be38:	4a11      	ldr	r2, [pc, #68]	; (800be80 <SEGGER_SYSVIEW_Init+0x80>)
 800be3a:	490f      	ldr	r1, [pc, #60]	; (800be78 <SEGGER_SYSVIEW_Init+0x78>)
 800be3c:	f7ff fd70 	bl	800b920 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800be40:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be42:	2200      	movs	r2, #0
 800be44:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800be46:	4b0f      	ldr	r3, [pc, #60]	; (800be84 <SEGGER_SYSVIEW_Init+0x84>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a0c      	ldr	r2, [pc, #48]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be4c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800be4e:	4a0b      	ldr	r2, [pc, #44]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800be54:	4a09      	ldr	r2, [pc, #36]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800be5a:	4a08      	ldr	r2, [pc, #32]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800be60:	4a06      	ldr	r2, [pc, #24]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <SEGGER_SYSVIEW_Init+0x7c>)
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800be6c:	bf00      	nop
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	2002e2fc 	.word	0x2002e2fc
 800be78:	0800e374 	.word	0x0800e374
 800be7c:	2002e704 	.word	0x2002e704
 800be80:	2002e6fc 	.word	0x2002e6fc
 800be84:	e0001004 	.word	0xe0001004

0800be88 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800be90:	4a04      	ldr	r2, [pc, #16]	; (800bea4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6113      	str	r3, [r2, #16]
}
 800be96:	bf00      	nop
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	2002e704 	.word	0x2002e704

0800bea8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800beb0:	f3ef 8311 	mrs	r3, BASEPRI
 800beb4:	f04f 0120 	mov.w	r1, #32
 800beb8:	f381 8811 	msr	BASEPRI, r1
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	4808      	ldr	r0, [pc, #32]	; (800bee0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800bec0:	f7ff fdca 	bl	800ba58 <_PreparePacket>
 800bec4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	68b8      	ldr	r0, [r7, #8]
 800becc:	f7ff feb2 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f383 8811 	msr	BASEPRI, r3
}
 800bed6:	bf00      	nop
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	2002e734 	.word	0x2002e734

0800bee4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800beee:	f3ef 8311 	mrs	r3, BASEPRI
 800bef2:	f04f 0120 	mov.w	r1, #32
 800bef6:	f381 8811 	msr	BASEPRI, r1
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	4816      	ldr	r0, [pc, #88]	; (800bf58 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800befe:	f7ff fdab 	bl	800ba58 <_PreparePacket>
 800bf02:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	61fb      	str	r3, [r7, #28]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	61bb      	str	r3, [r7, #24]
 800bf10:	e00b      	b.n	800bf2a <SEGGER_SYSVIEW_RecordU32+0x46>
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	1c59      	adds	r1, r3, #1
 800bf1a:	61f9      	str	r1, [r7, #28]
 800bf1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	09db      	lsrs	r3, r3, #7
 800bf28:	61bb      	str	r3, [r7, #24]
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	2b7f      	cmp	r3, #127	; 0x7f
 800bf2e:	d8f0      	bhi.n	800bf12 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	61fa      	str	r2, [r7, #28]
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	b2d2      	uxtb	r2, r2
 800bf3a:	701a      	strb	r2, [r3, #0]
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	6938      	ldr	r0, [r7, #16]
 800bf46:	f7ff fe75 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	f383 8811 	msr	BASEPRI, r3
}
 800bf50:	bf00      	nop
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	2002e734 	.word	0x2002e734

0800bf5c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08c      	sub	sp, #48	; 0x30
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bf68:	f3ef 8311 	mrs	r3, BASEPRI
 800bf6c:	f04f 0120 	mov.w	r1, #32
 800bf70:	f381 8811 	msr	BASEPRI, r1
 800bf74:	61fb      	str	r3, [r7, #28]
 800bf76:	4825      	ldr	r0, [pc, #148]	; (800c00c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800bf78:	f7ff fd6e 	bl	800ba58 <_PreparePacket>
 800bf7c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf8a:	e00b      	b.n	800bfa4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	1c59      	adds	r1, r3, #1
 800bf94:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bf96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	09db      	lsrs	r3, r3, #7
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	2b7f      	cmp	r3, #127	; 0x7f
 800bfa8:	d8f0      	bhi.n	800bf8c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb2:	b2d2      	uxtb	r2, r2
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	623b      	str	r3, [r7, #32]
 800bfc2:	e00b      	b.n	800bfdc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	1c59      	adds	r1, r3, #1
 800bfcc:	6279      	str	r1, [r7, #36]	; 0x24
 800bfce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	09db      	lsrs	r3, r3, #7
 800bfda:	623b      	str	r3, [r7, #32]
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	2b7f      	cmp	r3, #127	; 0x7f
 800bfe0:	d8f0      	bhi.n	800bfc4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	627a      	str	r2, [r7, #36]	; 0x24
 800bfe8:	6a3a      	ldr	r2, [r7, #32]
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	701a      	strb	r2, [r3, #0]
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	6979      	ldr	r1, [r7, #20]
 800bff6:	69b8      	ldr	r0, [r7, #24]
 800bff8:	f7ff fe1c 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	f383 8811 	msr	BASEPRI, r3
}
 800c002:	bf00      	nop
 800c004:	3730      	adds	r7, #48	; 0x30
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2002e734 	.word	0x2002e734

0800c010 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c010:	b580      	push	{r7, lr}
 800c012:	b08e      	sub	sp, #56	; 0x38
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
 800c01c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c01e:	f3ef 8311 	mrs	r3, BASEPRI
 800c022:	f04f 0120 	mov.w	r1, #32
 800c026:	f381 8811 	msr	BASEPRI, r1
 800c02a:	61fb      	str	r3, [r7, #28]
 800c02c:	4832      	ldr	r0, [pc, #200]	; (800c0f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c02e:	f7ff fd13 	bl	800ba58 <_PreparePacket>
 800c032:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	637b      	str	r3, [r7, #52]	; 0x34
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	633b      	str	r3, [r7, #48]	; 0x30
 800c040:	e00b      	b.n	800c05a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	b2da      	uxtb	r2, r3
 800c046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c048:	1c59      	adds	r1, r3, #1
 800c04a:	6379      	str	r1, [r7, #52]	; 0x34
 800c04c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c050:	b2d2      	uxtb	r2, r2
 800c052:	701a      	strb	r2, [r3, #0]
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	09db      	lsrs	r3, r3, #7
 800c058:	633b      	str	r3, [r7, #48]	; 0x30
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	2b7f      	cmp	r3, #127	; 0x7f
 800c05e:	d8f0      	bhi.n	800c042 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	637a      	str	r2, [r7, #52]	; 0x34
 800c066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	701a      	strb	r2, [r3, #0]
 800c06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	62bb      	str	r3, [r7, #40]	; 0x28
 800c078:	e00b      	b.n	800c092 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	1c59      	adds	r1, r3, #1
 800c082:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c088:	b2d2      	uxtb	r2, r2
 800c08a:	701a      	strb	r2, [r3, #0]
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	09db      	lsrs	r3, r3, #7
 800c090:	62bb      	str	r3, [r7, #40]	; 0x28
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	2b7f      	cmp	r3, #127	; 0x7f
 800c096:	d8f0      	bhi.n	800c07a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	623b      	str	r3, [r7, #32]
 800c0b0:	e00b      	b.n	800c0ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	1c59      	adds	r1, r3, #1
 800c0ba:	6279      	str	r1, [r7, #36]	; 0x24
 800c0bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0c0:	b2d2      	uxtb	r2, r2
 800c0c2:	701a      	strb	r2, [r3, #0]
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	09db      	lsrs	r3, r3, #7
 800c0c8:	623b      	str	r3, [r7, #32]
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	2b7f      	cmp	r3, #127	; 0x7f
 800c0ce:	d8f0      	bhi.n	800c0b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	627a      	str	r2, [r7, #36]	; 0x24
 800c0d6:	6a3a      	ldr	r2, [r7, #32]
 800c0d8:	b2d2      	uxtb	r2, r2
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	6979      	ldr	r1, [r7, #20]
 800c0e4:	69b8      	ldr	r0, [r7, #24]
 800c0e6:	f7ff fda5 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	f383 8811 	msr	BASEPRI, r3
}
 800c0f0:	bf00      	nop
 800c0f2:	3738      	adds	r7, #56	; 0x38
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	2002e734 	.word	0x2002e734

0800c0fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b090      	sub	sp, #64	; 0x40
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c10a:	f3ef 8311 	mrs	r3, BASEPRI
 800c10e:	f04f 0120 	mov.w	r1, #32
 800c112:	f381 8811 	msr	BASEPRI, r1
 800c116:	61fb      	str	r3, [r7, #28]
 800c118:	4840      	ldr	r0, [pc, #256]	; (800c21c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c11a:	f7ff fc9d 	bl	800ba58 <_PreparePacket>
 800c11e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c12c:	e00b      	b.n	800c146 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	b2da      	uxtb	r2, r3
 800c132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c134:	1c59      	adds	r1, r3, #1
 800c136:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	09db      	lsrs	r3, r3, #7
 800c144:	63bb      	str	r3, [r7, #56]	; 0x38
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	2b7f      	cmp	r3, #127	; 0x7f
 800c14a:	d8f0      	bhi.n	800c12e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c154:	b2d2      	uxtb	r2, r2
 800c156:	701a      	strb	r2, [r3, #0]
 800c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	637b      	str	r3, [r7, #52]	; 0x34
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	633b      	str	r3, [r7, #48]	; 0x30
 800c164:	e00b      	b.n	800c17e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16c:	1c59      	adds	r1, r3, #1
 800c16e:	6379      	str	r1, [r7, #52]	; 0x34
 800c170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c174:	b2d2      	uxtb	r2, r2
 800c176:	701a      	strb	r2, [r3, #0]
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	09db      	lsrs	r3, r3, #7
 800c17c:	633b      	str	r3, [r7, #48]	; 0x30
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	2b7f      	cmp	r3, #127	; 0x7f
 800c182:	d8f0      	bhi.n	800c166 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	637a      	str	r2, [r7, #52]	; 0x34
 800c18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18c:	b2d2      	uxtb	r2, r2
 800c18e:	701a      	strb	r2, [r3, #0]
 800c190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c19c:	e00b      	b.n	800c1b6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	1c59      	adds	r1, r3, #1
 800c1a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c1a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1ac:	b2d2      	uxtb	r2, r2
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	09db      	lsrs	r3, r3, #7
 800c1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	2b7f      	cmp	r3, #127	; 0x7f
 800c1ba:	d8f0      	bhi.n	800c19e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1c4:	b2d2      	uxtb	r2, r2
 800c1c6:	701a      	strb	r2, [r3, #0]
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	623b      	str	r3, [r7, #32]
 800c1d4:	e00b      	b.n	800c1ee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	1c59      	adds	r1, r3, #1
 800c1de:	6279      	str	r1, [r7, #36]	; 0x24
 800c1e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1e4:	b2d2      	uxtb	r2, r2
 800c1e6:	701a      	strb	r2, [r3, #0]
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	09db      	lsrs	r3, r3, #7
 800c1ec:	623b      	str	r3, [r7, #32]
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f2:	d8f0      	bhi.n	800c1d6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	1c5a      	adds	r2, r3, #1
 800c1f8:	627a      	str	r2, [r7, #36]	; 0x24
 800c1fa:	6a3a      	ldr	r2, [r7, #32]
 800c1fc:	b2d2      	uxtb	r2, r2
 800c1fe:	701a      	strb	r2, [r3, #0]
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	6979      	ldr	r1, [r7, #20]
 800c208:	69b8      	ldr	r0, [r7, #24]
 800c20a:	f7ff fd13 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	f383 8811 	msr	BASEPRI, r3
}
 800c214:	bf00      	nop
 800c216:	3740      	adds	r7, #64	; 0x40
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	2002e734 	.word	0x2002e734

0800c220 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c220:	b580      	push	{r7, lr}
 800c222:	b08c      	sub	sp, #48	; 0x30
 800c224:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c226:	4b58      	ldr	r3, [pc, #352]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c228:	2201      	movs	r2, #1
 800c22a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c22c:	f3ef 8311 	mrs	r3, BASEPRI
 800c230:	f04f 0120 	mov.w	r1, #32
 800c234:	f381 8811 	msr	BASEPRI, r1
 800c238:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c23a:	4b53      	ldr	r3, [pc, #332]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	220a      	movs	r2, #10
 800c240:	4952      	ldr	r1, [pc, #328]	; (800c38c <SEGGER_SYSVIEW_Start+0x16c>)
 800c242:	4618      	mov	r0, r3
 800c244:	f7f3 ffd4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c24e:	200a      	movs	r0, #10
 800c250:	f7ff fe2a 	bl	800bea8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c254:	f3ef 8311 	mrs	r3, BASEPRI
 800c258:	f04f 0120 	mov.w	r1, #32
 800c25c:	f381 8811 	msr	BASEPRI, r1
 800c260:	60bb      	str	r3, [r7, #8]
 800c262:	484b      	ldr	r0, [pc, #300]	; (800c390 <SEGGER_SYSVIEW_Start+0x170>)
 800c264:	f7ff fbf8 	bl	800ba58 <_PreparePacket>
 800c268:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c272:	4b45      	ldr	r3, [pc, #276]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28
 800c278:	e00b      	b.n	800c292 <SEGGER_SYSVIEW_Start+0x72>
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c280:	1c59      	adds	r1, r3, #1
 800c282:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c288:	b2d2      	uxtb	r2, r2
 800c28a:	701a      	strb	r2, [r3, #0]
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	09db      	lsrs	r3, r3, #7
 800c290:	62bb      	str	r3, [r7, #40]	; 0x28
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	2b7f      	cmp	r3, #127	; 0x7f
 800c296:	d8f0      	bhi.n	800c27a <SEGGER_SYSVIEW_Start+0x5a>
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	1c5a      	adds	r2, r3, #1
 800c29c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c29e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2a0:	b2d2      	uxtb	r2, r2
 800c2a2:	701a      	strb	r2, [r3, #0]
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ac:	4b36      	ldr	r3, [pc, #216]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	623b      	str	r3, [r7, #32]
 800c2b2:	e00b      	b.n	800c2cc <SEGGER_SYSVIEW_Start+0xac>
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	1c59      	adds	r1, r3, #1
 800c2bc:	6279      	str	r1, [r7, #36]	; 0x24
 800c2be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2c2:	b2d2      	uxtb	r2, r2
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	09db      	lsrs	r3, r3, #7
 800c2ca:	623b      	str	r3, [r7, #32]
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c2d0:	d8f0      	bhi.n	800c2b4 <SEGGER_SYSVIEW_Start+0x94>
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	627a      	str	r2, [r7, #36]	; 0x24
 800c2d8:	6a3a      	ldr	r2, [r7, #32]
 800c2da:	b2d2      	uxtb	r2, r2
 800c2dc:	701a      	strb	r2, [r3, #0]
 800c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	61fb      	str	r3, [r7, #28]
 800c2e6:	4b28      	ldr	r3, [pc, #160]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	61bb      	str	r3, [r7, #24]
 800c2ec:	e00b      	b.n	800c306 <SEGGER_SYSVIEW_Start+0xe6>
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	1c59      	adds	r1, r3, #1
 800c2f6:	61f9      	str	r1, [r7, #28]
 800c2f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2fc:	b2d2      	uxtb	r2, r2
 800c2fe:	701a      	strb	r2, [r3, #0]
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	09db      	lsrs	r3, r3, #7
 800c304:	61bb      	str	r3, [r7, #24]
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	2b7f      	cmp	r3, #127	; 0x7f
 800c30a:	d8f0      	bhi.n	800c2ee <SEGGER_SYSVIEW_Start+0xce>
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	61fa      	str	r2, [r7, #28]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	2300      	movs	r3, #0
 800c322:	613b      	str	r3, [r7, #16]
 800c324:	e00b      	b.n	800c33e <SEGGER_SYSVIEW_Start+0x11e>
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	1c59      	adds	r1, r3, #1
 800c32e:	6179      	str	r1, [r7, #20]
 800c330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c334:	b2d2      	uxtb	r2, r2
 800c336:	701a      	strb	r2, [r3, #0]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	09db      	lsrs	r3, r3, #7
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b7f      	cmp	r3, #127	; 0x7f
 800c342:	d8f0      	bhi.n	800c326 <SEGGER_SYSVIEW_Start+0x106>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	617a      	str	r2, [r7, #20]
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c354:	2218      	movs	r2, #24
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fc6b 	bl	800bc34 <_SendPacket>
      RECORD_END();
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c364:	4b08      	ldr	r3, [pc, #32]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c36c:	4b06      	ldr	r3, [pc, #24]	; (800c388 <SEGGER_SYSVIEW_Start+0x168>)
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c372:	f000 f9eb 	bl	800c74c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c376:	f000 f9b1 	bl	800c6dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c37a:	f000 fba9 	bl	800cad0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c37e:	bf00      	nop
 800c380:	3730      	adds	r7, #48	; 0x30
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2002e704 	.word	0x2002e704
 800c38c:	08010248 	.word	0x08010248
 800c390:	2002e734 	.word	0x2002e734

0800c394 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c39a:	f3ef 8311 	mrs	r3, BASEPRI
 800c39e:	f04f 0120 	mov.w	r1, #32
 800c3a2:	f381 8811 	msr	BASEPRI, r1
 800c3a6:	607b      	str	r3, [r7, #4]
 800c3a8:	480b      	ldr	r0, [pc, #44]	; (800c3d8 <SEGGER_SYSVIEW_Stop+0x44>)
 800c3aa:	f7ff fb55 	bl	800ba58 <_PreparePacket>
 800c3ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <SEGGER_SYSVIEW_Stop+0x48>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d007      	beq.n	800c3c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c3b8:	220b      	movs	r2, #11
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6838      	ldr	r0, [r7, #0]
 800c3be:	f7ff fc39 	bl	800bc34 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c3c2:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <SEGGER_SYSVIEW_Stop+0x48>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f383 8811 	msr	BASEPRI, r3
}
 800c3ce:	bf00      	nop
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	2002e734 	.word	0x2002e734
 800c3dc:	2002e704 	.word	0x2002e704

0800c3e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08c      	sub	sp, #48	; 0x30
 800c3e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c3e6:	f3ef 8311 	mrs	r3, BASEPRI
 800c3ea:	f04f 0120 	mov.w	r1, #32
 800c3ee:	f381 8811 	msr	BASEPRI, r1
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	4845      	ldr	r0, [pc, #276]	; (800c50c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c3f6:	f7ff fb2f 	bl	800ba58 <_PreparePacket>
 800c3fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c404:	4b42      	ldr	r3, [pc, #264]	; (800c510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	62bb      	str	r3, [r7, #40]	; 0x28
 800c40a:	e00b      	b.n	800c424 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	1c59      	adds	r1, r3, #1
 800c414:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	09db      	lsrs	r3, r3, #7
 800c422:	62bb      	str	r3, [r7, #40]	; 0x28
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	2b7f      	cmp	r3, #127	; 0x7f
 800c428:	d8f0      	bhi.n	800c40c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	1c5a      	adds	r2, r3, #1
 800c42e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c432:	b2d2      	uxtb	r2, r2
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	627b      	str	r3, [r7, #36]	; 0x24
 800c43e:	4b34      	ldr	r3, [pc, #208]	; (800c510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	623b      	str	r3, [r7, #32]
 800c444:	e00b      	b.n	800c45e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	1c59      	adds	r1, r3, #1
 800c44e:	6279      	str	r1, [r7, #36]	; 0x24
 800c450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c454:	b2d2      	uxtb	r2, r2
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	09db      	lsrs	r3, r3, #7
 800c45c:	623b      	str	r3, [r7, #32]
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	2b7f      	cmp	r3, #127	; 0x7f
 800c462:	d8f0      	bhi.n	800c446 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	1c5a      	adds	r2, r3, #1
 800c468:	627a      	str	r2, [r7, #36]	; 0x24
 800c46a:	6a3a      	ldr	r2, [r7, #32]
 800c46c:	b2d2      	uxtb	r2, r2
 800c46e:	701a      	strb	r2, [r3, #0]
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	4b25      	ldr	r3, [pc, #148]	; (800c510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	e00b      	b.n	800c498 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	b2da      	uxtb	r2, r3
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	1c59      	adds	r1, r3, #1
 800c488:	61f9      	str	r1, [r7, #28]
 800c48a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c48e:	b2d2      	uxtb	r2, r2
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	09db      	lsrs	r3, r3, #7
 800c496:	61bb      	str	r3, [r7, #24]
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b7f      	cmp	r3, #127	; 0x7f
 800c49c:	d8f0      	bhi.n	800c480 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	61fa      	str	r2, [r7, #28]
 800c4a4:	69ba      	ldr	r2, [r7, #24]
 800c4a6:	b2d2      	uxtb	r2, r2
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	613b      	str	r3, [r7, #16]
 800c4b6:	e00b      	b.n	800c4d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	1c59      	adds	r1, r3, #1
 800c4c0:	6179      	str	r1, [r7, #20]
 800c4c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	701a      	strb	r2, [r3, #0]
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	09db      	lsrs	r3, r3, #7
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c4d4:	d8f0      	bhi.n	800c4b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	617a      	str	r2, [r7, #20]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	b2d2      	uxtb	r2, r2
 800c4e0:	701a      	strb	r2, [r3, #0]
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c4e6:	2218      	movs	r2, #24
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	68b8      	ldr	r0, [r7, #8]
 800c4ec:	f7ff fba2 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c4f6:	4b06      	ldr	r3, [pc, #24]	; (800c510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d002      	beq.n	800c504 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c4fe:	4b04      	ldr	r3, [pc, #16]	; (800c510 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	4798      	blx	r3
  }
}
 800c504:	bf00      	nop
 800c506:	3730      	adds	r7, #48	; 0x30
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	2002e734 	.word	0x2002e734
 800c510:	2002e704 	.word	0x2002e704

0800c514 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c514:	b580      	push	{r7, lr}
 800c516:	b092      	sub	sp, #72	; 0x48
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c51c:	f3ef 8311 	mrs	r3, BASEPRI
 800c520:	f04f 0120 	mov.w	r1, #32
 800c524:	f381 8811 	msr	BASEPRI, r1
 800c528:	617b      	str	r3, [r7, #20]
 800c52a:	486a      	ldr	r0, [pc, #424]	; (800c6d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c52c:	f7ff fa94 	bl	800ba58 <_PreparePacket>
 800c530:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	647b      	str	r3, [r7, #68]	; 0x44
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b66      	ldr	r3, [pc, #408]	; (800c6d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	643b      	str	r3, [r7, #64]	; 0x40
 800c546:	e00b      	b.n	800c560 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54e:	1c59      	adds	r1, r3, #1
 800c550:	6479      	str	r1, [r7, #68]	; 0x44
 800c552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c556:	b2d2      	uxtb	r2, r2
 800c558:	701a      	strb	r2, [r3, #0]
 800c55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55c:	09db      	lsrs	r3, r3, #7
 800c55e:	643b      	str	r3, [r7, #64]	; 0x40
 800c560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c562:	2b7f      	cmp	r3, #127	; 0x7f
 800c564:	d8f0      	bhi.n	800c548 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	647a      	str	r2, [r7, #68]	; 0x44
 800c56c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	701a      	strb	r2, [r3, #0]
 800c572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c574:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c580:	e00b      	b.n	800c59a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	b2da      	uxtb	r2, r3
 800c586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c588:	1c59      	adds	r1, r3, #1
 800c58a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c58c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c590:	b2d2      	uxtb	r2, r2
 800c592:	701a      	strb	r2, [r3, #0]
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	09db      	lsrs	r3, r3, #7
 800c598:	63bb      	str	r3, [r7, #56]	; 0x38
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	2b7f      	cmp	r3, #127	; 0x7f
 800c59e:	d8f0      	bhi.n	800c582 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c5a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5a8:	b2d2      	uxtb	r2, r2
 800c5aa:	701a      	strb	r2, [r3, #0]
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2220      	movs	r2, #32
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff f9fd 	bl	800b9b8 <_EncodeStr>
 800c5be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c5c0:	2209      	movs	r2, #9
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	6938      	ldr	r0, [r7, #16]
 800c5c6:	f7ff fb35 	bl	800bc34 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4b40      	ldr	r3, [pc, #256]	; (800c6d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	633b      	str	r3, [r7, #48]	; 0x30
 800c5de:	e00b      	b.n	800c5f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e6:	1c59      	adds	r1, r3, #1
 800c5e8:	6379      	str	r1, [r7, #52]	; 0x34
 800c5ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	09db      	lsrs	r3, r3, #7
 800c5f6:	633b      	str	r3, [r7, #48]	; 0x30
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c5fc:	d8f0      	bhi.n	800c5e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	637a      	str	r2, [r7, #52]	; 0x34
 800c604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c606:	b2d2      	uxtb	r2, r2
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
 800c618:	e00b      	b.n	800c632 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c620:	1c59      	adds	r1, r3, #1
 800c622:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	09db      	lsrs	r3, r3, #7
 800c630:	62bb      	str	r3, [r7, #40]	; 0x28
 800c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c634:	2b7f      	cmp	r3, #127	; 0x7f
 800c636:	d8f0      	bhi.n	800c61a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c640:	b2d2      	uxtb	r2, r2
 800c642:	701a      	strb	r2, [r3, #0]
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	623b      	str	r3, [r7, #32]
 800c652:	e00b      	b.n	800c66c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	b2da      	uxtb	r2, r3
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	6279      	str	r1, [r7, #36]	; 0x24
 800c65e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c662:	b2d2      	uxtb	r2, r2
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	09db      	lsrs	r3, r3, #7
 800c66a:	623b      	str	r3, [r7, #32]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	2b7f      	cmp	r3, #127	; 0x7f
 800c670:	d8f0      	bhi.n	800c654 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	627a      	str	r2, [r7, #36]	; 0x24
 800c678:	6a3a      	ldr	r2, [r7, #32]
 800c67a:	b2d2      	uxtb	r2, r2
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	2300      	movs	r3, #0
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	e00b      	b.n	800c6a4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	1c59      	adds	r1, r3, #1
 800c694:	61f9      	str	r1, [r7, #28]
 800c696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	09db      	lsrs	r3, r3, #7
 800c6a2:	61bb      	str	r3, [r7, #24]
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	2b7f      	cmp	r3, #127	; 0x7f
 800c6a8:	d8f0      	bhi.n	800c68c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	61fa      	str	r2, [r7, #28]
 800c6b0:	69ba      	ldr	r2, [r7, #24]
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c6ba:	2215      	movs	r2, #21
 800c6bc:	68f9      	ldr	r1, [r7, #12]
 800c6be:	6938      	ldr	r0, [r7, #16]
 800c6c0:	f7ff fab8 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f383 8811 	msr	BASEPRI, r3
}
 800c6ca:	bf00      	nop
 800c6cc:	3748      	adds	r7, #72	; 0x48
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	2002e734 	.word	0x2002e734
 800c6d8:	2002e704 	.word	0x2002e704

0800c6dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c6e2:	6a1b      	ldr	r3, [r3, #32]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d008      	beq.n	800c6fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c6e8:	4b05      	ldr	r3, [pc, #20]	; (800c700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c6f2:	4b03      	ldr	r3, [pc, #12]	; (800c700 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4798      	blx	r3
  }
}
 800c6fa:	bf00      	nop
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	2002e704 	.word	0x2002e704

0800c704 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c70c:	f3ef 8311 	mrs	r3, BASEPRI
 800c710:	f04f 0120 	mov.w	r1, #32
 800c714:	f381 8811 	msr	BASEPRI, r1
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	480b      	ldr	r0, [pc, #44]	; (800c748 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c71c:	f7ff f99c 	bl	800ba58 <_PreparePacket>
 800c720:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c722:	2280      	movs	r2, #128	; 0x80
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	6938      	ldr	r0, [r7, #16]
 800c728:	f7ff f946 	bl	800b9b8 <_EncodeStr>
 800c72c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c72e:	220e      	movs	r2, #14
 800c730:	68f9      	ldr	r1, [r7, #12]
 800c732:	6938      	ldr	r0, [r7, #16]
 800c734:	f7ff fa7e 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f383 8811 	msr	BASEPRI, r3
}
 800c73e:	bf00      	nop
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2002e734 	.word	0x2002e734

0800c74c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c74c:	b590      	push	{r4, r7, lr}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c752:	4b15      	ldr	r3, [pc, #84]	; (800c7a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d01a      	beq.n	800c790 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c75a:	4b13      	ldr	r3, [pc, #76]	; (800c7a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d015      	beq.n	800c790 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c764:	4b10      	ldr	r3, [pc, #64]	; (800c7a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c766:	6a1b      	ldr	r3, [r3, #32]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4798      	blx	r3
 800c76c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c770:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c772:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c776:	f04f 0200 	mov.w	r2, #0
 800c77a:	f04f 0300 	mov.w	r3, #0
 800c77e:	000a      	movs	r2, r1
 800c780:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c782:	4613      	mov	r3, r2
 800c784:	461a      	mov	r2, r3
 800c786:	4621      	mov	r1, r4
 800c788:	200d      	movs	r0, #13
 800c78a:	f7ff fbe7 	bl	800bf5c <SEGGER_SYSVIEW_RecordU32x2>
 800c78e:	e006      	b.n	800c79e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c790:	4b06      	ldr	r3, [pc, #24]	; (800c7ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4619      	mov	r1, r3
 800c796:	200c      	movs	r0, #12
 800c798:	f7ff fba4 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c79c:	bf00      	nop
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd90      	pop	{r4, r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	2002e704 	.word	0x2002e704
 800c7ac:	e0001004 	.word	0xe0001004

0800c7b0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c7b6:	f3ef 8311 	mrs	r3, BASEPRI
 800c7ba:	f04f 0120 	mov.w	r1, #32
 800c7be:	f381 8811 	msr	BASEPRI, r1
 800c7c2:	607b      	str	r3, [r7, #4]
 800c7c4:	4807      	ldr	r0, [pc, #28]	; (800c7e4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c7c6:	f7ff f947 	bl	800ba58 <_PreparePacket>
 800c7ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c7cc:	2211      	movs	r2, #17
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6838      	ldr	r0, [r7, #0]
 800c7d2:	f7ff fa2f 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f383 8811 	msr	BASEPRI, r3
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	2002e734 	.word	0x2002e734

0800c7e8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b088      	sub	sp, #32
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c7f0:	f3ef 8311 	mrs	r3, BASEPRI
 800c7f4:	f04f 0120 	mov.w	r1, #32
 800c7f8:	f381 8811 	msr	BASEPRI, r1
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	4819      	ldr	r0, [pc, #100]	; (800c864 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c800:	f7ff f92a 	bl	800ba58 <_PreparePacket>
 800c804:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c80a:	4b17      	ldr	r3, [pc, #92]	; (800c868 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	61bb      	str	r3, [r7, #24]
 800c81c:	e00b      	b.n	800c836 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	b2da      	uxtb	r2, r3
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	1c59      	adds	r1, r3, #1
 800c826:	61f9      	str	r1, [r7, #28]
 800c828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c82c:	b2d2      	uxtb	r2, r2
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	09db      	lsrs	r3, r3, #7
 800c834:	61bb      	str	r3, [r7, #24]
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	2b7f      	cmp	r3, #127	; 0x7f
 800c83a:	d8f0      	bhi.n	800c81e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	61fa      	str	r2, [r7, #28]
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	b2d2      	uxtb	r2, r2
 800c846:	701a      	strb	r2, [r3, #0]
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c84c:	2208      	movs	r2, #8
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	6938      	ldr	r0, [r7, #16]
 800c852:	f7ff f9ef 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f383 8811 	msr	BASEPRI, r3
}
 800c85c:	bf00      	nop
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	2002e734 	.word	0x2002e734
 800c868:	2002e704 	.word	0x2002e704

0800c86c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c874:	f3ef 8311 	mrs	r3, BASEPRI
 800c878:	f04f 0120 	mov.w	r1, #32
 800c87c:	f381 8811 	msr	BASEPRI, r1
 800c880:	617b      	str	r3, [r7, #20]
 800c882:	4819      	ldr	r0, [pc, #100]	; (800c8e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c884:	f7ff f8e8 	bl	800ba58 <_PreparePacket>
 800c888:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c88e:	4b17      	ldr	r3, [pc, #92]	; (800c8ec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	61fb      	str	r3, [r7, #28]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	61bb      	str	r3, [r7, #24]
 800c8a0:	e00b      	b.n	800c8ba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	1c59      	adds	r1, r3, #1
 800c8aa:	61f9      	str	r1, [r7, #28]
 800c8ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8b0:	b2d2      	uxtb	r2, r2
 800c8b2:	701a      	strb	r2, [r3, #0]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	09db      	lsrs	r3, r3, #7
 800c8b8:	61bb      	str	r3, [r7, #24]
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	2b7f      	cmp	r3, #127	; 0x7f
 800c8be:	d8f0      	bhi.n	800c8a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	61fa      	str	r2, [r7, #28]
 800c8c6:	69ba      	ldr	r2, [r7, #24]
 800c8c8:	b2d2      	uxtb	r2, r2
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c8d0:	2204      	movs	r2, #4
 800c8d2:	68f9      	ldr	r1, [r7, #12]
 800c8d4:	6938      	ldr	r0, [r7, #16]
 800c8d6:	f7ff f9ad 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	f383 8811 	msr	BASEPRI, r3
}
 800c8e0:	bf00      	nop
 800c8e2:	3720      	adds	r7, #32
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	2002e734 	.word	0x2002e734
 800c8ec:	2002e704 	.word	0x2002e704

0800c8f0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c8f8:	f3ef 8311 	mrs	r3, BASEPRI
 800c8fc:	f04f 0120 	mov.w	r1, #32
 800c900:	f381 8811 	msr	BASEPRI, r1
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	4819      	ldr	r0, [pc, #100]	; (800c96c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c908:	f7ff f8a6 	bl	800ba58 <_PreparePacket>
 800c90c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c912:	4b17      	ldr	r3, [pc, #92]	; (800c970 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	61fb      	str	r3, [r7, #28]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	e00b      	b.n	800c93e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	1c59      	adds	r1, r3, #1
 800c92e:	61f9      	str	r1, [r7, #28]
 800c930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	09db      	lsrs	r3, r3, #7
 800c93c:	61bb      	str	r3, [r7, #24]
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	2b7f      	cmp	r3, #127	; 0x7f
 800c942:	d8f0      	bhi.n	800c926 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	61fa      	str	r2, [r7, #28]
 800c94a:	69ba      	ldr	r2, [r7, #24]
 800c94c:	b2d2      	uxtb	r2, r2
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c954:	2206      	movs	r2, #6
 800c956:	68f9      	ldr	r1, [r7, #12]
 800c958:	6938      	ldr	r0, [r7, #16]
 800c95a:	f7ff f96b 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f383 8811 	msr	BASEPRI, r3
}
 800c964:	bf00      	nop
 800c966:	3720      	adds	r7, #32
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	2002e734 	.word	0x2002e734
 800c970:	2002e704 	.word	0x2002e704

0800c974 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c97c:	4b04      	ldr	r3, [pc, #16]	; (800c990 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	1ad3      	subs	r3, r2, r3
}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	2002e704 	.word	0x2002e704

0800c994 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c994:	b580      	push	{r7, lr}
 800c996:	b08c      	sub	sp, #48	; 0x30
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c99e:	4b3b      	ldr	r3, [pc, #236]	; (800ca8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d06d      	beq.n	800ca82 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c9a6:	4b39      	ldr	r3, [pc, #228]	; (800ca8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9b0:	e008      	b.n	800c9c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d007      	beq.n	800c9ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d3f2      	bcc.n	800c9b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800c9cc:	e000      	b.n	800c9d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c9ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d055      	beq.n	800ca82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c9d6:	f3ef 8311 	mrs	r3, BASEPRI
 800c9da:	f04f 0120 	mov.w	r1, #32
 800c9de:	f381 8811 	msr	BASEPRI, r1
 800c9e2:	617b      	str	r3, [r7, #20]
 800c9e4:	482a      	ldr	r0, [pc, #168]	; (800ca90 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c9e6:	f7ff f837 	bl	800ba58 <_PreparePacket>
 800c9ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9f4:	79fb      	ldrb	r3, [r7, #7]
 800c9f6:	623b      	str	r3, [r7, #32]
 800c9f8:	e00b      	b.n	800ca12 <SEGGER_SYSVIEW_SendModule+0x7e>
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	1c59      	adds	r1, r3, #1
 800ca02:	6279      	str	r1, [r7, #36]	; 0x24
 800ca04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca08:	b2d2      	uxtb	r2, r2
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	09db      	lsrs	r3, r3, #7
 800ca10:	623b      	str	r3, [r7, #32]
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	2b7f      	cmp	r3, #127	; 0x7f
 800ca16:	d8f0      	bhi.n	800c9fa <SEGGER_SYSVIEW_SendModule+0x66>
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	1c5a      	adds	r2, r3, #1
 800ca1c:	627a      	str	r2, [r7, #36]	; 0x24
 800ca1e:	6a3a      	ldr	r2, [r7, #32]
 800ca20:	b2d2      	uxtb	r2, r2
 800ca22:	701a      	strb	r2, [r3, #0]
 800ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	61fb      	str	r3, [r7, #28]
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	61bb      	str	r3, [r7, #24]
 800ca32:	e00b      	b.n	800ca4c <SEGGER_SYSVIEW_SendModule+0xb8>
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	1c59      	adds	r1, r3, #1
 800ca3c:	61f9      	str	r1, [r7, #28]
 800ca3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca42:	b2d2      	uxtb	r2, r2
 800ca44:	701a      	strb	r2, [r3, #0]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	09db      	lsrs	r3, r3, #7
 800ca4a:	61bb      	str	r3, [r7, #24]
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca50:	d8f0      	bhi.n	800ca34 <SEGGER_SYSVIEW_SendModule+0xa0>
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	61fa      	str	r2, [r7, #28]
 800ca58:	69ba      	ldr	r2, [r7, #24]
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2280      	movs	r2, #128	; 0x80
 800ca68:	4619      	mov	r1, r3
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7fe ffa4 	bl	800b9b8 <_EncodeStr>
 800ca70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ca72:	2216      	movs	r2, #22
 800ca74:	68f9      	ldr	r1, [r7, #12]
 800ca76:	6938      	ldr	r0, [r7, #16]
 800ca78:	f7ff f8dc 	bl	800bc34 <_SendPacket>
      RECORD_END();
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800ca82:	bf00      	nop
 800ca84:	3730      	adds	r7, #48	; 0x30
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	2002e72c 	.word	0x2002e72c
 800ca90:	2002e734 	.word	0x2002e734

0800ca94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800ca9a:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00f      	beq.n	800cac2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800caa2:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1f2      	bne.n	800caa8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cac2:	bf00      	nop
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2002e72c 	.word	0x2002e72c

0800cad0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800cad6:	f3ef 8311 	mrs	r3, BASEPRI
 800cada:	f04f 0120 	mov.w	r1, #32
 800cade:	f381 8811 	msr	BASEPRI, r1
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	4817      	ldr	r0, [pc, #92]	; (800cb44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800cae6:	f7fe ffb7 	bl	800ba58 <_PreparePacket>
 800caea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	617b      	str	r3, [r7, #20]
 800caf4:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	613b      	str	r3, [r7, #16]
 800cafa:	e00b      	b.n	800cb14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	1c59      	adds	r1, r3, #1
 800cb04:	6179      	str	r1, [r7, #20]
 800cb06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb0a:	b2d2      	uxtb	r2, r2
 800cb0c:	701a      	strb	r2, [r3, #0]
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	09db      	lsrs	r3, r3, #7
 800cb12:	613b      	str	r3, [r7, #16]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	2b7f      	cmp	r3, #127	; 0x7f
 800cb18:	d8f0      	bhi.n	800cafc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	1c5a      	adds	r2, r3, #1
 800cb1e:	617a      	str	r2, [r7, #20]
 800cb20:	693a      	ldr	r2, [r7, #16]
 800cb22:	b2d2      	uxtb	r2, r2
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800cb2a:	221b      	movs	r2, #27
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	68b8      	ldr	r0, [r7, #8]
 800cb30:	f7ff f880 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f383 8811 	msr	BASEPRI, r3
}
 800cb3a:	bf00      	nop
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	2002e734 	.word	0x2002e734
 800cb48:	2002e730 	.word	0x2002e730

0800cb4c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cb54:	f3ef 8311 	mrs	r3, BASEPRI
 800cb58:	f04f 0120 	mov.w	r1, #32
 800cb5c:	f381 8811 	msr	BASEPRI, r1
 800cb60:	617b      	str	r3, [r7, #20]
 800cb62:	4827      	ldr	r0, [pc, #156]	; (800cc00 <SEGGER_SYSVIEW_Warn+0xb4>)
 800cb64:	f7fe ff78 	bl	800ba58 <_PreparePacket>
 800cb68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cb6a:	2280      	movs	r2, #128	; 0x80
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	6938      	ldr	r0, [r7, #16]
 800cb70:	f7fe ff22 	bl	800b9b8 <_EncodeStr>
 800cb74:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	623b      	str	r3, [r7, #32]
 800cb7e:	e00b      	b.n	800cb98 <SEGGER_SYSVIEW_Warn+0x4c>
 800cb80:	6a3b      	ldr	r3, [r7, #32]
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	1c59      	adds	r1, r3, #1
 800cb88:	6279      	str	r1, [r7, #36]	; 0x24
 800cb8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb8e:	b2d2      	uxtb	r2, r2
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	6a3b      	ldr	r3, [r7, #32]
 800cb94:	09db      	lsrs	r3, r3, #7
 800cb96:	623b      	str	r3, [r7, #32]
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	2b7f      	cmp	r3, #127	; 0x7f
 800cb9c:	d8f0      	bhi.n	800cb80 <SEGGER_SYSVIEW_Warn+0x34>
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	1c5a      	adds	r2, r3, #1
 800cba2:	627a      	str	r2, [r7, #36]	; 0x24
 800cba4:	6a3a      	ldr	r2, [r7, #32]
 800cba6:	b2d2      	uxtb	r2, r2
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	61fb      	str	r3, [r7, #28]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	61bb      	str	r3, [r7, #24]
 800cbb6:	e00b      	b.n	800cbd0 <SEGGER_SYSVIEW_Warn+0x84>
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	1c59      	adds	r1, r3, #1
 800cbc0:	61f9      	str	r1, [r7, #28]
 800cbc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	09db      	lsrs	r3, r3, #7
 800cbce:	61bb      	str	r3, [r7, #24]
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	2b7f      	cmp	r3, #127	; 0x7f
 800cbd4:	d8f0      	bhi.n	800cbb8 <SEGGER_SYSVIEW_Warn+0x6c>
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	61fa      	str	r2, [r7, #28]
 800cbdc:	69ba      	ldr	r2, [r7, #24]
 800cbde:	b2d2      	uxtb	r2, r2
 800cbe0:	701a      	strb	r2, [r3, #0]
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800cbe6:	221a      	movs	r2, #26
 800cbe8:	68f9      	ldr	r1, [r7, #12]
 800cbea:	6938      	ldr	r0, [r7, #16]
 800cbec:	f7ff f822 	bl	800bc34 <_SendPacket>
  RECORD_END();
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f383 8811 	msr	BASEPRI, r3
}
 800cbf6:	bf00      	nop
 800cbf8:	3728      	adds	r7, #40	; 0x28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	2002e734 	.word	0x2002e734

0800cc04 <__NVIC_EnableIRQ>:
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	db0b      	blt.n	800cc2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc16:	79fb      	ldrb	r3, [r7, #7]
 800cc18:	f003 021f 	and.w	r2, r3, #31
 800cc1c:	4907      	ldr	r1, [pc, #28]	; (800cc3c <__NVIC_EnableIRQ+0x38>)
 800cc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	2001      	movs	r0, #1
 800cc26:	fa00 f202 	lsl.w	r2, r0, r2
 800cc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cc2e:	bf00      	nop
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	e000e100 	.word	0xe000e100

0800cc40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800cc48:	4b08      	ldr	r3, [pc, #32]	; (800cc6c <LL_APB1_GRP1_EnableClock+0x2c>)
 800cc4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc4c:	4907      	ldr	r1, [pc, #28]	; (800cc6c <LL_APB1_GRP1_EnableClock+0x2c>)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800cc54:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <LL_APB1_GRP1_EnableClock+0x2c>)
 800cc56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
}
 800cc60:	bf00      	nop
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	40023800 	.word	0x40023800

0800cc70 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f043 0201 	orr.w	r2, r3, #1
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f06f 0201 	mvn.w	r2, #1
 800ccba:	611a      	str	r2, [r3, #16]
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	f003 0301 	and.w	r3, r3, #1
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d101      	bne.n	800cce0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e000      	b.n	800cce2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	f043 0201 	orr.w	r2, r3, #1
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60da      	str	r2, [r3, #12]
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
	...

0800cd10 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800cd14:	4802      	ldr	r0, [pc, #8]	; (800cd20 <_cbSendSystemDesc+0x10>)
 800cd16:	f7ff fcf5 	bl	800c704 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800cd1a:	bf00      	nop
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	0800e37c 	.word	0x0800e37c

0800cd24 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800cd28:	4807      	ldr	r0, [pc, #28]	; (800cd48 <TIM7_IRQHandler+0x24>)
 800cd2a:	f7ff ffcd 	bl	800ccc8 <LL_TIM_IsActiveFlag_UPDATE>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d007      	beq.n	800cd44 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800cd34:	4804      	ldr	r0, [pc, #16]	; (800cd48 <TIM7_IRQHandler+0x24>)
 800cd36:	f7ff ffb9 	bl	800ccac <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800cd3a:	4b04      	ldr	r3, [pc, #16]	; (800cd4c <TIM7_IRQHandler+0x28>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	4a02      	ldr	r2, [pc, #8]	; (800cd4c <TIM7_IRQHandler+0x28>)
 800cd42:	6013      	str	r3, [r2, #0]
	}
}
 800cd44:	bf00      	nop
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	40001400 	.word	0x40001400
 800cd4c:	2002e2f8 	.word	0x2002e2f8

0800cd50 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800cd54:	2020      	movs	r0, #32
 800cd56:	f7ff ff73 	bl	800cc40 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800cd5a:	4b0d      	ldr	r3, [pc, #52]	; (800cd90 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	085a      	lsrs	r2, r3, #1
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	441a      	add	r2, r3
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	4619      	mov	r1, r3
 800cd72:	4808      	ldr	r0, [pc, #32]	; (800cd94 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800cd74:	f7ff ff8c 	bl	800cc90 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800cd78:	2037      	movs	r0, #55	; 0x37
 800cd7a:	f7ff ff43 	bl	800cc04 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800cd7e:	4805      	ldr	r0, [pc, #20]	; (800cd94 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800cd80:	f7ff ffb5 	bl	800ccee <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800cd84:	4803      	ldr	r0, [pc, #12]	; (800cd94 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800cd86:	f7ff ff73 	bl	800cc70 <LL_TIM_EnableCounter>
}
 800cd8a:	bf00      	nop
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	200002f4 	.word	0x200002f4
 800cd94:	40001400 	.word	0x40001400

0800cd98 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800cd9c:	f7ff ffd8 	bl	800cd50 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800cda0:	4b06      	ldr	r3, [pc, #24]	; (800cdbc <SEGGER_SYSVIEW_Conf+0x24>)
 800cda2:	6818      	ldr	r0, [r3, #0]
 800cda4:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <SEGGER_SYSVIEW_Conf+0x24>)
 800cda6:	6819      	ldr	r1, [r3, #0]
 800cda8:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <SEGGER_SYSVIEW_Conf+0x28>)
 800cdaa:	4a06      	ldr	r2, [pc, #24]	; (800cdc4 <SEGGER_SYSVIEW_Conf+0x2c>)
 800cdac:	f7ff f828 	bl	800be00 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800cdb0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800cdb4:	f7ff f868 	bl	800be88 <SEGGER_SYSVIEW_SetRAMBase>
}
 800cdb8:	bf00      	nop
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	200002f4 	.word	0x200002f4
 800cdc0:	0800cd11 	.word	0x0800cd11
 800cdc4:	08010254 	.word	0x08010254

0800cdc8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800cdce:	2300      	movs	r3, #0
 800cdd0:	607b      	str	r3, [r7, #4]
 800cdd2:	e048      	b.n	800ce66 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800cdd4:	4929      	ldr	r1, [pc, #164]	; (800ce7c <_cbSendTaskList+0xb4>)
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fd f949 	bl	800a07c <uxTaskGetStackHighWaterMark>
 800cdea:	4601      	mov	r1, r0
 800cdec:	4823      	ldr	r0, [pc, #140]	; (800ce7c <_cbSendTaskList+0xb4>)
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4403      	add	r3, r0
 800cdfa:	3310      	adds	r3, #16
 800cdfc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800cdfe:	491f      	ldr	r1, [pc, #124]	; (800ce7c <_cbSendTaskList+0xb4>)
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	440b      	add	r3, r1
 800ce0c:	6818      	ldr	r0, [r3, #0]
 800ce0e:	491b      	ldr	r1, [pc, #108]	; (800ce7c <_cbSendTaskList+0xb4>)
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	4613      	mov	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	440b      	add	r3, r1
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	6819      	ldr	r1, [r3, #0]
 800ce20:	4c16      	ldr	r4, [pc, #88]	; (800ce7c <_cbSendTaskList+0xb4>)
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	4613      	mov	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	4413      	add	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4423      	add	r3, r4
 800ce2e:	3308      	adds	r3, #8
 800ce30:	681c      	ldr	r4, [r3, #0]
 800ce32:	4d12      	ldr	r5, [pc, #72]	; (800ce7c <_cbSendTaskList+0xb4>)
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	442b      	add	r3, r5
 800ce40:	330c      	adds	r3, #12
 800ce42:	681d      	ldr	r5, [r3, #0]
 800ce44:	4e0d      	ldr	r6, [pc, #52]	; (800ce7c <_cbSendTaskList+0xb4>)
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4433      	add	r3, r6
 800ce52:	3310      	adds	r3, #16
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	462b      	mov	r3, r5
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	f000 f97a 	bl	800d154 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3301      	adds	r3, #1
 800ce64:	607b      	str	r3, [r7, #4]
 800ce66:	4b06      	ldr	r3, [pc, #24]	; (800ce80 <_cbSendTaskList+0xb8>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d3b1      	bcc.n	800cdd4 <_cbSendTaskList+0xc>
  }
}
 800ce70:	bf00      	nop
 800ce72:	bf00      	nop
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	2002e818 	.word	0x2002e818
 800ce80:	2002e8b8 	.word	0x2002e8b8

0800ce84 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800ce84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce88:	b082      	sub	sp, #8
 800ce8a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800ce8c:	f7fc fd2c 	bl	80098e8 <xTaskGetTickCountFromISR>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2200      	movs	r2, #0
 800ce94:	469a      	mov	sl, r3
 800ce96:	4693      	mov	fp, r2
 800ce98:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800ce9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	f04f 0a00 	mov.w	sl, #0
 800cea8:	f04f 0b00 	mov.w	fp, #0
 800ceac:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800ceb0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800ceb4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800ceb8:	4652      	mov	r2, sl
 800ceba:	465b      	mov	r3, fp
 800cebc:	1a14      	subs	r4, r2, r0
 800cebe:	eb63 0501 	sbc.w	r5, r3, r1
 800cec2:	f04f 0200 	mov.w	r2, #0
 800cec6:	f04f 0300 	mov.w	r3, #0
 800ceca:	00ab      	lsls	r3, r5, #2
 800cecc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ced0:	00a2      	lsls	r2, r4, #2
 800ced2:	4614      	mov	r4, r2
 800ced4:	461d      	mov	r5, r3
 800ced6:	eb14 0800 	adds.w	r8, r4, r0
 800ceda:	eb45 0901 	adc.w	r9, r5, r1
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	f04f 0300 	mov.w	r3, #0
 800cee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ceea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ceee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cef2:	4690      	mov	r8, r2
 800cef4:	4699      	mov	r9, r3
 800cef6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800cefa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800cefe:	4610      	mov	r0, r2
 800cf00:	4619      	mov	r1, r3
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800cf0c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af02      	add	r7, sp, #8
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800cf1a:	2205      	movs	r2, #5
 800cf1c:	492b      	ldr	r1, [pc, #172]	; (800cfcc <SYSVIEW_AddTask+0xc0>)
 800cf1e:	68b8      	ldr	r0, [r7, #8]
 800cf20:	f000 faab 	bl	800d47a <memcmp>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d04b      	beq.n	800cfc2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800cf2a:	4b29      	ldr	r3, [pc, #164]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b07      	cmp	r3, #7
 800cf30:	d903      	bls.n	800cf3a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800cf32:	4828      	ldr	r0, [pc, #160]	; (800cfd4 <SYSVIEW_AddTask+0xc8>)
 800cf34:	f7ff fe0a 	bl	800cb4c <SEGGER_SYSVIEW_Warn>
    return;
 800cf38:	e044      	b.n	800cfc4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800cf3a:	4b25      	ldr	r3, [pc, #148]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	4926      	ldr	r1, [pc, #152]	; (800cfd8 <SYSVIEW_AddTask+0xcc>)
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800cf4e:	4b20      	ldr	r3, [pc, #128]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4921      	ldr	r1, [pc, #132]	; (800cfd8 <SYSVIEW_AddTask+0xcc>)
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	3304      	adds	r3, #4
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800cf64:	4b1a      	ldr	r3, [pc, #104]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	491b      	ldr	r1, [pc, #108]	; (800cfd8 <SYSVIEW_AddTask+0xcc>)
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	440b      	add	r3, r1
 800cf74:	3308      	adds	r3, #8
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800cf7a:	4b15      	ldr	r3, [pc, #84]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	4916      	ldr	r1, [pc, #88]	; (800cfd8 <SYSVIEW_AddTask+0xcc>)
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	440b      	add	r3, r1
 800cf8a:	330c      	adds	r3, #12
 800cf8c:	683a      	ldr	r2, [r7, #0]
 800cf8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800cf90:	4b0f      	ldr	r3, [pc, #60]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	4910      	ldr	r1, [pc, #64]	; (800cfd8 <SYSVIEW_AddTask+0xcc>)
 800cf96:	4613      	mov	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3310      	adds	r3, #16
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	4a08      	ldr	r2, [pc, #32]	; (800cfd0 <SYSVIEW_AddTask+0xc4>)
 800cfae:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	68b9      	ldr	r1, [r7, #8]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f000 f8ca 	bl	800d154 <SYSVIEW_SendTaskInfo>
 800cfc0:	e000      	b.n	800cfc4 <SYSVIEW_AddTask+0xb8>
    return;
 800cfc2:	bf00      	nop

}
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	0800e3b0 	.word	0x0800e3b0
 800cfd0:	2002e8b8 	.word	0x2002e8b8
 800cfd4:	0800e3b8 	.word	0x0800e3b8
 800cfd8:	2002e818 	.word	0x2002e818

0800cfdc <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800cfe4:	4b59      	ldr	r3, [pc, #356]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 80ab 	beq.w	800d144 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800cfee:	2300      	movs	r3, #0
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	e00d      	b.n	800d010 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800cff4:	4956      	ldr	r1, [pc, #344]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	440b      	add	r3, r1
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d008      	beq.n	800d01c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	4b4e      	ldr	r3, [pc, #312]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	429a      	cmp	r2, r3
 800d018:	d3ec      	bcc.n	800cff4 <SYSVIEW_DeleteTask+0x18>
 800d01a:	e000      	b.n	800d01e <SYSVIEW_DeleteTask+0x42>
      break;
 800d01c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800d01e:	4b4b      	ldr	r3, [pc, #300]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3b01      	subs	r3, #1
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	429a      	cmp	r2, r3
 800d028:	d111      	bne.n	800d04e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4a46      	ldr	r2, [pc, #280]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d036:	4413      	add	r3, r2
 800d038:	2214      	movs	r2, #20
 800d03a:	2100      	movs	r1, #0
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 fa2c 	bl	800d49a <memset>
    _NumTasks--;
 800d042:	4b42      	ldr	r3, [pc, #264]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3b01      	subs	r3, #1
 800d048:	4a40      	ldr	r2, [pc, #256]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	e07b      	b.n	800d146 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800d04e:	4b3f      	ldr	r3, [pc, #252]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	429a      	cmp	r2, r3
 800d056:	d276      	bcs.n	800d146 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800d058:	4b3c      	ldr	r3, [pc, #240]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	1e5a      	subs	r2, r3, #1
 800d05e:	493c      	ldr	r1, [pc, #240]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	440b      	add	r3, r1
 800d06a:	6819      	ldr	r1, [r3, #0]
 800d06c:	4838      	ldr	r0, [pc, #224]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4403      	add	r3, r0
 800d07a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800d07c:	4b33      	ldr	r3, [pc, #204]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	1e5a      	subs	r2, r3, #1
 800d082:	4933      	ldr	r1, [pc, #204]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d084:	4613      	mov	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	440b      	add	r3, r1
 800d08e:	3304      	adds	r3, #4
 800d090:	6819      	ldr	r1, [r3, #0]
 800d092:	482f      	ldr	r0, [pc, #188]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4613      	mov	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4403      	add	r3, r0
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800d0a4:	4b29      	ldr	r3, [pc, #164]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	1e5a      	subs	r2, r3, #1
 800d0aa:	4929      	ldr	r1, [pc, #164]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	440b      	add	r3, r1
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	6819      	ldr	r1, [r3, #0]
 800d0ba:	4825      	ldr	r0, [pc, #148]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4613      	mov	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	4413      	add	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4403      	add	r3, r0
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800d0cc:	4b1f      	ldr	r3, [pc, #124]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	1e5a      	subs	r2, r3, #1
 800d0d2:	491f      	ldr	r1, [pc, #124]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	440b      	add	r3, r1
 800d0de:	330c      	adds	r3, #12
 800d0e0:	6819      	ldr	r1, [r3, #0]
 800d0e2:	481b      	ldr	r0, [pc, #108]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4403      	add	r3, r0
 800d0f0:	330c      	adds	r3, #12
 800d0f2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800d0f4:	4b15      	ldr	r3, [pc, #84]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	1e5a      	subs	r2, r3, #1
 800d0fa:	4915      	ldr	r1, [pc, #84]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	440b      	add	r3, r1
 800d106:	3310      	adds	r3, #16
 800d108:	6819      	ldr	r1, [r3, #0]
 800d10a:	4811      	ldr	r0, [pc, #68]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4613      	mov	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	4413      	add	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4403      	add	r3, r0
 800d118:	3310      	adds	r3, #16
 800d11a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800d11c:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	1e5a      	subs	r2, r3, #1
 800d122:	4613      	mov	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4a09      	ldr	r2, [pc, #36]	; (800d150 <SYSVIEW_DeleteTask+0x174>)
 800d12c:	4413      	add	r3, r2
 800d12e:	2214      	movs	r2, #20
 800d130:	2100      	movs	r1, #0
 800d132:	4618      	mov	r0, r3
 800d134:	f000 f9b1 	bl	800d49a <memset>
    _NumTasks--;
 800d138:	4b04      	ldr	r3, [pc, #16]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	4a03      	ldr	r2, [pc, #12]	; (800d14c <SYSVIEW_DeleteTask+0x170>)
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	e000      	b.n	800d146 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800d144:	bf00      	nop
  }
}
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	2002e8b8 	.word	0x2002e8b8
 800d150:	2002e818 	.word	0x2002e818

0800d154 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d154:	b580      	push	{r7, lr}
 800d156:	b08a      	sub	sp, #40	; 0x28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d162:	f107 0314 	add.w	r3, r7, #20
 800d166:	2214      	movs	r2, #20
 800d168:	2100      	movs	r1, #0
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f995 	bl	800d49a <memset>
  TaskInfo.TaskID     = TaskID;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d184:	f107 0314 	add.w	r3, r7, #20
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff f9c3 	bl	800c514 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d18e:	bf00      	nop
 800d190:	3728      	adds	r7, #40	; 0x28
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <srand>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <srand+0x44>)
 800d19c:	681d      	ldr	r5, [r3, #0]
 800d19e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	b9b3      	cbnz	r3, 800d1d2 <srand+0x3a>
 800d1a4:	2018      	movs	r0, #24
 800d1a6:	f000 fac3 	bl	800d730 <malloc>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	6328      	str	r0, [r5, #48]	; 0x30
 800d1ae:	b920      	cbnz	r0, 800d1ba <srand+0x22>
 800d1b0:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <srand+0x48>)
 800d1b2:	480c      	ldr	r0, [pc, #48]	; (800d1e4 <srand+0x4c>)
 800d1b4:	2146      	movs	r1, #70	; 0x46
 800d1b6:	f000 fa51 	bl	800d65c <__assert_func>
 800d1ba:	490b      	ldr	r1, [pc, #44]	; (800d1e8 <srand+0x50>)
 800d1bc:	4b0b      	ldr	r3, [pc, #44]	; (800d1ec <srand+0x54>)
 800d1be:	e9c0 1300 	strd	r1, r3, [r0]
 800d1c2:	4b0b      	ldr	r3, [pc, #44]	; (800d1f0 <srand+0x58>)
 800d1c4:	6083      	str	r3, [r0, #8]
 800d1c6:	230b      	movs	r3, #11
 800d1c8:	8183      	strh	r3, [r0, #12]
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	2001      	movs	r0, #1
 800d1ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d1d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	611c      	str	r4, [r3, #16]
 800d1d8:	615a      	str	r2, [r3, #20]
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	2000035c 	.word	0x2000035c
 800d1e0:	0801025c 	.word	0x0801025c
 800d1e4:	08010273 	.word	0x08010273
 800d1e8:	abcd330e 	.word	0xabcd330e
 800d1ec:	e66d1234 	.word	0xe66d1234
 800d1f0:	0005deec 	.word	0x0005deec

0800d1f4 <rand>:
 800d1f4:	4b16      	ldr	r3, [pc, #88]	; (800d250 <rand+0x5c>)
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	681c      	ldr	r4, [r3, #0]
 800d1fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d1fc:	b9b3      	cbnz	r3, 800d22c <rand+0x38>
 800d1fe:	2018      	movs	r0, #24
 800d200:	f000 fa96 	bl	800d730 <malloc>
 800d204:	4602      	mov	r2, r0
 800d206:	6320      	str	r0, [r4, #48]	; 0x30
 800d208:	b920      	cbnz	r0, 800d214 <rand+0x20>
 800d20a:	4b12      	ldr	r3, [pc, #72]	; (800d254 <rand+0x60>)
 800d20c:	4812      	ldr	r0, [pc, #72]	; (800d258 <rand+0x64>)
 800d20e:	2152      	movs	r1, #82	; 0x52
 800d210:	f000 fa24 	bl	800d65c <__assert_func>
 800d214:	4911      	ldr	r1, [pc, #68]	; (800d25c <rand+0x68>)
 800d216:	4b12      	ldr	r3, [pc, #72]	; (800d260 <rand+0x6c>)
 800d218:	e9c0 1300 	strd	r1, r3, [r0]
 800d21c:	4b11      	ldr	r3, [pc, #68]	; (800d264 <rand+0x70>)
 800d21e:	6083      	str	r3, [r0, #8]
 800d220:	230b      	movs	r3, #11
 800d222:	8183      	strh	r3, [r0, #12]
 800d224:	2100      	movs	r1, #0
 800d226:	2001      	movs	r0, #1
 800d228:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d22c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d22e:	480e      	ldr	r0, [pc, #56]	; (800d268 <rand+0x74>)
 800d230:	690b      	ldr	r3, [r1, #16]
 800d232:	694c      	ldr	r4, [r1, #20]
 800d234:	4a0d      	ldr	r2, [pc, #52]	; (800d26c <rand+0x78>)
 800d236:	4358      	muls	r0, r3
 800d238:	fb02 0004 	mla	r0, r2, r4, r0
 800d23c:	fba3 3202 	umull	r3, r2, r3, r2
 800d240:	3301      	adds	r3, #1
 800d242:	eb40 0002 	adc.w	r0, r0, r2
 800d246:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d24a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d24e:	bd10      	pop	{r4, pc}
 800d250:	2000035c 	.word	0x2000035c
 800d254:	0801025c 	.word	0x0801025c
 800d258:	08010273 	.word	0x08010273
 800d25c:	abcd330e 	.word	0xabcd330e
 800d260:	e66d1234 	.word	0xe66d1234
 800d264:	0005deec 	.word	0x0005deec
 800d268:	5851f42d 	.word	0x5851f42d
 800d26c:	4c957f2d 	.word	0x4c957f2d

0800d270 <std>:
 800d270:	2300      	movs	r3, #0
 800d272:	b510      	push	{r4, lr}
 800d274:	4604      	mov	r4, r0
 800d276:	e9c0 3300 	strd	r3, r3, [r0]
 800d27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d27e:	6083      	str	r3, [r0, #8]
 800d280:	8181      	strh	r1, [r0, #12]
 800d282:	6643      	str	r3, [r0, #100]	; 0x64
 800d284:	81c2      	strh	r2, [r0, #14]
 800d286:	6183      	str	r3, [r0, #24]
 800d288:	4619      	mov	r1, r3
 800d28a:	2208      	movs	r2, #8
 800d28c:	305c      	adds	r0, #92	; 0x5c
 800d28e:	f000 f904 	bl	800d49a <memset>
 800d292:	4b0d      	ldr	r3, [pc, #52]	; (800d2c8 <std+0x58>)
 800d294:	6263      	str	r3, [r4, #36]	; 0x24
 800d296:	4b0d      	ldr	r3, [pc, #52]	; (800d2cc <std+0x5c>)
 800d298:	62a3      	str	r3, [r4, #40]	; 0x28
 800d29a:	4b0d      	ldr	r3, [pc, #52]	; (800d2d0 <std+0x60>)
 800d29c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d29e:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <std+0x64>)
 800d2a0:	6323      	str	r3, [r4, #48]	; 0x30
 800d2a2:	4b0d      	ldr	r3, [pc, #52]	; (800d2d8 <std+0x68>)
 800d2a4:	6224      	str	r4, [r4, #32]
 800d2a6:	429c      	cmp	r4, r3
 800d2a8:	d006      	beq.n	800d2b8 <std+0x48>
 800d2aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d2ae:	4294      	cmp	r4, r2
 800d2b0:	d002      	beq.n	800d2b8 <std+0x48>
 800d2b2:	33d0      	adds	r3, #208	; 0xd0
 800d2b4:	429c      	cmp	r4, r3
 800d2b6:	d105      	bne.n	800d2c4 <std+0x54>
 800d2b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c0:	f000 b9ba 	b.w	800d638 <__retarget_lock_init_recursive>
 800d2c4:	bd10      	pop	{r4, pc}
 800d2c6:	bf00      	nop
 800d2c8:	0800d3f5 	.word	0x0800d3f5
 800d2cc:	0800d417 	.word	0x0800d417
 800d2d0:	0800d44f 	.word	0x0800d44f
 800d2d4:	0800d473 	.word	0x0800d473
 800d2d8:	2002e8bc 	.word	0x2002e8bc

0800d2dc <stdio_exit_handler>:
 800d2dc:	4a02      	ldr	r2, [pc, #8]	; (800d2e8 <stdio_exit_handler+0xc>)
 800d2de:	4903      	ldr	r1, [pc, #12]	; (800d2ec <stdio_exit_handler+0x10>)
 800d2e0:	4803      	ldr	r0, [pc, #12]	; (800d2f0 <stdio_exit_handler+0x14>)
 800d2e2:	f000 b869 	b.w	800d3b8 <_fwalk_sglue>
 800d2e6:	bf00      	nop
 800d2e8:	20000304 	.word	0x20000304
 800d2ec:	0800d9a5 	.word	0x0800d9a5
 800d2f0:	20000310 	.word	0x20000310

0800d2f4 <cleanup_stdio>:
 800d2f4:	6841      	ldr	r1, [r0, #4]
 800d2f6:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <cleanup_stdio+0x34>)
 800d2f8:	4299      	cmp	r1, r3
 800d2fa:	b510      	push	{r4, lr}
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	d001      	beq.n	800d304 <cleanup_stdio+0x10>
 800d300:	f000 fb50 	bl	800d9a4 <_fflush_r>
 800d304:	68a1      	ldr	r1, [r4, #8]
 800d306:	4b09      	ldr	r3, [pc, #36]	; (800d32c <cleanup_stdio+0x38>)
 800d308:	4299      	cmp	r1, r3
 800d30a:	d002      	beq.n	800d312 <cleanup_stdio+0x1e>
 800d30c:	4620      	mov	r0, r4
 800d30e:	f000 fb49 	bl	800d9a4 <_fflush_r>
 800d312:	68e1      	ldr	r1, [r4, #12]
 800d314:	4b06      	ldr	r3, [pc, #24]	; (800d330 <cleanup_stdio+0x3c>)
 800d316:	4299      	cmp	r1, r3
 800d318:	d004      	beq.n	800d324 <cleanup_stdio+0x30>
 800d31a:	4620      	mov	r0, r4
 800d31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d320:	f000 bb40 	b.w	800d9a4 <_fflush_r>
 800d324:	bd10      	pop	{r4, pc}
 800d326:	bf00      	nop
 800d328:	2002e8bc 	.word	0x2002e8bc
 800d32c:	2002e924 	.word	0x2002e924
 800d330:	2002e98c 	.word	0x2002e98c

0800d334 <global_stdio_init.part.0>:
 800d334:	b510      	push	{r4, lr}
 800d336:	4b0b      	ldr	r3, [pc, #44]	; (800d364 <global_stdio_init.part.0+0x30>)
 800d338:	4c0b      	ldr	r4, [pc, #44]	; (800d368 <global_stdio_init.part.0+0x34>)
 800d33a:	4a0c      	ldr	r2, [pc, #48]	; (800d36c <global_stdio_init.part.0+0x38>)
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	4620      	mov	r0, r4
 800d340:	2200      	movs	r2, #0
 800d342:	2104      	movs	r1, #4
 800d344:	f7ff ff94 	bl	800d270 <std>
 800d348:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d34c:	2201      	movs	r2, #1
 800d34e:	2109      	movs	r1, #9
 800d350:	f7ff ff8e 	bl	800d270 <std>
 800d354:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d358:	2202      	movs	r2, #2
 800d35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d35e:	2112      	movs	r1, #18
 800d360:	f7ff bf86 	b.w	800d270 <std>
 800d364:	2002e9f4 	.word	0x2002e9f4
 800d368:	2002e8bc 	.word	0x2002e8bc
 800d36c:	0800d2dd 	.word	0x0800d2dd

0800d370 <__sfp_lock_acquire>:
 800d370:	4801      	ldr	r0, [pc, #4]	; (800d378 <__sfp_lock_acquire+0x8>)
 800d372:	f000 b962 	b.w	800d63a <__retarget_lock_acquire_recursive>
 800d376:	bf00      	nop
 800d378:	2002e9fd 	.word	0x2002e9fd

0800d37c <__sfp_lock_release>:
 800d37c:	4801      	ldr	r0, [pc, #4]	; (800d384 <__sfp_lock_release+0x8>)
 800d37e:	f000 b95d 	b.w	800d63c <__retarget_lock_release_recursive>
 800d382:	bf00      	nop
 800d384:	2002e9fd 	.word	0x2002e9fd

0800d388 <__sinit>:
 800d388:	b510      	push	{r4, lr}
 800d38a:	4604      	mov	r4, r0
 800d38c:	f7ff fff0 	bl	800d370 <__sfp_lock_acquire>
 800d390:	6a23      	ldr	r3, [r4, #32]
 800d392:	b11b      	cbz	r3, 800d39c <__sinit+0x14>
 800d394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d398:	f7ff bff0 	b.w	800d37c <__sfp_lock_release>
 800d39c:	4b04      	ldr	r3, [pc, #16]	; (800d3b0 <__sinit+0x28>)
 800d39e:	6223      	str	r3, [r4, #32]
 800d3a0:	4b04      	ldr	r3, [pc, #16]	; (800d3b4 <__sinit+0x2c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1f5      	bne.n	800d394 <__sinit+0xc>
 800d3a8:	f7ff ffc4 	bl	800d334 <global_stdio_init.part.0>
 800d3ac:	e7f2      	b.n	800d394 <__sinit+0xc>
 800d3ae:	bf00      	nop
 800d3b0:	0800d2f5 	.word	0x0800d2f5
 800d3b4:	2002e9f4 	.word	0x2002e9f4

0800d3b8 <_fwalk_sglue>:
 800d3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3bc:	4607      	mov	r7, r0
 800d3be:	4688      	mov	r8, r1
 800d3c0:	4614      	mov	r4, r2
 800d3c2:	2600      	movs	r6, #0
 800d3c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3c8:	f1b9 0901 	subs.w	r9, r9, #1
 800d3cc:	d505      	bpl.n	800d3da <_fwalk_sglue+0x22>
 800d3ce:	6824      	ldr	r4, [r4, #0]
 800d3d0:	2c00      	cmp	r4, #0
 800d3d2:	d1f7      	bne.n	800d3c4 <_fwalk_sglue+0xc>
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3da:	89ab      	ldrh	r3, [r5, #12]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d907      	bls.n	800d3f0 <_fwalk_sglue+0x38>
 800d3e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	d003      	beq.n	800d3f0 <_fwalk_sglue+0x38>
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	47c0      	blx	r8
 800d3ee:	4306      	orrs	r6, r0
 800d3f0:	3568      	adds	r5, #104	; 0x68
 800d3f2:	e7e9      	b.n	800d3c8 <_fwalk_sglue+0x10>

0800d3f4 <__sread>:
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fc:	f000 f8ce 	bl	800d59c <_read_r>
 800d400:	2800      	cmp	r0, #0
 800d402:	bfab      	itete	ge
 800d404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d406:	89a3      	ldrhlt	r3, [r4, #12]
 800d408:	181b      	addge	r3, r3, r0
 800d40a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d40e:	bfac      	ite	ge
 800d410:	6563      	strge	r3, [r4, #84]	; 0x54
 800d412:	81a3      	strhlt	r3, [r4, #12]
 800d414:	bd10      	pop	{r4, pc}

0800d416 <__swrite>:
 800d416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41a:	461f      	mov	r7, r3
 800d41c:	898b      	ldrh	r3, [r1, #12]
 800d41e:	05db      	lsls	r3, r3, #23
 800d420:	4605      	mov	r5, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4616      	mov	r6, r2
 800d426:	d505      	bpl.n	800d434 <__swrite+0x1e>
 800d428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42c:	2302      	movs	r3, #2
 800d42e:	2200      	movs	r2, #0
 800d430:	f000 f8a2 	bl	800d578 <_lseek_r>
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d43a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	4632      	mov	r2, r6
 800d442:	463b      	mov	r3, r7
 800d444:	4628      	mov	r0, r5
 800d446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d44a:	f000 b8b9 	b.w	800d5c0 <_write_r>

0800d44e <__sseek>:
 800d44e:	b510      	push	{r4, lr}
 800d450:	460c      	mov	r4, r1
 800d452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d456:	f000 f88f 	bl	800d578 <_lseek_r>
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	bf15      	itete	ne
 800d460:	6560      	strne	r0, [r4, #84]	; 0x54
 800d462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d46a:	81a3      	strheq	r3, [r4, #12]
 800d46c:	bf18      	it	ne
 800d46e:	81a3      	strhne	r3, [r4, #12]
 800d470:	bd10      	pop	{r4, pc}

0800d472 <__sclose>:
 800d472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d476:	f000 b819 	b.w	800d4ac <_close_r>

0800d47a <memcmp>:
 800d47a:	b510      	push	{r4, lr}
 800d47c:	3901      	subs	r1, #1
 800d47e:	4402      	add	r2, r0
 800d480:	4290      	cmp	r0, r2
 800d482:	d101      	bne.n	800d488 <memcmp+0xe>
 800d484:	2000      	movs	r0, #0
 800d486:	e005      	b.n	800d494 <memcmp+0x1a>
 800d488:	7803      	ldrb	r3, [r0, #0]
 800d48a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d48e:	42a3      	cmp	r3, r4
 800d490:	d001      	beq.n	800d496 <memcmp+0x1c>
 800d492:	1b18      	subs	r0, r3, r4
 800d494:	bd10      	pop	{r4, pc}
 800d496:	3001      	adds	r0, #1
 800d498:	e7f2      	b.n	800d480 <memcmp+0x6>

0800d49a <memset>:
 800d49a:	4402      	add	r2, r0
 800d49c:	4603      	mov	r3, r0
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d100      	bne.n	800d4a4 <memset+0xa>
 800d4a2:	4770      	bx	lr
 800d4a4:	f803 1b01 	strb.w	r1, [r3], #1
 800d4a8:	e7f9      	b.n	800d49e <memset+0x4>
	...

0800d4ac <_close_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d06      	ldr	r5, [pc, #24]	; (800d4c8 <_close_r+0x1c>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	602b      	str	r3, [r5, #0]
 800d4b8:	f7f7 f817 	bl	80044ea <_close>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_close_r+0x1a>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_close_r+0x1a>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	2002e9f8 	.word	0x2002e9f8

0800d4cc <_reclaim_reent>:
 800d4cc:	4b29      	ldr	r3, [pc, #164]	; (800d574 <_reclaim_reent+0xa8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4283      	cmp	r3, r0
 800d4d2:	b570      	push	{r4, r5, r6, lr}
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	d04b      	beq.n	800d570 <_reclaim_reent+0xa4>
 800d4d8:	69c3      	ldr	r3, [r0, #28]
 800d4da:	b143      	cbz	r3, 800d4ee <_reclaim_reent+0x22>
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d144      	bne.n	800d56c <_reclaim_reent+0xa0>
 800d4e2:	69e3      	ldr	r3, [r4, #28]
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	b111      	cbz	r1, 800d4ee <_reclaim_reent+0x22>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 f8d5 	bl	800d698 <_free_r>
 800d4ee:	6961      	ldr	r1, [r4, #20]
 800d4f0:	b111      	cbz	r1, 800d4f8 <_reclaim_reent+0x2c>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 f8d0 	bl	800d698 <_free_r>
 800d4f8:	69e1      	ldr	r1, [r4, #28]
 800d4fa:	b111      	cbz	r1, 800d502 <_reclaim_reent+0x36>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 f8cb 	bl	800d698 <_free_r>
 800d502:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d504:	b111      	cbz	r1, 800d50c <_reclaim_reent+0x40>
 800d506:	4620      	mov	r0, r4
 800d508:	f000 f8c6 	bl	800d698 <_free_r>
 800d50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d50e:	b111      	cbz	r1, 800d516 <_reclaim_reent+0x4a>
 800d510:	4620      	mov	r0, r4
 800d512:	f000 f8c1 	bl	800d698 <_free_r>
 800d516:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d518:	b111      	cbz	r1, 800d520 <_reclaim_reent+0x54>
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 f8bc 	bl	800d698 <_free_r>
 800d520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d522:	b111      	cbz	r1, 800d52a <_reclaim_reent+0x5e>
 800d524:	4620      	mov	r0, r4
 800d526:	f000 f8b7 	bl	800d698 <_free_r>
 800d52a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d52c:	b111      	cbz	r1, 800d534 <_reclaim_reent+0x68>
 800d52e:	4620      	mov	r0, r4
 800d530:	f000 f8b2 	bl	800d698 <_free_r>
 800d534:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d536:	b111      	cbz	r1, 800d53e <_reclaim_reent+0x72>
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 f8ad 	bl	800d698 <_free_r>
 800d53e:	6a23      	ldr	r3, [r4, #32]
 800d540:	b1b3      	cbz	r3, 800d570 <_reclaim_reent+0xa4>
 800d542:	4620      	mov	r0, r4
 800d544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d548:	4718      	bx	r3
 800d54a:	5949      	ldr	r1, [r1, r5]
 800d54c:	b941      	cbnz	r1, 800d560 <_reclaim_reent+0x94>
 800d54e:	3504      	adds	r5, #4
 800d550:	69e3      	ldr	r3, [r4, #28]
 800d552:	2d80      	cmp	r5, #128	; 0x80
 800d554:	68d9      	ldr	r1, [r3, #12]
 800d556:	d1f8      	bne.n	800d54a <_reclaim_reent+0x7e>
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 f89d 	bl	800d698 <_free_r>
 800d55e:	e7c0      	b.n	800d4e2 <_reclaim_reent+0x16>
 800d560:	680e      	ldr	r6, [r1, #0]
 800d562:	4620      	mov	r0, r4
 800d564:	f000 f898 	bl	800d698 <_free_r>
 800d568:	4631      	mov	r1, r6
 800d56a:	e7ef      	b.n	800d54c <_reclaim_reent+0x80>
 800d56c:	2500      	movs	r5, #0
 800d56e:	e7ef      	b.n	800d550 <_reclaim_reent+0x84>
 800d570:	bd70      	pop	{r4, r5, r6, pc}
 800d572:	bf00      	nop
 800d574:	2000035c 	.word	0x2000035c

0800d578 <_lseek_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4d07      	ldr	r5, [pc, #28]	; (800d598 <_lseek_r+0x20>)
 800d57c:	4604      	mov	r4, r0
 800d57e:	4608      	mov	r0, r1
 800d580:	4611      	mov	r1, r2
 800d582:	2200      	movs	r2, #0
 800d584:	602a      	str	r2, [r5, #0]
 800d586:	461a      	mov	r2, r3
 800d588:	f7f6 ffd6 	bl	8004538 <_lseek>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_lseek_r+0x1e>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	b103      	cbz	r3, 800d596 <_lseek_r+0x1e>
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	2002e9f8 	.word	0x2002e9f8

0800d59c <_read_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d07      	ldr	r5, [pc, #28]	; (800d5bc <_read_r+0x20>)
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	4608      	mov	r0, r1
 800d5a4:	4611      	mov	r1, r2
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	602a      	str	r2, [r5, #0]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	f7f6 ff64 	bl	8004478 <_read>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	d102      	bne.n	800d5ba <_read_r+0x1e>
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	b103      	cbz	r3, 800d5ba <_read_r+0x1e>
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	bd38      	pop	{r3, r4, r5, pc}
 800d5bc:	2002e9f8 	.word	0x2002e9f8

0800d5c0 <_write_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d07      	ldr	r5, [pc, #28]	; (800d5e0 <_write_r+0x20>)
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	4608      	mov	r0, r1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	602a      	str	r2, [r5, #0]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f7f6 ff6f 	bl	80044b2 <_write>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_write_r+0x1e>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_write_r+0x1e>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	2002e9f8 	.word	0x2002e9f8

0800d5e4 <__errno>:
 800d5e4:	4b01      	ldr	r3, [pc, #4]	; (800d5ec <__errno+0x8>)
 800d5e6:	6818      	ldr	r0, [r3, #0]
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	2000035c 	.word	0x2000035c

0800d5f0 <__libc_init_array>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	4d0d      	ldr	r5, [pc, #52]	; (800d628 <__libc_init_array+0x38>)
 800d5f4:	4c0d      	ldr	r4, [pc, #52]	; (800d62c <__libc_init_array+0x3c>)
 800d5f6:	1b64      	subs	r4, r4, r5
 800d5f8:	10a4      	asrs	r4, r4, #2
 800d5fa:	2600      	movs	r6, #0
 800d5fc:	42a6      	cmp	r6, r4
 800d5fe:	d109      	bne.n	800d614 <__libc_init_array+0x24>
 800d600:	4d0b      	ldr	r5, [pc, #44]	; (800d630 <__libc_init_array+0x40>)
 800d602:	4c0c      	ldr	r4, [pc, #48]	; (800d634 <__libc_init_array+0x44>)
 800d604:	f000 fe50 	bl	800e2a8 <_init>
 800d608:	1b64      	subs	r4, r4, r5
 800d60a:	10a4      	asrs	r4, r4, #2
 800d60c:	2600      	movs	r6, #0
 800d60e:	42a6      	cmp	r6, r4
 800d610:	d105      	bne.n	800d61e <__libc_init_array+0x2e>
 800d612:	bd70      	pop	{r4, r5, r6, pc}
 800d614:	f855 3b04 	ldr.w	r3, [r5], #4
 800d618:	4798      	blx	r3
 800d61a:	3601      	adds	r6, #1
 800d61c:	e7ee      	b.n	800d5fc <__libc_init_array+0xc>
 800d61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d622:	4798      	blx	r3
 800d624:	3601      	adds	r6, #1
 800d626:	e7f2      	b.n	800d60e <__libc_init_array+0x1e>
 800d628:	08010344 	.word	0x08010344
 800d62c:	08010344 	.word	0x08010344
 800d630:	08010344 	.word	0x08010344
 800d634:	08010348 	.word	0x08010348

0800d638 <__retarget_lock_init_recursive>:
 800d638:	4770      	bx	lr

0800d63a <__retarget_lock_acquire_recursive>:
 800d63a:	4770      	bx	lr

0800d63c <__retarget_lock_release_recursive>:
 800d63c:	4770      	bx	lr

0800d63e <memcpy>:
 800d63e:	440a      	add	r2, r1
 800d640:	4291      	cmp	r1, r2
 800d642:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d646:	d100      	bne.n	800d64a <memcpy+0xc>
 800d648:	4770      	bx	lr
 800d64a:	b510      	push	{r4, lr}
 800d64c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d650:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d654:	4291      	cmp	r1, r2
 800d656:	d1f9      	bne.n	800d64c <memcpy+0xe>
 800d658:	bd10      	pop	{r4, pc}
	...

0800d65c <__assert_func>:
 800d65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d65e:	4614      	mov	r4, r2
 800d660:	461a      	mov	r2, r3
 800d662:	4b09      	ldr	r3, [pc, #36]	; (800d688 <__assert_func+0x2c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4605      	mov	r5, r0
 800d668:	68d8      	ldr	r0, [r3, #12]
 800d66a:	b14c      	cbz	r4, 800d680 <__assert_func+0x24>
 800d66c:	4b07      	ldr	r3, [pc, #28]	; (800d68c <__assert_func+0x30>)
 800d66e:	9100      	str	r1, [sp, #0]
 800d670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d674:	4906      	ldr	r1, [pc, #24]	; (800d690 <__assert_func+0x34>)
 800d676:	462b      	mov	r3, r5
 800d678:	f000 f9bc 	bl	800d9f4 <fiprintf>
 800d67c:	f000 f9dc 	bl	800da38 <abort>
 800d680:	4b04      	ldr	r3, [pc, #16]	; (800d694 <__assert_func+0x38>)
 800d682:	461c      	mov	r4, r3
 800d684:	e7f3      	b.n	800d66e <__assert_func+0x12>
 800d686:	bf00      	nop
 800d688:	2000035c 	.word	0x2000035c
 800d68c:	080102cb 	.word	0x080102cb
 800d690:	080102d8 	.word	0x080102d8
 800d694:	08010306 	.word	0x08010306

0800d698 <_free_r>:
 800d698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d69a:	2900      	cmp	r1, #0
 800d69c:	d044      	beq.n	800d728 <_free_r+0x90>
 800d69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a2:	9001      	str	r0, [sp, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f1a1 0404 	sub.w	r4, r1, #4
 800d6aa:	bfb8      	it	lt
 800d6ac:	18e4      	addlt	r4, r4, r3
 800d6ae:	f000 f8e7 	bl	800d880 <__malloc_lock>
 800d6b2:	4a1e      	ldr	r2, [pc, #120]	; (800d72c <_free_r+0x94>)
 800d6b4:	9801      	ldr	r0, [sp, #4]
 800d6b6:	6813      	ldr	r3, [r2, #0]
 800d6b8:	b933      	cbnz	r3, 800d6c8 <_free_r+0x30>
 800d6ba:	6063      	str	r3, [r4, #4]
 800d6bc:	6014      	str	r4, [r2, #0]
 800d6be:	b003      	add	sp, #12
 800d6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6c4:	f000 b8e2 	b.w	800d88c <__malloc_unlock>
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d908      	bls.n	800d6de <_free_r+0x46>
 800d6cc:	6825      	ldr	r5, [r4, #0]
 800d6ce:	1961      	adds	r1, r4, r5
 800d6d0:	428b      	cmp	r3, r1
 800d6d2:	bf01      	itttt	eq
 800d6d4:	6819      	ldreq	r1, [r3, #0]
 800d6d6:	685b      	ldreq	r3, [r3, #4]
 800d6d8:	1949      	addeq	r1, r1, r5
 800d6da:	6021      	streq	r1, [r4, #0]
 800d6dc:	e7ed      	b.n	800d6ba <_free_r+0x22>
 800d6de:	461a      	mov	r2, r3
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	b10b      	cbz	r3, 800d6e8 <_free_r+0x50>
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d9fa      	bls.n	800d6de <_free_r+0x46>
 800d6e8:	6811      	ldr	r1, [r2, #0]
 800d6ea:	1855      	adds	r5, r2, r1
 800d6ec:	42a5      	cmp	r5, r4
 800d6ee:	d10b      	bne.n	800d708 <_free_r+0x70>
 800d6f0:	6824      	ldr	r4, [r4, #0]
 800d6f2:	4421      	add	r1, r4
 800d6f4:	1854      	adds	r4, r2, r1
 800d6f6:	42a3      	cmp	r3, r4
 800d6f8:	6011      	str	r1, [r2, #0]
 800d6fa:	d1e0      	bne.n	800d6be <_free_r+0x26>
 800d6fc:	681c      	ldr	r4, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	6053      	str	r3, [r2, #4]
 800d702:	440c      	add	r4, r1
 800d704:	6014      	str	r4, [r2, #0]
 800d706:	e7da      	b.n	800d6be <_free_r+0x26>
 800d708:	d902      	bls.n	800d710 <_free_r+0x78>
 800d70a:	230c      	movs	r3, #12
 800d70c:	6003      	str	r3, [r0, #0]
 800d70e:	e7d6      	b.n	800d6be <_free_r+0x26>
 800d710:	6825      	ldr	r5, [r4, #0]
 800d712:	1961      	adds	r1, r4, r5
 800d714:	428b      	cmp	r3, r1
 800d716:	bf04      	itt	eq
 800d718:	6819      	ldreq	r1, [r3, #0]
 800d71a:	685b      	ldreq	r3, [r3, #4]
 800d71c:	6063      	str	r3, [r4, #4]
 800d71e:	bf04      	itt	eq
 800d720:	1949      	addeq	r1, r1, r5
 800d722:	6021      	streq	r1, [r4, #0]
 800d724:	6054      	str	r4, [r2, #4]
 800d726:	e7ca      	b.n	800d6be <_free_r+0x26>
 800d728:	b003      	add	sp, #12
 800d72a:	bd30      	pop	{r4, r5, pc}
 800d72c:	2002ea00 	.word	0x2002ea00

0800d730 <malloc>:
 800d730:	4b02      	ldr	r3, [pc, #8]	; (800d73c <malloc+0xc>)
 800d732:	4601      	mov	r1, r0
 800d734:	6818      	ldr	r0, [r3, #0]
 800d736:	f000 b823 	b.w	800d780 <_malloc_r>
 800d73a:	bf00      	nop
 800d73c:	2000035c 	.word	0x2000035c

0800d740 <sbrk_aligned>:
 800d740:	b570      	push	{r4, r5, r6, lr}
 800d742:	4e0e      	ldr	r6, [pc, #56]	; (800d77c <sbrk_aligned+0x3c>)
 800d744:	460c      	mov	r4, r1
 800d746:	6831      	ldr	r1, [r6, #0]
 800d748:	4605      	mov	r5, r0
 800d74a:	b911      	cbnz	r1, 800d752 <sbrk_aligned+0x12>
 800d74c:	f000 f964 	bl	800da18 <_sbrk_r>
 800d750:	6030      	str	r0, [r6, #0]
 800d752:	4621      	mov	r1, r4
 800d754:	4628      	mov	r0, r5
 800d756:	f000 f95f 	bl	800da18 <_sbrk_r>
 800d75a:	1c43      	adds	r3, r0, #1
 800d75c:	d00a      	beq.n	800d774 <sbrk_aligned+0x34>
 800d75e:	1cc4      	adds	r4, r0, #3
 800d760:	f024 0403 	bic.w	r4, r4, #3
 800d764:	42a0      	cmp	r0, r4
 800d766:	d007      	beq.n	800d778 <sbrk_aligned+0x38>
 800d768:	1a21      	subs	r1, r4, r0
 800d76a:	4628      	mov	r0, r5
 800d76c:	f000 f954 	bl	800da18 <_sbrk_r>
 800d770:	3001      	adds	r0, #1
 800d772:	d101      	bne.n	800d778 <sbrk_aligned+0x38>
 800d774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d778:	4620      	mov	r0, r4
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	2002ea04 	.word	0x2002ea04

0800d780 <_malloc_r>:
 800d780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d784:	1ccd      	adds	r5, r1, #3
 800d786:	f025 0503 	bic.w	r5, r5, #3
 800d78a:	3508      	adds	r5, #8
 800d78c:	2d0c      	cmp	r5, #12
 800d78e:	bf38      	it	cc
 800d790:	250c      	movcc	r5, #12
 800d792:	2d00      	cmp	r5, #0
 800d794:	4607      	mov	r7, r0
 800d796:	db01      	blt.n	800d79c <_malloc_r+0x1c>
 800d798:	42a9      	cmp	r1, r5
 800d79a:	d905      	bls.n	800d7a8 <_malloc_r+0x28>
 800d79c:	230c      	movs	r3, #12
 800d79e:	603b      	str	r3, [r7, #0]
 800d7a0:	2600      	movs	r6, #0
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d87c <_malloc_r+0xfc>
 800d7ac:	f000 f868 	bl	800d880 <__malloc_lock>
 800d7b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d7b4:	461c      	mov	r4, r3
 800d7b6:	bb5c      	cbnz	r4, 800d810 <_malloc_r+0x90>
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	f7ff ffc0 	bl	800d740 <sbrk_aligned>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	d155      	bne.n	800d872 <_malloc_r+0xf2>
 800d7c6:	f8d8 4000 	ldr.w	r4, [r8]
 800d7ca:	4626      	mov	r6, r4
 800d7cc:	2e00      	cmp	r6, #0
 800d7ce:	d145      	bne.n	800d85c <_malloc_r+0xdc>
 800d7d0:	2c00      	cmp	r4, #0
 800d7d2:	d048      	beq.n	800d866 <_malloc_r+0xe6>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	4638      	mov	r0, r7
 800d7da:	eb04 0903 	add.w	r9, r4, r3
 800d7de:	f000 f91b 	bl	800da18 <_sbrk_r>
 800d7e2:	4581      	cmp	r9, r0
 800d7e4:	d13f      	bne.n	800d866 <_malloc_r+0xe6>
 800d7e6:	6821      	ldr	r1, [r4, #0]
 800d7e8:	1a6d      	subs	r5, r5, r1
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	f7ff ffa7 	bl	800d740 <sbrk_aligned>
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	d037      	beq.n	800d866 <_malloc_r+0xe6>
 800d7f6:	6823      	ldr	r3, [r4, #0]
 800d7f8:	442b      	add	r3, r5
 800d7fa:	6023      	str	r3, [r4, #0]
 800d7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d038      	beq.n	800d876 <_malloc_r+0xf6>
 800d804:	685a      	ldr	r2, [r3, #4]
 800d806:	42a2      	cmp	r2, r4
 800d808:	d12b      	bne.n	800d862 <_malloc_r+0xe2>
 800d80a:	2200      	movs	r2, #0
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	e00f      	b.n	800d830 <_malloc_r+0xb0>
 800d810:	6822      	ldr	r2, [r4, #0]
 800d812:	1b52      	subs	r2, r2, r5
 800d814:	d41f      	bmi.n	800d856 <_malloc_r+0xd6>
 800d816:	2a0b      	cmp	r2, #11
 800d818:	d917      	bls.n	800d84a <_malloc_r+0xca>
 800d81a:	1961      	adds	r1, r4, r5
 800d81c:	42a3      	cmp	r3, r4
 800d81e:	6025      	str	r5, [r4, #0]
 800d820:	bf18      	it	ne
 800d822:	6059      	strne	r1, [r3, #4]
 800d824:	6863      	ldr	r3, [r4, #4]
 800d826:	bf08      	it	eq
 800d828:	f8c8 1000 	streq.w	r1, [r8]
 800d82c:	5162      	str	r2, [r4, r5]
 800d82e:	604b      	str	r3, [r1, #4]
 800d830:	4638      	mov	r0, r7
 800d832:	f104 060b 	add.w	r6, r4, #11
 800d836:	f000 f829 	bl	800d88c <__malloc_unlock>
 800d83a:	f026 0607 	bic.w	r6, r6, #7
 800d83e:	1d23      	adds	r3, r4, #4
 800d840:	1af2      	subs	r2, r6, r3
 800d842:	d0ae      	beq.n	800d7a2 <_malloc_r+0x22>
 800d844:	1b9b      	subs	r3, r3, r6
 800d846:	50a3      	str	r3, [r4, r2]
 800d848:	e7ab      	b.n	800d7a2 <_malloc_r+0x22>
 800d84a:	42a3      	cmp	r3, r4
 800d84c:	6862      	ldr	r2, [r4, #4]
 800d84e:	d1dd      	bne.n	800d80c <_malloc_r+0x8c>
 800d850:	f8c8 2000 	str.w	r2, [r8]
 800d854:	e7ec      	b.n	800d830 <_malloc_r+0xb0>
 800d856:	4623      	mov	r3, r4
 800d858:	6864      	ldr	r4, [r4, #4]
 800d85a:	e7ac      	b.n	800d7b6 <_malloc_r+0x36>
 800d85c:	4634      	mov	r4, r6
 800d85e:	6876      	ldr	r6, [r6, #4]
 800d860:	e7b4      	b.n	800d7cc <_malloc_r+0x4c>
 800d862:	4613      	mov	r3, r2
 800d864:	e7cc      	b.n	800d800 <_malloc_r+0x80>
 800d866:	230c      	movs	r3, #12
 800d868:	603b      	str	r3, [r7, #0]
 800d86a:	4638      	mov	r0, r7
 800d86c:	f000 f80e 	bl	800d88c <__malloc_unlock>
 800d870:	e797      	b.n	800d7a2 <_malloc_r+0x22>
 800d872:	6025      	str	r5, [r4, #0]
 800d874:	e7dc      	b.n	800d830 <_malloc_r+0xb0>
 800d876:	605b      	str	r3, [r3, #4]
 800d878:	deff      	udf	#255	; 0xff
 800d87a:	bf00      	nop
 800d87c:	2002ea00 	.word	0x2002ea00

0800d880 <__malloc_lock>:
 800d880:	4801      	ldr	r0, [pc, #4]	; (800d888 <__malloc_lock+0x8>)
 800d882:	f7ff beda 	b.w	800d63a <__retarget_lock_acquire_recursive>
 800d886:	bf00      	nop
 800d888:	2002e9fc 	.word	0x2002e9fc

0800d88c <__malloc_unlock>:
 800d88c:	4801      	ldr	r0, [pc, #4]	; (800d894 <__malloc_unlock+0x8>)
 800d88e:	f7ff bed5 	b.w	800d63c <__retarget_lock_release_recursive>
 800d892:	bf00      	nop
 800d894:	2002e9fc 	.word	0x2002e9fc

0800d898 <__sflush_r>:
 800d898:	898a      	ldrh	r2, [r1, #12]
 800d89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d89e:	4605      	mov	r5, r0
 800d8a0:	0710      	lsls	r0, r2, #28
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	d458      	bmi.n	800d958 <__sflush_r+0xc0>
 800d8a6:	684b      	ldr	r3, [r1, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	dc05      	bgt.n	800d8b8 <__sflush_r+0x20>
 800d8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dc02      	bgt.n	800d8b8 <__sflush_r+0x20>
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8ba:	2e00      	cmp	r6, #0
 800d8bc:	d0f9      	beq.n	800d8b2 <__sflush_r+0x1a>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8c4:	682f      	ldr	r7, [r5, #0]
 800d8c6:	6a21      	ldr	r1, [r4, #32]
 800d8c8:	602b      	str	r3, [r5, #0]
 800d8ca:	d032      	beq.n	800d932 <__sflush_r+0x9a>
 800d8cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8ce:	89a3      	ldrh	r3, [r4, #12]
 800d8d0:	075a      	lsls	r2, r3, #29
 800d8d2:	d505      	bpl.n	800d8e0 <__sflush_r+0x48>
 800d8d4:	6863      	ldr	r3, [r4, #4]
 800d8d6:	1ac0      	subs	r0, r0, r3
 800d8d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8da:	b10b      	cbz	r3, 800d8e0 <__sflush_r+0x48>
 800d8dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8de:	1ac0      	subs	r0, r0, r3
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8e6:	6a21      	ldr	r1, [r4, #32]
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	47b0      	blx	r6
 800d8ec:	1c43      	adds	r3, r0, #1
 800d8ee:	89a3      	ldrh	r3, [r4, #12]
 800d8f0:	d106      	bne.n	800d900 <__sflush_r+0x68>
 800d8f2:	6829      	ldr	r1, [r5, #0]
 800d8f4:	291d      	cmp	r1, #29
 800d8f6:	d82b      	bhi.n	800d950 <__sflush_r+0xb8>
 800d8f8:	4a29      	ldr	r2, [pc, #164]	; (800d9a0 <__sflush_r+0x108>)
 800d8fa:	410a      	asrs	r2, r1
 800d8fc:	07d6      	lsls	r6, r2, #31
 800d8fe:	d427      	bmi.n	800d950 <__sflush_r+0xb8>
 800d900:	2200      	movs	r2, #0
 800d902:	6062      	str	r2, [r4, #4]
 800d904:	04d9      	lsls	r1, r3, #19
 800d906:	6922      	ldr	r2, [r4, #16]
 800d908:	6022      	str	r2, [r4, #0]
 800d90a:	d504      	bpl.n	800d916 <__sflush_r+0x7e>
 800d90c:	1c42      	adds	r2, r0, #1
 800d90e:	d101      	bne.n	800d914 <__sflush_r+0x7c>
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	b903      	cbnz	r3, 800d916 <__sflush_r+0x7e>
 800d914:	6560      	str	r0, [r4, #84]	; 0x54
 800d916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d918:	602f      	str	r7, [r5, #0]
 800d91a:	2900      	cmp	r1, #0
 800d91c:	d0c9      	beq.n	800d8b2 <__sflush_r+0x1a>
 800d91e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d922:	4299      	cmp	r1, r3
 800d924:	d002      	beq.n	800d92c <__sflush_r+0x94>
 800d926:	4628      	mov	r0, r5
 800d928:	f7ff feb6 	bl	800d698 <_free_r>
 800d92c:	2000      	movs	r0, #0
 800d92e:	6360      	str	r0, [r4, #52]	; 0x34
 800d930:	e7c0      	b.n	800d8b4 <__sflush_r+0x1c>
 800d932:	2301      	movs	r3, #1
 800d934:	4628      	mov	r0, r5
 800d936:	47b0      	blx	r6
 800d938:	1c41      	adds	r1, r0, #1
 800d93a:	d1c8      	bne.n	800d8ce <__sflush_r+0x36>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0c5      	beq.n	800d8ce <__sflush_r+0x36>
 800d942:	2b1d      	cmp	r3, #29
 800d944:	d001      	beq.n	800d94a <__sflush_r+0xb2>
 800d946:	2b16      	cmp	r3, #22
 800d948:	d101      	bne.n	800d94e <__sflush_r+0xb6>
 800d94a:	602f      	str	r7, [r5, #0]
 800d94c:	e7b1      	b.n	800d8b2 <__sflush_r+0x1a>
 800d94e:	89a3      	ldrh	r3, [r4, #12]
 800d950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d954:	81a3      	strh	r3, [r4, #12]
 800d956:	e7ad      	b.n	800d8b4 <__sflush_r+0x1c>
 800d958:	690f      	ldr	r7, [r1, #16]
 800d95a:	2f00      	cmp	r7, #0
 800d95c:	d0a9      	beq.n	800d8b2 <__sflush_r+0x1a>
 800d95e:	0793      	lsls	r3, r2, #30
 800d960:	680e      	ldr	r6, [r1, #0]
 800d962:	bf08      	it	eq
 800d964:	694b      	ldreq	r3, [r1, #20]
 800d966:	600f      	str	r7, [r1, #0]
 800d968:	bf18      	it	ne
 800d96a:	2300      	movne	r3, #0
 800d96c:	eba6 0807 	sub.w	r8, r6, r7
 800d970:	608b      	str	r3, [r1, #8]
 800d972:	f1b8 0f00 	cmp.w	r8, #0
 800d976:	dd9c      	ble.n	800d8b2 <__sflush_r+0x1a>
 800d978:	6a21      	ldr	r1, [r4, #32]
 800d97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d97c:	4643      	mov	r3, r8
 800d97e:	463a      	mov	r2, r7
 800d980:	4628      	mov	r0, r5
 800d982:	47b0      	blx	r6
 800d984:	2800      	cmp	r0, #0
 800d986:	dc06      	bgt.n	800d996 <__sflush_r+0xfe>
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d994:	e78e      	b.n	800d8b4 <__sflush_r+0x1c>
 800d996:	4407      	add	r7, r0
 800d998:	eba8 0800 	sub.w	r8, r8, r0
 800d99c:	e7e9      	b.n	800d972 <__sflush_r+0xda>
 800d99e:	bf00      	nop
 800d9a0:	dfbffffe 	.word	0xdfbffffe

0800d9a4 <_fflush_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	690b      	ldr	r3, [r1, #16]
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	b913      	cbnz	r3, 800d9b4 <_fflush_r+0x10>
 800d9ae:	2500      	movs	r5, #0
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	b118      	cbz	r0, 800d9be <_fflush_r+0x1a>
 800d9b6:	6a03      	ldr	r3, [r0, #32]
 800d9b8:	b90b      	cbnz	r3, 800d9be <_fflush_r+0x1a>
 800d9ba:	f7ff fce5 	bl	800d388 <__sinit>
 800d9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0f3      	beq.n	800d9ae <_fflush_r+0xa>
 800d9c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9c8:	07d0      	lsls	r0, r2, #31
 800d9ca:	d404      	bmi.n	800d9d6 <_fflush_r+0x32>
 800d9cc:	0599      	lsls	r1, r3, #22
 800d9ce:	d402      	bmi.n	800d9d6 <_fflush_r+0x32>
 800d9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9d2:	f7ff fe32 	bl	800d63a <__retarget_lock_acquire_recursive>
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	4621      	mov	r1, r4
 800d9da:	f7ff ff5d 	bl	800d898 <__sflush_r>
 800d9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9e0:	07da      	lsls	r2, r3, #31
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	d4e4      	bmi.n	800d9b0 <_fflush_r+0xc>
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	059b      	lsls	r3, r3, #22
 800d9ea:	d4e1      	bmi.n	800d9b0 <_fflush_r+0xc>
 800d9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9ee:	f7ff fe25 	bl	800d63c <__retarget_lock_release_recursive>
 800d9f2:	e7dd      	b.n	800d9b0 <_fflush_r+0xc>

0800d9f4 <fiprintf>:
 800d9f4:	b40e      	push	{r1, r2, r3}
 800d9f6:	b503      	push	{r0, r1, lr}
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	ab03      	add	r3, sp, #12
 800d9fc:	4805      	ldr	r0, [pc, #20]	; (800da14 <fiprintf+0x20>)
 800d9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800da02:	6800      	ldr	r0, [r0, #0]
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	f000 f847 	bl	800da98 <_vfiprintf_r>
 800da0a:	b002      	add	sp, #8
 800da0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da10:	b003      	add	sp, #12
 800da12:	4770      	bx	lr
 800da14:	2000035c 	.word	0x2000035c

0800da18 <_sbrk_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	4d06      	ldr	r5, [pc, #24]	; (800da34 <_sbrk_r+0x1c>)
 800da1c:	2300      	movs	r3, #0
 800da1e:	4604      	mov	r4, r0
 800da20:	4608      	mov	r0, r1
 800da22:	602b      	str	r3, [r5, #0]
 800da24:	f7f6 fd96 	bl	8004554 <_sbrk>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_sbrk_r+0x1a>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_sbrk_r+0x1a>
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	2002e9f8 	.word	0x2002e9f8

0800da38 <abort>:
 800da38:	b508      	push	{r3, lr}
 800da3a:	2006      	movs	r0, #6
 800da3c:	f000 fb94 	bl	800e168 <raise>
 800da40:	2001      	movs	r0, #1
 800da42:	f7f6 fd0f 	bl	8004464 <_exit>

0800da46 <__sfputc_r>:
 800da46:	6893      	ldr	r3, [r2, #8]
 800da48:	3b01      	subs	r3, #1
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	b410      	push	{r4}
 800da4e:	6093      	str	r3, [r2, #8]
 800da50:	da08      	bge.n	800da64 <__sfputc_r+0x1e>
 800da52:	6994      	ldr	r4, [r2, #24]
 800da54:	42a3      	cmp	r3, r4
 800da56:	db01      	blt.n	800da5c <__sfputc_r+0x16>
 800da58:	290a      	cmp	r1, #10
 800da5a:	d103      	bne.n	800da64 <__sfputc_r+0x1e>
 800da5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da60:	f000 bac4 	b.w	800dfec <__swbuf_r>
 800da64:	6813      	ldr	r3, [r2, #0]
 800da66:	1c58      	adds	r0, r3, #1
 800da68:	6010      	str	r0, [r2, #0]
 800da6a:	7019      	strb	r1, [r3, #0]
 800da6c:	4608      	mov	r0, r1
 800da6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <__sfputs_r>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	4606      	mov	r6, r0
 800da78:	460f      	mov	r7, r1
 800da7a:	4614      	mov	r4, r2
 800da7c:	18d5      	adds	r5, r2, r3
 800da7e:	42ac      	cmp	r4, r5
 800da80:	d101      	bne.n	800da86 <__sfputs_r+0x12>
 800da82:	2000      	movs	r0, #0
 800da84:	e007      	b.n	800da96 <__sfputs_r+0x22>
 800da86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8a:	463a      	mov	r2, r7
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7ff ffda 	bl	800da46 <__sfputc_r>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	d1f3      	bne.n	800da7e <__sfputs_r+0xa>
 800da96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da98 <_vfiprintf_r>:
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	460d      	mov	r5, r1
 800da9e:	b09d      	sub	sp, #116	; 0x74
 800daa0:	4614      	mov	r4, r2
 800daa2:	4698      	mov	r8, r3
 800daa4:	4606      	mov	r6, r0
 800daa6:	b118      	cbz	r0, 800dab0 <_vfiprintf_r+0x18>
 800daa8:	6a03      	ldr	r3, [r0, #32]
 800daaa:	b90b      	cbnz	r3, 800dab0 <_vfiprintf_r+0x18>
 800daac:	f7ff fc6c 	bl	800d388 <__sinit>
 800dab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dab2:	07d9      	lsls	r1, r3, #31
 800dab4:	d405      	bmi.n	800dac2 <_vfiprintf_r+0x2a>
 800dab6:	89ab      	ldrh	r3, [r5, #12]
 800dab8:	059a      	lsls	r2, r3, #22
 800daba:	d402      	bmi.n	800dac2 <_vfiprintf_r+0x2a>
 800dabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dabe:	f7ff fdbc 	bl	800d63a <__retarget_lock_acquire_recursive>
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	071b      	lsls	r3, r3, #28
 800dac6:	d501      	bpl.n	800dacc <_vfiprintf_r+0x34>
 800dac8:	692b      	ldr	r3, [r5, #16]
 800daca:	b99b      	cbnz	r3, 800daf4 <_vfiprintf_r+0x5c>
 800dacc:	4629      	mov	r1, r5
 800dace:	4630      	mov	r0, r6
 800dad0:	f000 faca 	bl	800e068 <__swsetup_r>
 800dad4:	b170      	cbz	r0, 800daf4 <_vfiprintf_r+0x5c>
 800dad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad8:	07dc      	lsls	r4, r3, #31
 800dada:	d504      	bpl.n	800dae6 <_vfiprintf_r+0x4e>
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dae0:	b01d      	add	sp, #116	; 0x74
 800dae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae6:	89ab      	ldrh	r3, [r5, #12]
 800dae8:	0598      	lsls	r0, r3, #22
 800daea:	d4f7      	bmi.n	800dadc <_vfiprintf_r+0x44>
 800daec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daee:	f7ff fda5 	bl	800d63c <__retarget_lock_release_recursive>
 800daf2:	e7f3      	b.n	800dadc <_vfiprintf_r+0x44>
 800daf4:	2300      	movs	r3, #0
 800daf6:	9309      	str	r3, [sp, #36]	; 0x24
 800daf8:	2320      	movs	r3, #32
 800dafa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800db02:	2330      	movs	r3, #48	; 0x30
 800db04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dcb8 <_vfiprintf_r+0x220>
 800db08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db0c:	f04f 0901 	mov.w	r9, #1
 800db10:	4623      	mov	r3, r4
 800db12:	469a      	mov	sl, r3
 800db14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db18:	b10a      	cbz	r2, 800db1e <_vfiprintf_r+0x86>
 800db1a:	2a25      	cmp	r2, #37	; 0x25
 800db1c:	d1f9      	bne.n	800db12 <_vfiprintf_r+0x7a>
 800db1e:	ebba 0b04 	subs.w	fp, sl, r4
 800db22:	d00b      	beq.n	800db3c <_vfiprintf_r+0xa4>
 800db24:	465b      	mov	r3, fp
 800db26:	4622      	mov	r2, r4
 800db28:	4629      	mov	r1, r5
 800db2a:	4630      	mov	r0, r6
 800db2c:	f7ff ffa2 	bl	800da74 <__sfputs_r>
 800db30:	3001      	adds	r0, #1
 800db32:	f000 80a9 	beq.w	800dc88 <_vfiprintf_r+0x1f0>
 800db36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db38:	445a      	add	r2, fp
 800db3a:	9209      	str	r2, [sp, #36]	; 0x24
 800db3c:	f89a 3000 	ldrb.w	r3, [sl]
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 80a1 	beq.w	800dc88 <_vfiprintf_r+0x1f0>
 800db46:	2300      	movs	r3, #0
 800db48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db50:	f10a 0a01 	add.w	sl, sl, #1
 800db54:	9304      	str	r3, [sp, #16]
 800db56:	9307      	str	r3, [sp, #28]
 800db58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db5c:	931a      	str	r3, [sp, #104]	; 0x68
 800db5e:	4654      	mov	r4, sl
 800db60:	2205      	movs	r2, #5
 800db62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db66:	4854      	ldr	r0, [pc, #336]	; (800dcb8 <_vfiprintf_r+0x220>)
 800db68:	f7f2 fb92 	bl	8000290 <memchr>
 800db6c:	9a04      	ldr	r2, [sp, #16]
 800db6e:	b9d8      	cbnz	r0, 800dba8 <_vfiprintf_r+0x110>
 800db70:	06d1      	lsls	r1, r2, #27
 800db72:	bf44      	itt	mi
 800db74:	2320      	movmi	r3, #32
 800db76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db7a:	0713      	lsls	r3, r2, #28
 800db7c:	bf44      	itt	mi
 800db7e:	232b      	movmi	r3, #43	; 0x2b
 800db80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db84:	f89a 3000 	ldrb.w	r3, [sl]
 800db88:	2b2a      	cmp	r3, #42	; 0x2a
 800db8a:	d015      	beq.n	800dbb8 <_vfiprintf_r+0x120>
 800db8c:	9a07      	ldr	r2, [sp, #28]
 800db8e:	4654      	mov	r4, sl
 800db90:	2000      	movs	r0, #0
 800db92:	f04f 0c0a 	mov.w	ip, #10
 800db96:	4621      	mov	r1, r4
 800db98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db9c:	3b30      	subs	r3, #48	; 0x30
 800db9e:	2b09      	cmp	r3, #9
 800dba0:	d94d      	bls.n	800dc3e <_vfiprintf_r+0x1a6>
 800dba2:	b1b0      	cbz	r0, 800dbd2 <_vfiprintf_r+0x13a>
 800dba4:	9207      	str	r2, [sp, #28]
 800dba6:	e014      	b.n	800dbd2 <_vfiprintf_r+0x13a>
 800dba8:	eba0 0308 	sub.w	r3, r0, r8
 800dbac:	fa09 f303 	lsl.w	r3, r9, r3
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	9304      	str	r3, [sp, #16]
 800dbb4:	46a2      	mov	sl, r4
 800dbb6:	e7d2      	b.n	800db5e <_vfiprintf_r+0xc6>
 800dbb8:	9b03      	ldr	r3, [sp, #12]
 800dbba:	1d19      	adds	r1, r3, #4
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	9103      	str	r1, [sp, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bfbb      	ittet	lt
 800dbc4:	425b      	neglt	r3, r3
 800dbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800dbca:	9307      	strge	r3, [sp, #28]
 800dbcc:	9307      	strlt	r3, [sp, #28]
 800dbce:	bfb8      	it	lt
 800dbd0:	9204      	strlt	r2, [sp, #16]
 800dbd2:	7823      	ldrb	r3, [r4, #0]
 800dbd4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbd6:	d10c      	bne.n	800dbf2 <_vfiprintf_r+0x15a>
 800dbd8:	7863      	ldrb	r3, [r4, #1]
 800dbda:	2b2a      	cmp	r3, #42	; 0x2a
 800dbdc:	d134      	bne.n	800dc48 <_vfiprintf_r+0x1b0>
 800dbde:	9b03      	ldr	r3, [sp, #12]
 800dbe0:	1d1a      	adds	r2, r3, #4
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	9203      	str	r2, [sp, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bfb8      	it	lt
 800dbea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dbee:	3402      	adds	r4, #2
 800dbf0:	9305      	str	r3, [sp, #20]
 800dbf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dcc8 <_vfiprintf_r+0x230>
 800dbf6:	7821      	ldrb	r1, [r4, #0]
 800dbf8:	2203      	movs	r2, #3
 800dbfa:	4650      	mov	r0, sl
 800dbfc:	f7f2 fb48 	bl	8000290 <memchr>
 800dc00:	b138      	cbz	r0, 800dc12 <_vfiprintf_r+0x17a>
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	eba0 000a 	sub.w	r0, r0, sl
 800dc08:	2240      	movs	r2, #64	; 0x40
 800dc0a:	4082      	lsls	r2, r0
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	3401      	adds	r4, #1
 800dc10:	9304      	str	r3, [sp, #16]
 800dc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc16:	4829      	ldr	r0, [pc, #164]	; (800dcbc <_vfiprintf_r+0x224>)
 800dc18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc1c:	2206      	movs	r2, #6
 800dc1e:	f7f2 fb37 	bl	8000290 <memchr>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d03f      	beq.n	800dca6 <_vfiprintf_r+0x20e>
 800dc26:	4b26      	ldr	r3, [pc, #152]	; (800dcc0 <_vfiprintf_r+0x228>)
 800dc28:	bb1b      	cbnz	r3, 800dc72 <_vfiprintf_r+0x1da>
 800dc2a:	9b03      	ldr	r3, [sp, #12]
 800dc2c:	3307      	adds	r3, #7
 800dc2e:	f023 0307 	bic.w	r3, r3, #7
 800dc32:	3308      	adds	r3, #8
 800dc34:	9303      	str	r3, [sp, #12]
 800dc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc38:	443b      	add	r3, r7
 800dc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc3c:	e768      	b.n	800db10 <_vfiprintf_r+0x78>
 800dc3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc42:	460c      	mov	r4, r1
 800dc44:	2001      	movs	r0, #1
 800dc46:	e7a6      	b.n	800db96 <_vfiprintf_r+0xfe>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	3401      	adds	r4, #1
 800dc4c:	9305      	str	r3, [sp, #20]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	f04f 0c0a 	mov.w	ip, #10
 800dc54:	4620      	mov	r0, r4
 800dc56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc5a:	3a30      	subs	r2, #48	; 0x30
 800dc5c:	2a09      	cmp	r2, #9
 800dc5e:	d903      	bls.n	800dc68 <_vfiprintf_r+0x1d0>
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d0c6      	beq.n	800dbf2 <_vfiprintf_r+0x15a>
 800dc64:	9105      	str	r1, [sp, #20]
 800dc66:	e7c4      	b.n	800dbf2 <_vfiprintf_r+0x15a>
 800dc68:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e7f0      	b.n	800dc54 <_vfiprintf_r+0x1bc>
 800dc72:	ab03      	add	r3, sp, #12
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	462a      	mov	r2, r5
 800dc78:	4b12      	ldr	r3, [pc, #72]	; (800dcc4 <_vfiprintf_r+0x22c>)
 800dc7a:	a904      	add	r1, sp, #16
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f3af 8000 	nop.w
 800dc82:	4607      	mov	r7, r0
 800dc84:	1c78      	adds	r0, r7, #1
 800dc86:	d1d6      	bne.n	800dc36 <_vfiprintf_r+0x19e>
 800dc88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc8a:	07d9      	lsls	r1, r3, #31
 800dc8c:	d405      	bmi.n	800dc9a <_vfiprintf_r+0x202>
 800dc8e:	89ab      	ldrh	r3, [r5, #12]
 800dc90:	059a      	lsls	r2, r3, #22
 800dc92:	d402      	bmi.n	800dc9a <_vfiprintf_r+0x202>
 800dc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc96:	f7ff fcd1 	bl	800d63c <__retarget_lock_release_recursive>
 800dc9a:	89ab      	ldrh	r3, [r5, #12]
 800dc9c:	065b      	lsls	r3, r3, #25
 800dc9e:	f53f af1d 	bmi.w	800dadc <_vfiprintf_r+0x44>
 800dca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dca4:	e71c      	b.n	800dae0 <_vfiprintf_r+0x48>
 800dca6:	ab03      	add	r3, sp, #12
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	462a      	mov	r2, r5
 800dcac:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <_vfiprintf_r+0x22c>)
 800dcae:	a904      	add	r1, sp, #16
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f000 f879 	bl	800dda8 <_printf_i>
 800dcb6:	e7e4      	b.n	800dc82 <_vfiprintf_r+0x1ea>
 800dcb8:	08010307 	.word	0x08010307
 800dcbc:	08010311 	.word	0x08010311
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	0800da75 	.word	0x0800da75
 800dcc8:	0801030d 	.word	0x0801030d

0800dccc <_printf_common>:
 800dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd0:	4616      	mov	r6, r2
 800dcd2:	4699      	mov	r9, r3
 800dcd4:	688a      	ldr	r2, [r1, #8]
 800dcd6:	690b      	ldr	r3, [r1, #16]
 800dcd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	bfb8      	it	lt
 800dce0:	4613      	movlt	r3, r2
 800dce2:	6033      	str	r3, [r6, #0]
 800dce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dce8:	4607      	mov	r7, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	b10a      	cbz	r2, 800dcf2 <_printf_common+0x26>
 800dcee:	3301      	adds	r3, #1
 800dcf0:	6033      	str	r3, [r6, #0]
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	0699      	lsls	r1, r3, #26
 800dcf6:	bf42      	ittt	mi
 800dcf8:	6833      	ldrmi	r3, [r6, #0]
 800dcfa:	3302      	addmi	r3, #2
 800dcfc:	6033      	strmi	r3, [r6, #0]
 800dcfe:	6825      	ldr	r5, [r4, #0]
 800dd00:	f015 0506 	ands.w	r5, r5, #6
 800dd04:	d106      	bne.n	800dd14 <_printf_common+0x48>
 800dd06:	f104 0a19 	add.w	sl, r4, #25
 800dd0a:	68e3      	ldr	r3, [r4, #12]
 800dd0c:	6832      	ldr	r2, [r6, #0]
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	42ab      	cmp	r3, r5
 800dd12:	dc26      	bgt.n	800dd62 <_printf_common+0x96>
 800dd14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd18:	1e13      	subs	r3, r2, #0
 800dd1a:	6822      	ldr	r2, [r4, #0]
 800dd1c:	bf18      	it	ne
 800dd1e:	2301      	movne	r3, #1
 800dd20:	0692      	lsls	r2, r2, #26
 800dd22:	d42b      	bmi.n	800dd7c <_printf_common+0xb0>
 800dd24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd28:	4649      	mov	r1, r9
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	47c0      	blx	r8
 800dd2e:	3001      	adds	r0, #1
 800dd30:	d01e      	beq.n	800dd70 <_printf_common+0xa4>
 800dd32:	6823      	ldr	r3, [r4, #0]
 800dd34:	6922      	ldr	r2, [r4, #16]
 800dd36:	f003 0306 	and.w	r3, r3, #6
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	bf02      	ittt	eq
 800dd3e:	68e5      	ldreq	r5, [r4, #12]
 800dd40:	6833      	ldreq	r3, [r6, #0]
 800dd42:	1aed      	subeq	r5, r5, r3
 800dd44:	68a3      	ldr	r3, [r4, #8]
 800dd46:	bf0c      	ite	eq
 800dd48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd4c:	2500      	movne	r5, #0
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	bfc4      	itt	gt
 800dd52:	1a9b      	subgt	r3, r3, r2
 800dd54:	18ed      	addgt	r5, r5, r3
 800dd56:	2600      	movs	r6, #0
 800dd58:	341a      	adds	r4, #26
 800dd5a:	42b5      	cmp	r5, r6
 800dd5c:	d11a      	bne.n	800dd94 <_printf_common+0xc8>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e008      	b.n	800dd74 <_printf_common+0xa8>
 800dd62:	2301      	movs	r3, #1
 800dd64:	4652      	mov	r2, sl
 800dd66:	4649      	mov	r1, r9
 800dd68:	4638      	mov	r0, r7
 800dd6a:	47c0      	blx	r8
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	d103      	bne.n	800dd78 <_printf_common+0xac>
 800dd70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd78:	3501      	adds	r5, #1
 800dd7a:	e7c6      	b.n	800dd0a <_printf_common+0x3e>
 800dd7c:	18e1      	adds	r1, r4, r3
 800dd7e:	1c5a      	adds	r2, r3, #1
 800dd80:	2030      	movs	r0, #48	; 0x30
 800dd82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd86:	4422      	add	r2, r4
 800dd88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd90:	3302      	adds	r3, #2
 800dd92:	e7c7      	b.n	800dd24 <_printf_common+0x58>
 800dd94:	2301      	movs	r3, #1
 800dd96:	4622      	mov	r2, r4
 800dd98:	4649      	mov	r1, r9
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	47c0      	blx	r8
 800dd9e:	3001      	adds	r0, #1
 800dda0:	d0e6      	beq.n	800dd70 <_printf_common+0xa4>
 800dda2:	3601      	adds	r6, #1
 800dda4:	e7d9      	b.n	800dd5a <_printf_common+0x8e>
	...

0800dda8 <_printf_i>:
 800dda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddac:	7e0f      	ldrb	r7, [r1, #24]
 800ddae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddb0:	2f78      	cmp	r7, #120	; 0x78
 800ddb2:	4691      	mov	r9, r2
 800ddb4:	4680      	mov	r8, r0
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	469a      	mov	sl, r3
 800ddba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddbe:	d807      	bhi.n	800ddd0 <_printf_i+0x28>
 800ddc0:	2f62      	cmp	r7, #98	; 0x62
 800ddc2:	d80a      	bhi.n	800ddda <_printf_i+0x32>
 800ddc4:	2f00      	cmp	r7, #0
 800ddc6:	f000 80d4 	beq.w	800df72 <_printf_i+0x1ca>
 800ddca:	2f58      	cmp	r7, #88	; 0x58
 800ddcc:	f000 80c0 	beq.w	800df50 <_printf_i+0x1a8>
 800ddd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ddd8:	e03a      	b.n	800de50 <_printf_i+0xa8>
 800ddda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddde:	2b15      	cmp	r3, #21
 800dde0:	d8f6      	bhi.n	800ddd0 <_printf_i+0x28>
 800dde2:	a101      	add	r1, pc, #4	; (adr r1, 800dde8 <_printf_i+0x40>)
 800dde4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dde8:	0800de41 	.word	0x0800de41
 800ddec:	0800de55 	.word	0x0800de55
 800ddf0:	0800ddd1 	.word	0x0800ddd1
 800ddf4:	0800ddd1 	.word	0x0800ddd1
 800ddf8:	0800ddd1 	.word	0x0800ddd1
 800ddfc:	0800ddd1 	.word	0x0800ddd1
 800de00:	0800de55 	.word	0x0800de55
 800de04:	0800ddd1 	.word	0x0800ddd1
 800de08:	0800ddd1 	.word	0x0800ddd1
 800de0c:	0800ddd1 	.word	0x0800ddd1
 800de10:	0800ddd1 	.word	0x0800ddd1
 800de14:	0800df59 	.word	0x0800df59
 800de18:	0800de81 	.word	0x0800de81
 800de1c:	0800df13 	.word	0x0800df13
 800de20:	0800ddd1 	.word	0x0800ddd1
 800de24:	0800ddd1 	.word	0x0800ddd1
 800de28:	0800df7b 	.word	0x0800df7b
 800de2c:	0800ddd1 	.word	0x0800ddd1
 800de30:	0800de81 	.word	0x0800de81
 800de34:	0800ddd1 	.word	0x0800ddd1
 800de38:	0800ddd1 	.word	0x0800ddd1
 800de3c:	0800df1b 	.word	0x0800df1b
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	1d1a      	adds	r2, r3, #4
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	602a      	str	r2, [r5, #0]
 800de48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de50:	2301      	movs	r3, #1
 800de52:	e09f      	b.n	800df94 <_printf_i+0x1ec>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	682b      	ldr	r3, [r5, #0]
 800de58:	0607      	lsls	r7, r0, #24
 800de5a:	f103 0104 	add.w	r1, r3, #4
 800de5e:	6029      	str	r1, [r5, #0]
 800de60:	d501      	bpl.n	800de66 <_printf_i+0xbe>
 800de62:	681e      	ldr	r6, [r3, #0]
 800de64:	e003      	b.n	800de6e <_printf_i+0xc6>
 800de66:	0646      	lsls	r6, r0, #25
 800de68:	d5fb      	bpl.n	800de62 <_printf_i+0xba>
 800de6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de6e:	2e00      	cmp	r6, #0
 800de70:	da03      	bge.n	800de7a <_printf_i+0xd2>
 800de72:	232d      	movs	r3, #45	; 0x2d
 800de74:	4276      	negs	r6, r6
 800de76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de7a:	485a      	ldr	r0, [pc, #360]	; (800dfe4 <_printf_i+0x23c>)
 800de7c:	230a      	movs	r3, #10
 800de7e:	e012      	b.n	800dea6 <_printf_i+0xfe>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	6820      	ldr	r0, [r4, #0]
 800de84:	1d19      	adds	r1, r3, #4
 800de86:	6029      	str	r1, [r5, #0]
 800de88:	0605      	lsls	r5, r0, #24
 800de8a:	d501      	bpl.n	800de90 <_printf_i+0xe8>
 800de8c:	681e      	ldr	r6, [r3, #0]
 800de8e:	e002      	b.n	800de96 <_printf_i+0xee>
 800de90:	0641      	lsls	r1, r0, #25
 800de92:	d5fb      	bpl.n	800de8c <_printf_i+0xe4>
 800de94:	881e      	ldrh	r6, [r3, #0]
 800de96:	4853      	ldr	r0, [pc, #332]	; (800dfe4 <_printf_i+0x23c>)
 800de98:	2f6f      	cmp	r7, #111	; 0x6f
 800de9a:	bf0c      	ite	eq
 800de9c:	2308      	moveq	r3, #8
 800de9e:	230a      	movne	r3, #10
 800dea0:	2100      	movs	r1, #0
 800dea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dea6:	6865      	ldr	r5, [r4, #4]
 800dea8:	60a5      	str	r5, [r4, #8]
 800deaa:	2d00      	cmp	r5, #0
 800deac:	bfa2      	ittt	ge
 800deae:	6821      	ldrge	r1, [r4, #0]
 800deb0:	f021 0104 	bicge.w	r1, r1, #4
 800deb4:	6021      	strge	r1, [r4, #0]
 800deb6:	b90e      	cbnz	r6, 800debc <_printf_i+0x114>
 800deb8:	2d00      	cmp	r5, #0
 800deba:	d04b      	beq.n	800df54 <_printf_i+0x1ac>
 800debc:	4615      	mov	r5, r2
 800debe:	fbb6 f1f3 	udiv	r1, r6, r3
 800dec2:	fb03 6711 	mls	r7, r3, r1, r6
 800dec6:	5dc7      	ldrb	r7, [r0, r7]
 800dec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800decc:	4637      	mov	r7, r6
 800dece:	42bb      	cmp	r3, r7
 800ded0:	460e      	mov	r6, r1
 800ded2:	d9f4      	bls.n	800debe <_printf_i+0x116>
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	d10b      	bne.n	800def0 <_printf_i+0x148>
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	07de      	lsls	r6, r3, #31
 800dedc:	d508      	bpl.n	800def0 <_printf_i+0x148>
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	6861      	ldr	r1, [r4, #4]
 800dee2:	4299      	cmp	r1, r3
 800dee4:	bfde      	ittt	le
 800dee6:	2330      	movle	r3, #48	; 0x30
 800dee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800deec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800def0:	1b52      	subs	r2, r2, r5
 800def2:	6122      	str	r2, [r4, #16]
 800def4:	f8cd a000 	str.w	sl, [sp]
 800def8:	464b      	mov	r3, r9
 800defa:	aa03      	add	r2, sp, #12
 800defc:	4621      	mov	r1, r4
 800defe:	4640      	mov	r0, r8
 800df00:	f7ff fee4 	bl	800dccc <_printf_common>
 800df04:	3001      	adds	r0, #1
 800df06:	d14a      	bne.n	800df9e <_printf_i+0x1f6>
 800df08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df0c:	b004      	add	sp, #16
 800df0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	f043 0320 	orr.w	r3, r3, #32
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	4833      	ldr	r0, [pc, #204]	; (800dfe8 <_printf_i+0x240>)
 800df1c:	2778      	movs	r7, #120	; 0x78
 800df1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	6829      	ldr	r1, [r5, #0]
 800df26:	061f      	lsls	r7, r3, #24
 800df28:	f851 6b04 	ldr.w	r6, [r1], #4
 800df2c:	d402      	bmi.n	800df34 <_printf_i+0x18c>
 800df2e:	065f      	lsls	r7, r3, #25
 800df30:	bf48      	it	mi
 800df32:	b2b6      	uxthmi	r6, r6
 800df34:	07df      	lsls	r7, r3, #31
 800df36:	bf48      	it	mi
 800df38:	f043 0320 	orrmi.w	r3, r3, #32
 800df3c:	6029      	str	r1, [r5, #0]
 800df3e:	bf48      	it	mi
 800df40:	6023      	strmi	r3, [r4, #0]
 800df42:	b91e      	cbnz	r6, 800df4c <_printf_i+0x1a4>
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	f023 0320 	bic.w	r3, r3, #32
 800df4a:	6023      	str	r3, [r4, #0]
 800df4c:	2310      	movs	r3, #16
 800df4e:	e7a7      	b.n	800dea0 <_printf_i+0xf8>
 800df50:	4824      	ldr	r0, [pc, #144]	; (800dfe4 <_printf_i+0x23c>)
 800df52:	e7e4      	b.n	800df1e <_printf_i+0x176>
 800df54:	4615      	mov	r5, r2
 800df56:	e7bd      	b.n	800ded4 <_printf_i+0x12c>
 800df58:	682b      	ldr	r3, [r5, #0]
 800df5a:	6826      	ldr	r6, [r4, #0]
 800df5c:	6961      	ldr	r1, [r4, #20]
 800df5e:	1d18      	adds	r0, r3, #4
 800df60:	6028      	str	r0, [r5, #0]
 800df62:	0635      	lsls	r5, r6, #24
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	d501      	bpl.n	800df6c <_printf_i+0x1c4>
 800df68:	6019      	str	r1, [r3, #0]
 800df6a:	e002      	b.n	800df72 <_printf_i+0x1ca>
 800df6c:	0670      	lsls	r0, r6, #25
 800df6e:	d5fb      	bpl.n	800df68 <_printf_i+0x1c0>
 800df70:	8019      	strh	r1, [r3, #0]
 800df72:	2300      	movs	r3, #0
 800df74:	6123      	str	r3, [r4, #16]
 800df76:	4615      	mov	r5, r2
 800df78:	e7bc      	b.n	800def4 <_printf_i+0x14c>
 800df7a:	682b      	ldr	r3, [r5, #0]
 800df7c:	1d1a      	adds	r2, r3, #4
 800df7e:	602a      	str	r2, [r5, #0]
 800df80:	681d      	ldr	r5, [r3, #0]
 800df82:	6862      	ldr	r2, [r4, #4]
 800df84:	2100      	movs	r1, #0
 800df86:	4628      	mov	r0, r5
 800df88:	f7f2 f982 	bl	8000290 <memchr>
 800df8c:	b108      	cbz	r0, 800df92 <_printf_i+0x1ea>
 800df8e:	1b40      	subs	r0, r0, r5
 800df90:	6060      	str	r0, [r4, #4]
 800df92:	6863      	ldr	r3, [r4, #4]
 800df94:	6123      	str	r3, [r4, #16]
 800df96:	2300      	movs	r3, #0
 800df98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df9c:	e7aa      	b.n	800def4 <_printf_i+0x14c>
 800df9e:	6923      	ldr	r3, [r4, #16]
 800dfa0:	462a      	mov	r2, r5
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	47d0      	blx	sl
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	d0ad      	beq.n	800df08 <_printf_i+0x160>
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	079b      	lsls	r3, r3, #30
 800dfb0:	d413      	bmi.n	800dfda <_printf_i+0x232>
 800dfb2:	68e0      	ldr	r0, [r4, #12]
 800dfb4:	9b03      	ldr	r3, [sp, #12]
 800dfb6:	4298      	cmp	r0, r3
 800dfb8:	bfb8      	it	lt
 800dfba:	4618      	movlt	r0, r3
 800dfbc:	e7a6      	b.n	800df0c <_printf_i+0x164>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	4632      	mov	r2, r6
 800dfc2:	4649      	mov	r1, r9
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	47d0      	blx	sl
 800dfc8:	3001      	adds	r0, #1
 800dfca:	d09d      	beq.n	800df08 <_printf_i+0x160>
 800dfcc:	3501      	adds	r5, #1
 800dfce:	68e3      	ldr	r3, [r4, #12]
 800dfd0:	9903      	ldr	r1, [sp, #12]
 800dfd2:	1a5b      	subs	r3, r3, r1
 800dfd4:	42ab      	cmp	r3, r5
 800dfd6:	dcf2      	bgt.n	800dfbe <_printf_i+0x216>
 800dfd8:	e7eb      	b.n	800dfb2 <_printf_i+0x20a>
 800dfda:	2500      	movs	r5, #0
 800dfdc:	f104 0619 	add.w	r6, r4, #25
 800dfe0:	e7f5      	b.n	800dfce <_printf_i+0x226>
 800dfe2:	bf00      	nop
 800dfe4:	08010318 	.word	0x08010318
 800dfe8:	08010329 	.word	0x08010329

0800dfec <__swbuf_r>:
 800dfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfee:	460e      	mov	r6, r1
 800dff0:	4614      	mov	r4, r2
 800dff2:	4605      	mov	r5, r0
 800dff4:	b118      	cbz	r0, 800dffe <__swbuf_r+0x12>
 800dff6:	6a03      	ldr	r3, [r0, #32]
 800dff8:	b90b      	cbnz	r3, 800dffe <__swbuf_r+0x12>
 800dffa:	f7ff f9c5 	bl	800d388 <__sinit>
 800dffe:	69a3      	ldr	r3, [r4, #24]
 800e000:	60a3      	str	r3, [r4, #8]
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	071a      	lsls	r2, r3, #28
 800e006:	d525      	bpl.n	800e054 <__swbuf_r+0x68>
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	b31b      	cbz	r3, 800e054 <__swbuf_r+0x68>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	6922      	ldr	r2, [r4, #16]
 800e010:	1a98      	subs	r0, r3, r2
 800e012:	6963      	ldr	r3, [r4, #20]
 800e014:	b2f6      	uxtb	r6, r6
 800e016:	4283      	cmp	r3, r0
 800e018:	4637      	mov	r7, r6
 800e01a:	dc04      	bgt.n	800e026 <__swbuf_r+0x3a>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	f7ff fcc0 	bl	800d9a4 <_fflush_r>
 800e024:	b9e0      	cbnz	r0, 800e060 <__swbuf_r+0x74>
 800e026:	68a3      	ldr	r3, [r4, #8]
 800e028:	3b01      	subs	r3, #1
 800e02a:	60a3      	str	r3, [r4, #8]
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	6022      	str	r2, [r4, #0]
 800e032:	701e      	strb	r6, [r3, #0]
 800e034:	6962      	ldr	r2, [r4, #20]
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	429a      	cmp	r2, r3
 800e03a:	d004      	beq.n	800e046 <__swbuf_r+0x5a>
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	07db      	lsls	r3, r3, #31
 800e040:	d506      	bpl.n	800e050 <__swbuf_r+0x64>
 800e042:	2e0a      	cmp	r6, #10
 800e044:	d104      	bne.n	800e050 <__swbuf_r+0x64>
 800e046:	4621      	mov	r1, r4
 800e048:	4628      	mov	r0, r5
 800e04a:	f7ff fcab 	bl	800d9a4 <_fflush_r>
 800e04e:	b938      	cbnz	r0, 800e060 <__swbuf_r+0x74>
 800e050:	4638      	mov	r0, r7
 800e052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e054:	4621      	mov	r1, r4
 800e056:	4628      	mov	r0, r5
 800e058:	f000 f806 	bl	800e068 <__swsetup_r>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d0d5      	beq.n	800e00c <__swbuf_r+0x20>
 800e060:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e064:	e7f4      	b.n	800e050 <__swbuf_r+0x64>
	...

0800e068 <__swsetup_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4b2a      	ldr	r3, [pc, #168]	; (800e114 <__swsetup_r+0xac>)
 800e06c:	4605      	mov	r5, r0
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	460c      	mov	r4, r1
 800e072:	b118      	cbz	r0, 800e07c <__swsetup_r+0x14>
 800e074:	6a03      	ldr	r3, [r0, #32]
 800e076:	b90b      	cbnz	r3, 800e07c <__swsetup_r+0x14>
 800e078:	f7ff f986 	bl	800d388 <__sinit>
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e082:	0718      	lsls	r0, r3, #28
 800e084:	d422      	bmi.n	800e0cc <__swsetup_r+0x64>
 800e086:	06d9      	lsls	r1, r3, #27
 800e088:	d407      	bmi.n	800e09a <__swsetup_r+0x32>
 800e08a:	2309      	movs	r3, #9
 800e08c:	602b      	str	r3, [r5, #0]
 800e08e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e098:	e034      	b.n	800e104 <__swsetup_r+0x9c>
 800e09a:	0758      	lsls	r0, r3, #29
 800e09c:	d512      	bpl.n	800e0c4 <__swsetup_r+0x5c>
 800e09e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0a0:	b141      	cbz	r1, 800e0b4 <__swsetup_r+0x4c>
 800e0a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0a6:	4299      	cmp	r1, r3
 800e0a8:	d002      	beq.n	800e0b0 <__swsetup_r+0x48>
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f7ff faf4 	bl	800d698 <_free_r>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	6363      	str	r3, [r4, #52]	; 0x34
 800e0b4:	89a3      	ldrh	r3, [r4, #12]
 800e0b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0ba:	81a3      	strh	r3, [r4, #12]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	6063      	str	r3, [r4, #4]
 800e0c0:	6923      	ldr	r3, [r4, #16]
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	f043 0308 	orr.w	r3, r3, #8
 800e0ca:	81a3      	strh	r3, [r4, #12]
 800e0cc:	6923      	ldr	r3, [r4, #16]
 800e0ce:	b94b      	cbnz	r3, 800e0e4 <__swsetup_r+0x7c>
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0da:	d003      	beq.n	800e0e4 <__swsetup_r+0x7c>
 800e0dc:	4621      	mov	r1, r4
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 f884 	bl	800e1ec <__smakebuf_r>
 800e0e4:	89a0      	ldrh	r0, [r4, #12]
 800e0e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0ea:	f010 0301 	ands.w	r3, r0, #1
 800e0ee:	d00a      	beq.n	800e106 <__swsetup_r+0x9e>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60a3      	str	r3, [r4, #8]
 800e0f4:	6963      	ldr	r3, [r4, #20]
 800e0f6:	425b      	negs	r3, r3
 800e0f8:	61a3      	str	r3, [r4, #24]
 800e0fa:	6923      	ldr	r3, [r4, #16]
 800e0fc:	b943      	cbnz	r3, 800e110 <__swsetup_r+0xa8>
 800e0fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e102:	d1c4      	bne.n	800e08e <__swsetup_r+0x26>
 800e104:	bd38      	pop	{r3, r4, r5, pc}
 800e106:	0781      	lsls	r1, r0, #30
 800e108:	bf58      	it	pl
 800e10a:	6963      	ldrpl	r3, [r4, #20]
 800e10c:	60a3      	str	r3, [r4, #8]
 800e10e:	e7f4      	b.n	800e0fa <__swsetup_r+0x92>
 800e110:	2000      	movs	r0, #0
 800e112:	e7f7      	b.n	800e104 <__swsetup_r+0x9c>
 800e114:	2000035c 	.word	0x2000035c

0800e118 <_raise_r>:
 800e118:	291f      	cmp	r1, #31
 800e11a:	b538      	push	{r3, r4, r5, lr}
 800e11c:	4604      	mov	r4, r0
 800e11e:	460d      	mov	r5, r1
 800e120:	d904      	bls.n	800e12c <_raise_r+0x14>
 800e122:	2316      	movs	r3, #22
 800e124:	6003      	str	r3, [r0, #0]
 800e126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e12a:	bd38      	pop	{r3, r4, r5, pc}
 800e12c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e12e:	b112      	cbz	r2, 800e136 <_raise_r+0x1e>
 800e130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e134:	b94b      	cbnz	r3, 800e14a <_raise_r+0x32>
 800e136:	4620      	mov	r0, r4
 800e138:	f000 f830 	bl	800e19c <_getpid_r>
 800e13c:	462a      	mov	r2, r5
 800e13e:	4601      	mov	r1, r0
 800e140:	4620      	mov	r0, r4
 800e142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e146:	f000 b817 	b.w	800e178 <_kill_r>
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d00a      	beq.n	800e164 <_raise_r+0x4c>
 800e14e:	1c59      	adds	r1, r3, #1
 800e150:	d103      	bne.n	800e15a <_raise_r+0x42>
 800e152:	2316      	movs	r3, #22
 800e154:	6003      	str	r3, [r0, #0]
 800e156:	2001      	movs	r0, #1
 800e158:	e7e7      	b.n	800e12a <_raise_r+0x12>
 800e15a:	2400      	movs	r4, #0
 800e15c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e160:	4628      	mov	r0, r5
 800e162:	4798      	blx	r3
 800e164:	2000      	movs	r0, #0
 800e166:	e7e0      	b.n	800e12a <_raise_r+0x12>

0800e168 <raise>:
 800e168:	4b02      	ldr	r3, [pc, #8]	; (800e174 <raise+0xc>)
 800e16a:	4601      	mov	r1, r0
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f7ff bfd3 	b.w	800e118 <_raise_r>
 800e172:	bf00      	nop
 800e174:	2000035c 	.word	0x2000035c

0800e178 <_kill_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d07      	ldr	r5, [pc, #28]	; (800e198 <_kill_r+0x20>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	4611      	mov	r1, r2
 800e184:	602b      	str	r3, [r5, #0]
 800e186:	f7f6 f95d 	bl	8004444 <_kill>
 800e18a:	1c43      	adds	r3, r0, #1
 800e18c:	d102      	bne.n	800e194 <_kill_r+0x1c>
 800e18e:	682b      	ldr	r3, [r5, #0]
 800e190:	b103      	cbz	r3, 800e194 <_kill_r+0x1c>
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	bd38      	pop	{r3, r4, r5, pc}
 800e196:	bf00      	nop
 800e198:	2002e9f8 	.word	0x2002e9f8

0800e19c <_getpid_r>:
 800e19c:	f7f6 b94a 	b.w	8004434 <_getpid>

0800e1a0 <__swhatbuf_r>:
 800e1a0:	b570      	push	{r4, r5, r6, lr}
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	b096      	sub	sp, #88	; 0x58
 800e1ac:	4615      	mov	r5, r2
 800e1ae:	461e      	mov	r6, r3
 800e1b0:	da0d      	bge.n	800e1ce <__swhatbuf_r+0x2e>
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e1b8:	f04f 0100 	mov.w	r1, #0
 800e1bc:	bf0c      	ite	eq
 800e1be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e1c2:	2340      	movne	r3, #64	; 0x40
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	6031      	str	r1, [r6, #0]
 800e1c8:	602b      	str	r3, [r5, #0]
 800e1ca:	b016      	add	sp, #88	; 0x58
 800e1cc:	bd70      	pop	{r4, r5, r6, pc}
 800e1ce:	466a      	mov	r2, sp
 800e1d0:	f000 f848 	bl	800e264 <_fstat_r>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	dbec      	blt.n	800e1b2 <__swhatbuf_r+0x12>
 800e1d8:	9901      	ldr	r1, [sp, #4]
 800e1da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e1de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e1e2:	4259      	negs	r1, r3
 800e1e4:	4159      	adcs	r1, r3
 800e1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ea:	e7eb      	b.n	800e1c4 <__swhatbuf_r+0x24>

0800e1ec <__smakebuf_r>:
 800e1ec:	898b      	ldrh	r3, [r1, #12]
 800e1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1f0:	079d      	lsls	r5, r3, #30
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	460c      	mov	r4, r1
 800e1f6:	d507      	bpl.n	800e208 <__smakebuf_r+0x1c>
 800e1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	6123      	str	r3, [r4, #16]
 800e200:	2301      	movs	r3, #1
 800e202:	6163      	str	r3, [r4, #20]
 800e204:	b002      	add	sp, #8
 800e206:	bd70      	pop	{r4, r5, r6, pc}
 800e208:	ab01      	add	r3, sp, #4
 800e20a:	466a      	mov	r2, sp
 800e20c:	f7ff ffc8 	bl	800e1a0 <__swhatbuf_r>
 800e210:	9900      	ldr	r1, [sp, #0]
 800e212:	4605      	mov	r5, r0
 800e214:	4630      	mov	r0, r6
 800e216:	f7ff fab3 	bl	800d780 <_malloc_r>
 800e21a:	b948      	cbnz	r0, 800e230 <__smakebuf_r+0x44>
 800e21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e220:	059a      	lsls	r2, r3, #22
 800e222:	d4ef      	bmi.n	800e204 <__smakebuf_r+0x18>
 800e224:	f023 0303 	bic.w	r3, r3, #3
 800e228:	f043 0302 	orr.w	r3, r3, #2
 800e22c:	81a3      	strh	r3, [r4, #12]
 800e22e:	e7e3      	b.n	800e1f8 <__smakebuf_r+0xc>
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	6020      	str	r0, [r4, #0]
 800e234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e238:	81a3      	strh	r3, [r4, #12]
 800e23a:	9b00      	ldr	r3, [sp, #0]
 800e23c:	6163      	str	r3, [r4, #20]
 800e23e:	9b01      	ldr	r3, [sp, #4]
 800e240:	6120      	str	r0, [r4, #16]
 800e242:	b15b      	cbz	r3, 800e25c <__smakebuf_r+0x70>
 800e244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e248:	4630      	mov	r0, r6
 800e24a:	f000 f81d 	bl	800e288 <_isatty_r>
 800e24e:	b128      	cbz	r0, 800e25c <__smakebuf_r+0x70>
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	f023 0303 	bic.w	r3, r3, #3
 800e256:	f043 0301 	orr.w	r3, r3, #1
 800e25a:	81a3      	strh	r3, [r4, #12]
 800e25c:	89a3      	ldrh	r3, [r4, #12]
 800e25e:	431d      	orrs	r5, r3
 800e260:	81a5      	strh	r5, [r4, #12]
 800e262:	e7cf      	b.n	800e204 <__smakebuf_r+0x18>

0800e264 <_fstat_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d07      	ldr	r5, [pc, #28]	; (800e284 <_fstat_r+0x20>)
 800e268:	2300      	movs	r3, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	4611      	mov	r1, r2
 800e270:	602b      	str	r3, [r5, #0]
 800e272:	f7f6 f946 	bl	8004502 <_fstat>
 800e276:	1c43      	adds	r3, r0, #1
 800e278:	d102      	bne.n	800e280 <_fstat_r+0x1c>
 800e27a:	682b      	ldr	r3, [r5, #0]
 800e27c:	b103      	cbz	r3, 800e280 <_fstat_r+0x1c>
 800e27e:	6023      	str	r3, [r4, #0]
 800e280:	bd38      	pop	{r3, r4, r5, pc}
 800e282:	bf00      	nop
 800e284:	2002e9f8 	.word	0x2002e9f8

0800e288 <_isatty_r>:
 800e288:	b538      	push	{r3, r4, r5, lr}
 800e28a:	4d06      	ldr	r5, [pc, #24]	; (800e2a4 <_isatty_r+0x1c>)
 800e28c:	2300      	movs	r3, #0
 800e28e:	4604      	mov	r4, r0
 800e290:	4608      	mov	r0, r1
 800e292:	602b      	str	r3, [r5, #0]
 800e294:	f7f6 f945 	bl	8004522 <_isatty>
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	d102      	bne.n	800e2a2 <_isatty_r+0x1a>
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	b103      	cbz	r3, 800e2a2 <_isatty_r+0x1a>
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	bd38      	pop	{r3, r4, r5, pc}
 800e2a4:	2002e9f8 	.word	0x2002e9f8

0800e2a8 <_init>:
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2aa:	bf00      	nop
 800e2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ae:	bc08      	pop	{r3}
 800e2b0:	469e      	mov	lr, r3
 800e2b2:	4770      	bx	lr

0800e2b4 <_fini>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	bf00      	nop
 800e2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ba:	bc08      	pop	{r3}
 800e2bc:	469e      	mov	lr, r3
 800e2be:	4770      	bx	lr
